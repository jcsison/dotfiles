'use strict';

var ВЕРСИЯ_ДВИЖКА_БРАУЗЕРА = Number.parseInt(/Chrome\/(\d+)/.exec(navigator.userAgent)[1], 10);

var ЭТО_ПЛАНШЕТ = false;

var ДЕЛАТЬ_ПЕРВЫЙ_КАДР_КЛЮЧЕВЫМ = ВЕРСИЯ_ДВИЖКА_БРАУЗЕРА < 50;

var СОСТОЯНИЕ_СМЕНА_ВАРИАНТА = 9;

function Проверить(пУсловие) {
	if (!пУсловие) {
		throw new Error('Проверка не пройдена');
	}
}

if (ВЕРСИЯ_ДВИЖКА_БРАУЗЕРА < 58) {
	Uint8Array.prototype.copyWithin = function(target, begin, end) {
		target |= 0;
		begin |= 0;
		end |= 0;
		var c = end - begin | 0;
		if ((c | 0) > 70) {
			this.set(new Uint8Array(this.buffer, begin, c), target);
		} else {
			while ((begin | 0) < (end | 0)) {
				this[target] = this[begin];
				target = target + 1 | 0;
				begin = begin + 1 | 0;
			}
		}
	};
}

if (ВЕРСИЯ_ДВИЖКА_БРАУЗЕРА >= 70) {
	var СоздатьDataView = мбБуфер => new DataView(мбБуфер.buffer);
} else {
	СоздатьDataView = (мбБуфер => мбБуфер);
	Uint8Array.prototype.getUint8 = function(у) {
		у |= 0;
		return this[у];
	};
	Uint8Array.prototype.getInt16 = function(у) {
		у |= 0;
		return this[у] << 24 >> 16 | this[у + 1 | 0];
	};
	Uint8Array.prototype.getUint16 = function(у) {
		у |= 0;
		return this[у] << 8 | this[у + 1 | 0];
	};
	Uint8Array.prototype.getInt32 = function(у) {
		у |= 0;
		return this[у] << 24 | this[у + 1 | 0] << 16 | this[у + 2 | 0] << 8 | this[у + 3 | 0];
	};
	Uint8Array.prototype.getUint32 = function(у) {
		у |= 0;
		return (this[у] << 24 | this[у + 1 | 0] << 16 | this[у + 2 | 0] << 8 | this[у + 3 | 0]) >>> 0;
	};
	Uint8Array.prototype.setInt8 = Uint8Array.prototype.setUint8 = function(у, чЗначение) {
		у |= 0;
		чЗначение |= 0;
		this[у] = чЗначение;
	};
	Uint8Array.prototype.setInt16 = Uint8Array.prototype.setUint16 = function(у, чЗначение) {
		у |= 0;
		чЗначение |= 0;
		this[у] = чЗначение >> 8;
		this[у + 1 | 0] = чЗначение;
	};
	Uint8Array.prototype.setInt32 = Uint8Array.prototype.setUint32 = function(у, чЗначение) {
		у |= 0;
		чЗначение |= 0;
		this[у] = чЗначение >> 24;
		this[у + 1 | 0] = чЗначение >> 16;
		this[у + 2 | 0] = чЗначение >> 8;
		this[у + 3 | 0] = чЗначение;
	};
}

Uint8Array.prototype.getUint64 = function(у) {
	у |= 0;
	return ((this[у] << 24 | this[у + 1 | 0] << 16 | this[у + 2 | 0] << 8 | this[у + 3 | 0]) >>> 0) * 4294967296 + ((this[у + 4 | 0] << 24 | this[у + 5 | 0] << 16 | this[у + 6 | 0] << 8 | this[у + 7 | 0]) >>> 0);
};

Uint8Array.prototype.setInt64 = Uint8Array.prototype.setUint64 = function(у, чЗначение) {
	у |= 0;
	var ч = Math.trunc(чЗначение);
	if (ч < Number.MIN_SAFE_INTEGER || ч > Number.MAX_SAFE_INTEGER) {
		throw new Error(чЗначение);
	}
	var ч32 = ч / 4294967296 | 0;
	this[у] = ч32 >> 24;
	this[у + 1 | 0] = ч32 >> 16;
	this[у + 2 | 0] = ч32 >> 8;
	this[у + 3 | 0] = ч32;
	ч32 = ч | 0;
	this[у + 4 | 0] = ч32 >> 24;
	this[у + 5 | 0] = ч32 >> 16;
	this[у + 6 | 0] = ч32 >> 8;
	this[у + 7 | 0] = ч32;
};

class Wasm {
	constructor() {
		this._оМодуль = null;
		this._оПамять = null;
		this._оЭкземпляр = null;
	}
	_РассчитатьРазмерКучи(кбРазмер) {
		return Math.ceil(кбРазмер) + (Wasm.РАЗМЕР_СТРАНИЦЫ - 1) & ~(Wasm.РАЗМЕР_СТРАНИЦЫ - 1);
	}
	Компилировать() {
		return fetch('wasm.wasm').then(оОтвет => оОтвет.arrayBuffer()).then(буфКод => WebAssembly.compile ? WebAssembly.compile(буфКод) : new WebAssembly.Module(буфКод)).then(оМодуль => {
			this._оМодуль = оМодуль;
		});
	}
	ВыделитьПамять(кбРазмер) {
		кбРазмер = this._РассчитатьРазмерКучи(кбРазмер);
		if (this._оПамять === null) {
			this._оПамять = new WebAssembly.Memory({
				initial: кбРазмер / Wasm.РАЗМЕР_СТРАНИЦЫ
			});
			this._оЭкземпляр = new WebAssembly.Instance(this._оМодуль, {
				i: {
					m: this._оПамять
				}
			});
		} else {
			this._оПамять.grow((кбРазмер - this._оПамять.buffer.byteLength) / Wasm.РАЗМЕР_СТРАНИЦЫ);
		}
		return [ this._оПамять.buffer, this._оЭкземпляр.exports ];
	}
	ОсвободитьПамять() {
		this._оПамять = null;
		this._оЭкземпляр = null;
	}
	static Доступен() {
		return !!self.WebAssembly;
	}
}

Wasm.РАЗМЕР_СТРАНИЦЫ = 65536;

class Asmjs {
	_РассчитатьРазмерКучи(кбРазмер) {
		кбРазмер = Math.ceil(кбРазмер);
		if (кбРазмер <= Wasm.РАЗМЕР_СТРАНИЦЫ) {
			return Wasm.РАЗМЕР_СТРАНИЦЫ;
		}
		if (кбРазмер < 1 << 24) {
			return 1 << 32 - Math.clz32(кбРазмер - 1);
		}
		return кбРазмер + 16777215 & 4278190080;
	}
	Компилировать() {
		importScripts('asmjs.js');
		return Promise.resolve();
	}
	ВыделитьПамять(кбРазмер) {
		кбРазмер = this._РассчитатьРазмерКучи(кбРазмер);
		var буфКуча = new ArrayBuffer(кбРазмер);
		return [ буфКуча, AsmjsModule(self, null, буфКуча) ];
	}
	ОсвободитьПамять() {}
}

class ПотокБитов {
	constructor(мбБуфер, уНачало, уКонец) {
		Проверить(Number.isInteger(уНачало) && Number.isInteger(уКонец) && уНачало >= 0 && уКонец <= мбБуфер.length && уКонец >= уНачало);
		this._мбБуфер = мбБуфер;
		this._уСледующийБайт = уНачало;
		this._чСледующийБит = 7;
		this.кБитОсталось = (уКонец - уНачало) * 8;
	}
	ПропуститьБиты(кБиты) {
		Проверить(Number.isInteger(кБиты));
		Проверить((this.кБитОсталось -= кБиты) >= 0);
		if (кБиты === 1) {
			if (--this._чСледующийБит < 0) {
				this._чСледующийБит = 7;
				++this._уСледующийБайт;
			}
		} else {
			var ч = this._чСледующийБит - кБиты;
			if (ч >= 0) {
				this._чСледующийБит = ч;
			} else {
				ч = -ч - 1;
				this._чСледующийБит = 7 - (ч & 7);
				this._уСледующийБайт += (ч >>> 3) + 1;
			}
		}
	}
	ПрочестьБиты(кБиты) {
		Проверить(Number.isInteger(кБиты));
		Проверить((this.кБитОсталось -= кБиты) >= 0);
		if (кБиты === 1) {
			чРезультат = this._мбБуфер[this._уСледующийБайт] >>> this._чСледующийБит & 1;
			if (--this._чСледующийБит < 0) {
				this._чСледующийБит = 7;
				++this._уСледующийБайт;
			}
		} else {
			Проверить(кБиты >= 1 && кБиты <= 32);
			var чРезультат = 0;
			var чСледующийБитРезультата = кБиты - 1;
			var чМаска = (1 << this._чСледующийБит + 1) - 1;
			do {
				var чБиты = this._мбБуфер[this._уСледующийБайт] & чМаска;
				чРезультат |= this._чСледующийБит < чСледующийБитРезультата ? чБиты << чСледующийБитРезультата - this._чСледующийБит : чБиты >>> this._чСледующийБит - чСледующийБитРезультата;
				var кБитДобавлено = Math.min(чСледующийБитРезультата, this._чСледующийБит) + 1;
				if ((this._чСледующийБит -= кБитДобавлено) < 0) {
					this._чСледующийБит = 7;
					++this._уСледующийБайт;
					чМаска = 255;
				}
			} while ((чСледующийБитРезультата -= кБитДобавлено) >= 0);
		}
		return чРезультат >>> 0;
	}
	ПрочестьБеззнаковыйЭКГ() {
		for (var кНачальныеНули = 0; this.ПрочестьБиты(1) === 0; ++кНачальныеНули) {}
		Проверить(кНачальныеНули <= 31);
		return кНачальныеНули === 0 ? 0 : (1 << кНачальныеНули >>> 0) - 1 + this.ПрочестьБиты(кНачальныеНули);
	}
	ПрочестьЗнаковыйЭКГ() {
		var ч = this.ПрочестьБеззнаковыйЭКГ();
		return (ч & 1) != 0 ? Math.ceil(ч / 2) : -ч / 2;
	}
	ПропуститьЭКГ() {
		for (var кНачальныеНули = 0; this.ПрочестьБиты(1) === 0; ++кНачальныеНули) {}
		if (кНачальныеНули !== 0) {
			this.ПропуститьБиты(кНачальныеНули);
		}
	}
}

class IsoBaseMedia {
	constructor(мбБуфер, dvБуфер, уНачало) {
		Проверить(Number.isInteger(уНачало) && уНачало >= 0 && уНачало <= мбБуфер.length);
		this.мбБуфер = мбБуфер;
		this.dvБуфер = dvБуфер;
		this.уНачало = уНачало;
		this.уКонец = уНачало;
	}
	Завершить() {
		Проверить(Number.isInteger(this.уКонец) && this.уКонец >= this.уНачало && this.уКонец <= this.мбБуфер.length);
		return this.мбБуфер.subarray(this.уНачало, this.уКонец);
	}
	AddFullBox(сТип, чВерсия, чФлаги, пСодержимое) {
		Проверить(сТип.length === 4 && Number.isFinite(чВерсия) && Number.isFinite(чФлаги));
		Проверить(this.уКонец >= this.уНачало);
		var уНачало = this.уКонец;
		Проверить(this.мбБуфер.length - this.уКонец >= 8);
		this.мбБуфер[уНачало + 4] = сТип.charCodeAt(0);
		this.мбБуфер[уНачало + 5] = сТип.charCodeAt(1);
		this.мбБуфер[уНачало + 6] = сТип.charCodeAt(2);
		this.мбБуфер[уНачало + 7] = сТип.charCodeAt(3);
		this.уКонец += 8;
		if (чВерсия !== -1) {
			Проверить(чВерсия >= 0 && чВерсия <= 255 && чФлаги >= 0 && чФлаги <= 16777215);
			Проверить(this.мбБуфер.length - this.уКонец >= 4);
			this.dvБуфер.setUint32(уНачало + 8, чВерсия << 24 | чФлаги);
			this.уКонец += 4;
		}
		if (typeof пСодержимое == 'number') {
			Проверить(Number.isInteger(пСодержимое) && пСодержимое >= 0);
			this.уКонец += пСодержимое;
			Проверить(this.уКонец <= this.мбБуфер.length);
		} else if (typeof пСодержимое == 'function') {
			var у = this.уКонец;
			пСодержимое();
			Проверить(Number.isInteger(this.уКонец) && this.уКонец >= у && this.уКонец <= this.мбБуфер.length);
		} else {
			this.КопироватьИзМассива(this.уКонец, пСодержимое);
		}
		this.dvБуфер.setUint32(уНачало, this.уКонец - уНачало);
	}
	AddBox(сТип, пСодержимое) {
		return this.AddFullBox(сТип, -1, -1, пСодержимое);
	}
	КопироватьИзМассива(уКуда, мчОткуда) {
		Проверить(Number.isInteger(уКуда) && уКуда >= this.уКонец);
		this.мбБуфер.set(мчОткуда, уКуда);
		this.уКонец = уКуда + мчОткуда.length;
	}
	КопироватьИзБуфера(уКуда, мбОткуда, уНачало, уКонец) {
		Проверить(Number.isInteger(уКуда) && уКуда >= this.уКонец);
		Проверить(мбОткуда.buffer !== this.мбБуфер.buffer);
		if (arguments.length === 2) {
			this.мбБуфер.set(мбОткуда, уКуда);
			this.уКонец = уКуда + мбОткуда.length;
		} else {
			Проверить(Number.isInteger(уНачало) && Number.isInteger(уКонец) && мбОткуда.byteOffset === 0);
			this.мбБуфер.set(new Uint8Array(мбОткуда.buffer, уНачало, уКонец - уНачало), уКуда);
			this.уКонец = уКуда + уКонец - уНачало;
		}
	}
}

class ID3 {
	constructor(мбБуфер, уНачало, уКонец) {
		var РАЗМЕР_ЗАГОЛОВКА_ТЕГА = 10;
		var РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ = 10;
		Проверить(мбБуфер.BYTES_PER_ELEMENT === 1 && Number.isInteger(уНачало) && Number.isInteger(уКонец) && уНачало >= 0 && уНачало <= уКонец);
		this._мб = мбБуфер;
		this._уНачалоТега = -1;
		this._кбРазмерТега = -1;
		this._уНачалоПоля = -1;
		this._кбРазмерПоля = -1;
		var кбРазмер = уКонец - уНачало;
		if (кбРазмер > РАЗМЕР_ЗАГОЛОВКА_ТЕГА + РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ && this._мб[уНачало] === 73 && this._мб[уНачало + 1] === 68 && this._мб[уНачало + 2] === 51 && this._мб[уНачало + 3] === 4 && this._мб[уНачало + 5] === 0 && this._ParseSynchsafeInteger(уНачало + 6) === кбРазмер - РАЗМЕР_ЗАГОЛОВКА_ТЕГА) {
			this._уНачалоТега = уНачало + РАЗМЕР_ЗАГОЛОВКА_ТЕГА;
			this._кбРазмерТега = кбРазмер - РАЗМЕР_ЗАГОЛОВКА_ТЕГА;
		}
	}
	_ParseSynchsafeInteger(уАдрес) {
		var чРезультат = -1;
		var чБайт = this._мб[уАдрес];
		if (чБайт < 128) {
			var ч4Байта = чБайт << 24 - 3;
			чБайт = this._мб[уАдрес + 1];
			if (чБайт < 128) {
				ч4Байта |= чБайт << 16 - 2;
				чБайт = this._мб[уАдрес + 2];
				if (чБайт < 128) {
					ч4Байта |= чБайт << 8 - 1;
					чБайт = this._мб[уАдрес + 3];
					if (чБайт < 128) {
						чРезультат = ч4Байта | чБайт;
					}
				}
			}
		}
		return чРезультат;
	}
	_ПолучитьТекст() {
		if (this._кбРазмерПоля < 2 || this._мб[this._уНачалоПоля] !== 3) {
			return null;
		}
		if (ID3._oUtf8Decoder === null) {
			ID3._oUtf8Decoder = new TextDecoder('utf-8', {
				fatal: true
			});
		}
		try {
			return ID3._oUtf8Decoder.decode(new Uint8Array(this._мб.buffer, this._мб.byteOffset + this._уНачалоПоля + 1, this._кбРазмерПоля - 1));
		} catch (_) {
			return null;
		}
	}
	* [Symbol.iterator]() {
		var РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ = 10;
		var уТег = this._уНачалоТега;
		var кбТег = this._кбРазмерТега;
		while (кбТег > РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ) {
			var чКод1 = this._мб[уТег];
			var чКод2 = this._мб[уТег + 1];
			var чКод3 = this._мб[уТег + 2];
			var чКод4 = this._мб[уТег + 3];
			if ((чКод1 < 48 || чКод1 > 57) && (чКод1 < 65 || чКод1 > 90) || (чКод2 < 48 || чКод2 > 57) && (чКод2 < 65 || чКод2 > 90) || (чКод3 < 48 || чКод3 > 57) && (чКод3 < 65 || чКод3 > 90) || (чКод4 < 48 || чКод4 > 57) && (чКод4 < 65 || чКод4 > 90)) {
				break;
			}
			if (this._мб[уТег + 9] !== 0) {
				break;
			}
			var кбПоле = this._ParseSynchsafeInteger(уТег + 4);
			if (кбПоле < 1 || кбПоле > кбТег - РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ) {
				break;
			}
			this._уНачалоПоля = уТег + РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ;
			this._кбРазмерПоля = кбПоле;
			уТег += РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ + кбПоле;
			кбТег -= РАЗМЕР_ЗАГОЛОВКА_ПОЛЯ + кбПоле;
			yield String.fromCharCode(чКод1, чКод2, чКод3, чКод4);
		}
		this._уНачалоПоля = -1;
		this._кбРазмерПоля = -1;
	}
	ПолучитьПервуюСтроку() {
		var сТекст = this._ПолучитьТекст();
		if (сТекст === null) {
			return null;
		}
		var чКонецСтроки = сТекст.indexOf('\0');
		if (чКонецСтроки === -1) {
			return null;
		}
		return сТекст.slice(0, чКонецСтроки);
	}
	РазобратьTXXX() {
		var сТекст = this._ПолучитьТекст();
		if (сТекст === null) {
			return null;
		}
		var чКонецСтроки = сТекст.indexOf('\0');
		if (чКонецСтроки === -1) {
			return null;
		}
		var сОписание = сТекст.slice(0, чКонецСтроки);
		var сЗначение = сТекст.slice(чКонецСтроки + 1);
		if (сЗначение.indexOf('\0') !== -1) {
			return null;
		}
		return {
			сОписание,
			сЗначение
		};
	}
}

ID3._oUtf8Decoder = null;

class Дорожка {
	constructor(кбСтруктураСемпла) {
		Проверить(Number.isInteger(кбСтруктураСемпла) && кбСтруктураСемпла >= 0);
		this.уНачалоПамятиПотока = 0;
		this.уКонецПамятиПотока = 0;
		this.уНачалоПотока = 0;
		this.уКонецПотока = 0;
		this.уКонецПамятиСемплов = 0;
		this.уНачалоСемплов = 0;
		this.уКонецСемплов = 0;
		this.кбСтруктураСемпла = кбСтруктураСемпла;
		this.чВДНачала = -1;
		this.nContinuityCounter = -1;
		this.pPesPacketEnd = -1;
	}
	Пусто() {
		return this.уКонецПотока === this.уНачалоПотока;
	}
	ПолучитьРазмерПотока() {
		Проверить(Number.isInteger(this.уНачалоПотока) && Number.isInteger(this.уКонецПотока) && this.уНачалоПотока >= 0 && this.уНачалоПотока <= this.уКонецПотока);
		Проверить(this.уНачалоПотока >= this.уНачалоПамятиПотока && this.уКонецПотока <= this.уКонецПамятиПотока);
		return this.уКонецПотока - this.уНачалоПотока;
	}
	ПолучитьРазмерСемплов() {
		Проверить(Number.isInteger(this.уНачалоСемплов) && Number.isInteger(this.уКонецСемплов) && this.уНачалоСемплов >= 0 && this.уНачалоСемплов <= this.уКонецСемплов);
		Проверить(this.уКонецСемплов <= this.уКонецПамятиСемплов);
		Проверить((this.уКонецСемплов - this.уНачалоСемплов) % this.кбСтруктураСемпла == 0);
		return this.уКонецСемплов - this.уНачалоСемплов;
	}
	ПолучитьКоличествоСемплов() {
		return this.ПолучитьРазмерСемплов() / this.кбСтруктураСемпла;
	}
	ПолучитьНомерСемпла(уСемпл) {
		Проверить(Number.isInteger(this.уНачалоСемплов) && Number.isInteger(this.уКонецСемплов) && this.уНачалоСемплов >= 0 && this.уНачалоСемплов <= this.уКонецСемплов);
		Проверить(this.уКонецСемплов <= this.уКонецПамятиСемплов);
		Проверить(Number.isInteger(уСемпл));
		if (this.Пусто() || уСемпл < this.уНачалоСемплов) {
			return NaN;
		}
		Проверить(уСемпл <= this.уКонецСемплов - this.кбСтруктураСемпла);
		Проверить((уСемпл - this.уНачалоСемплов) % this.кбСтруктураСемпла == 0);
		return (уСемпл - this.уНачалоСемплов) / this.кбСтруктураСемпла;
	}
}

var м_Журнал = (() => {
	var _мсВажность = [];
	var _мсЗаписи = [];
	function Добавить(сВажность, сЗапись) {
		_мсВажность.push(сВажность);
		_мсЗаписи.push(`[Worker] ${сЗапись}`);
	}
	function Вот(сЗапись) {
		Добавить('Вот', сЗапись);
	}
	function Окак(сЗапись) {
		Добавить('Окак', сЗапись);
	}
	function Ой(сЗапись) {
		Добавить('Ой', сЗапись);
	}
	function Отправить() {
		if (_мсВажность.length !== 0) {
			postMessage([ 2, _мсВажность, _мсЗаписи ]);
			_мсВажность.length = 0;
			_мсЗаписи.length = 0;
		}
	}
	return {
		Вот,
		Окак,
		Ой,
		Отправить
	};
})();

{
	var РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА = 188;
	var TS_TIMESCALE = 9e4;
	var ДЛИНА_АУДИОСЕМПЛА = 1024;
	var ЧАСТОТА_ДИСКРЕТИЗАЦИИ = [ 96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350 ];
	var НОМЕР_ВИДЕО_ДОРОЖКИ = 1;
	var НОМЕР_АУДИО_ДОРОЖКИ = 2;
	var РАЗМЕР_СТРУКТУРЫ_АУДИОСЕМПЛА = 1 * 4;
	var РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА = 4 * 4;
	var ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА = 0;
	var РАЗМЕР_ВИДЕОСЕМПЛА = 4;
	var ФЛАГИ_ВИДЕОСЕМПЛА = 8;
	var ВП_ВИДЕОСЕМПЛА = 12;
	var _мНеобработанныеСообщения = [];
	var _оИсходныйСегмент = null;
	var _мбКуча = null;
	var _мцКуча = null;
	var _dvКуча = null;
	var _фНайтиПрефикс = null;
	var _оАссемблер = Wasm.Доступен() ? new Wasm() : new Asmjs();
	var _лРазрыв = true;
	var _oPat = null;
	var _oPmt = null;
	var _дорВидео = new Дорожка(РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА);
	var _дорАудио = new Дорожка(РАЗМЕР_СТРУКТУРЫ_АУДИОСЕМПЛА);
	var _дорМетаданные = new Дорожка(0);
	var _муНачалоМетаданных = [];
	var _чВДПоследнегоВидеоСемпла;
	var _чВДКонцаВидеоСегмента;
	var _чВДКонцаАудиоСегмента;
	var _чДлительностьПервогоВидеоСемпла;
	var _чВДПоследнегоВидеоСемплаПредыдущегоВидеоСегмента;
	var _чВДКонцаПредыдущегоВидеоСегмента;
	var _чВДКонцаПредыдущегоАудиоСегмента;
	var _anDecoderSpecificInfo = [ 0, 0 ];
	var _abSequenceParameterSet;
	var _abPictureParameterSet;
	var _abSequenceParameterSetExt;
	var _nProfileIndication;
	var _nConstraintSetFlag;
	var _nLevelIndication;
	var _nChromaFormatIndication;
	var _nBitDepthLumaMinus8;
	var _nBitDepthChromaMinus8;
	var _nMaxNumberReferenceFrames;
	var _чШиринаКартинки;
	var _чВысотаКартинки;
	var _чЧастотаКадров;
	var _чДиапазон;
	var _лЧересстрочное;
	var _nAudioObjectType;
	var _чЧастотаДискретизации;
	var _чКоличествоКаналов;
	var _чПреобразованЗа = NaN;
	var _лЗабраковано;
	var _лПотериВидео;
	var _лПотериЗвука;
	var _чМинДлительностьВидеоСемпла;
	var _чМаксДлительностьВидеоСемпла;
	var _чСредняяДлительностьВидеоСемпла;
	var _чБитрейтЗвука;
	var _чПозицияКодирования;
	var _чПозицияТрансляции;
	var _чВремяКодирования;
	function ОчиститьСтатистику() {
		_лЗабраковано = false;
		_лПотериВидео = false;
		_лПотериЗвука = false;
		_чМинДлительностьВидеоСемпла = +Infinity;
		_чМаксДлительностьВидеоСемпла = -Infinity;
		_чСредняяДлительностьВидеоСемпла = NaN;
		_чБитрейтЗвука = NaN;
		_чПозицияКодирования = NaN;
		_чПозицияТрансляции = NaN;
		_чВремяКодирования = NaN;
	}
	function Браковать(пУсловие) {
		if (!пУсловие) {
			throw new Error('БРАКОВАТЬ');
		}
	}
	function Мс(чВремяТП, сЕдиницыИзмерения = 'мс') {
		return `${(чВремяТП / (TS_TIMESCALE / 1e3)).toFixed(2)}${сЕдиницыИзмерения}`;
	}
	function ОтправитьРезультат(мбуфПередать) {
		postMessage([ 1, _оИсходныйСегмент ], мбуфПередать);
	}
	function ЗавершитьРаботуИПоказатьСообщение(сКодСообщения) {
		postMessage([ 4, сКодСообщения ]);
		throw void 0;
	}
	function ЗавершитьРаботуИОтправитьОтчет(пИсключение) {
		var сПричинаЗавершенияРаботы = пИсключение instanceof Error ? `Поймано исключение в рабочем потоке: ${пИсключение.stack}` : `Поймано исключение в рабочем потоке: [typeof ${typeof пИсключение}] ${new Error(пИсключение).stack}`;
		if (typeof _оИсходныйСегмент == 'object' && _оИсходныйСегмент !== null && typeof _оИсходныйСегмент.пДанные == 'object' && _оИсходныйСегмент.пДанные !== null && _оИсходныйСегмент.пДанные.byteLength) {
			postMessage([ 3, сПричинаЗавершенияРаботы, _оИсходныйСегмент.пДанные ], [ _оИсходныйСегмент.пДанные ]);
		} else {
			postMessage([ 3, сПричинаЗавершенияРаботы, null ]);
		}
		_оИсходныйСегмент = null;
	}
	function ВыброситьВПомойку(мбБарахло) {
		if (ЭТО_ПЛАНШЕТ || ВЕРСИЯ_ДВИЖКА_БРАУЗЕРА >= 64) {
			return;
		}
		if (мбБарахло && мбБарахло.buffer.byteLength) {
			Проверить(_мбКуча === null || _мбКуча.buffer !== мбБарахло.buffer);
			postMessage([ 5, мбБарахло.buffer ], [ мбБарахло.buffer ]);
		}
	}
	var м_Память = (() => {
		var МАКС_ДЛИТЕЛЬНОСТЬ_СЕГМЕНТА = 30;
		var МАКС_ЧАСТОТА_КАДРОВ = 150;
		var МАКС_КОЛИЧЕСТВО_NAL_UNITS_В_КАДРЕ = 10;
		var ЗАНАЧКА = 1.4;
		var РАЗМЕР_КРАТЕН_БАЙТАМ = 1 << 6;
		var РАЗМЕР_ДАННЫХ_АССЕМБЛЕРА = Выровнить(4);
		var РАЗМЕР_ПАМЯТИ_ВИДЕОСЕМПЛОВ = Выровнить(РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА * МАКС_ЧАСТОТА_КАДРОВ * МАКС_ДЛИТЕЛЬНОСТЬ_СЕГМЕНТА);
		var РАЗМЕР_ПАМЯТИ_АУДИОСЕМПЛОВ = Выровнить(РАЗМЕР_СТРУКТУРЫ_АУДИОСЕМПЛА * ЧАСТОТА_ДИСКРЕТИЗАЦИИ[0] / ДЛИНА_АУДИОСЕМПЛА * МАКС_ДЛИТЕЛЬНОСТЬ_СЕГМЕНТА);
		var РАЗМЕР_ПАМЯТИ_МЕДИАПОТОКА = Выровнить(1e4);
		var РАЗМЕР_РЕЗЕРВА_ВИДЕОПОТОКА = Выровнить(МАКС_КОЛИЧЕСТВО_NAL_UNITS_В_КАДРЕ * МАКС_ЧАСТОТА_КАДРОВ * МАКС_ДЛИТЕЛЬНОСТЬ_СЕГМЕНТА);
		function Выровнить(чАдресИлиРазмер) {
			return Math.ceil(чАдресИлиРазмер) + (РАЗМЕР_КРАТЕН_БАЙТАМ - 1) & ~(РАЗМЕР_КРАТЕН_БАЙТАМ - 1);
		}
		function Выделить(мбТранспортныйПоток) {
			var уВыделить = РАЗМЕР_ДАННЫХ_АССЕМБЛЕРА;
			_дорВидео.уНачалоСемплов = _дорВидео.уКонецСемплов = уВыделить;
			_дорВидео.уКонецПамятиСемплов = уВыделить += РАЗМЕР_ПАМЯТИ_ВИДЕОСЕМПЛОВ;
			_дорАудио.уНачалоСемплов = _дорАудио.уКонецСемплов = уВыделить;
			_дорАудио.уКонецПамятиСемплов = уВыделить += РАЗМЕР_ПАМЯТИ_АУДИОСЕМПЛОВ;
			_дорМетаданные.уНачалоПамятиПотока = _дорМетаданные.уНачалоПотока = _дорМетаданные.уКонецПотока = уВыделить;
			_дорМетаданные.уКонецПамятиПотока = уВыделить += РАЗМЕР_ПАМЯТИ_МЕДИАПОТОКА;
			_дорВидео.уНачалоПамятиПотока = уВыделить;
			_дорВидео.уНачалоПотока = _дорВидео.уКонецПотока = уВыделить += РАЗМЕР_РЕЗЕРВА_ВИДЕОПОТОКА;
			var кбПостоянныйРазмер = уВыделить;
			_дорВидео.уКонецПамятиПотока = уВыделить += Выровнить(мбТранспортныйПоток.length);
			_дорАудио.уНачалоПамятиПотока = _дорАудио.уНачалоПотока = _дорАудио.уКонецПотока = уВыделить;
			_дорАудио.уКонецПамятиПотока = уВыделить += Выровнить(мбТранспортныйПоток.length);
			var кбПеременныйРазмер = уВыделить - кбПостоянныйРазмер;
			if (_мбКуча === null || _мбКуча.length < уВыделить) {
				var [буфКуча, оЭкспорт] = _оАссемблер.ВыделитьПамять(кбПостоянныйРазмер + кбПеременныйРазмер * ЗАНАЧКА);
				м_Журнал[_мбКуча === null ? 'Вот' : 'Ой'](`Новый размер кучи ${буфКуча.byteLength} байт`);
				_мбКуча = new Uint8Array(буфКуча);
				_мцКуча = new Int32Array(буфКуча);
				_dvКуча = СоздатьDataView(_мбКуча);
				_фНайтиПрефикс = оЭкспорт.SearchStartCodePrefix;
			}
		}
		function Освободить() {
			_оАссемблер.ОсвободитьПамять();
			_мбКуча = null;
			_мцКуча = null;
			_dvКуча = null;
			_фНайтиПрефикс = null;
		}
		return {
			Выделить,
			Освободить
		};
	})();
	function РазобратьТранспортныйПоток(мбТранспортныйПоток) {
		Браковать(мбТранспортныйПоток.length !== 0 && мбТранспортныйПоток.length % РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА == 0);
		_дорВидео.чВДНачала = _дорАудио.чВДНачала = -1;
		_дорМетаданные.чВДНачала = 0;
		_дорВидео.pPesPacketEnd = _дорАудио.pPesPacketEnd = _дорМетаданные.pPesPacketEnd = -1;
		_муНачалоМетаданных.length = 0;
		_чВДПоследнегоВидеоСемпла = -1;
		if (_лРазрыв) {
			_дорВидео.nContinuityCounter = _дорАудио.nContinuityCounter = _дорМетаданные.nContinuityCounter = -1;
			_oPat = _oPmt = null;
		}
		var nPmtPid = -1, nVideoPid = -1, nAudioPid = -1, nMetadataPid = -1;
		var cPat = 0, cPmt = 0, кИзмененийВД = 0;
		var уТранспортныйПакет = _дорВидео.уНачалоПотока | 0;
		_мбКуча.set(мбТранспортныйПоток, уТранспортныйПакет);
		for (var уКонецТранспортногоПотока = уТранспортныйПакет + мбТранспортныйПоток.length; уТранспортныйПакет !== уКонецТранспортногоПотока; уТранспортныйПакет += РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА) {
			var чЗаголовокТранспортногоПакета = _dvКуча.getUint32(уТранспортныйПакет) | 0;
			Браковать((чЗаголовокТранспортногоПакета & 4286578880) == 1191182336);
			var nPid = (чЗаголовокТранспортногоПакета & 2096896) >> 8;
			var pPayload = уТранспортныйПакет + 4;
			if ((чЗаголовокТранспортногоПакета & 32) != 0) {
				var cbAdaptationField = _мбКуча[pPayload];
				Проверить(cbAdaptationField <= РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА - 5);
				Проверить(cbAdaptationField === 0 || (_мбКуча[pPayload + 1] & 128) == 0);
				pPayload += 1 + cbAdaptationField;
			}
			var дорОбработать;
			switch (nPid) {
			  case nVideoPid:
				if ((чЗаголовокТранспортногоПакета & 4194304) != 0) {
					Проверить((_dvКуча.getUint32(pPayload) & 4294967280) == 480);
				}
				дорОбработать = _дорВидео;
				break;

			  case nAudioPid:
				if ((чЗаголовокТранспортногоПакета & 4194304) != 0) {
					Проверить((_dvКуча.getUint32(pPayload) & 4294967264) == 448);
				}
				дорОбработать = _дорАудио;
				break;

			  case nMetadataPid:
				if ((чЗаголовокТранспортногоПакета & 4194304) != 0) {
					Проверить(_dvКуча.getUint32(pPayload) === 445);
					Проверить((_мбКуча[pPayload + 6] & 4) != 0);
					Проверить((_мбКуча[pPayload + 7] & 192) == 128);
					_муНачалоМетаданных.push(_дорМетаданные.уКонецПотока);
				}
				дорОбработать = _дорМетаданные;
				break;

			  case 0:
				Проверить((чЗаголовокТранспортногоПакета & 4194320) == 4194320);
				var oPat = new ProgramAssociationTable(pPayload, уТранспортныйПакет + РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА);
				if (_oPat === null) {
					_oPat = oPat;
					м_Журнал.Вот(`PatVersion=${oPat.nPatVersion} ProgramNumber=${oPat.nProgramNumber} PmtPid=${oPat.nPmtPid}`);
				} else {
					Проверить(_oPat.nPatVersion === oPat.nPatVersion && _oPat.nProgramNumber === oPat.nProgramNumber && _oPat.nPmtPid === oPat.nPmtPid);
				}
				nPmtPid = oPat.nPmtPid;
				++cPat;
				continue;

			  case nPmtPid:
				Проверить((чЗаголовокТранспортногоПакета & 4194320) == 4194320);
				var oPmt = new ProgramMapTable(pPayload, уТранспортныйПакет + РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА, _oPat.nProgramNumber);
				if (_oPmt === null) {
					_oPmt = oPmt;
					м_Журнал.Вот(`PmtVersion=${oPmt.nPmtVersion} VideoPid=${oPmt.nVideoPid} AudioPid=${oPmt.nAudioPid} MetadataPid=${oPmt.nMetadataPid}`);
				} else {
					Проверить(_oPmt.nPmtVersion === oPmt.nPmtVersion && _oPmt.nVideoPid === oPmt.nVideoPid && _oPmt.nAudioPid === oPmt.nAudioPid && _oPmt.nMetadataPid === oPmt.nMetadataPid);
				}
				({nVideoPid, nAudioPid, nMetadataPid} = oPmt);
				++cPmt;
				continue;

			  default:
				continue;
			}
			if (дорОбработать.nContinuityCounter !== (чЗаголовокТранспортногоПакета & 15) && дорОбработать.nContinuityCounter !== -1) {
				м_Журнал.Ой(`continuity_counter равен ${чЗаголовокТранспортногоПакета & 15} вместо ${дорОбработать.nContinuityCounter} PID=${nPid} СмещениеПакета=${мбТранспортныйПоток.length - уКонецТранспортногоПотока + уТранспортныйПакет}`);
				Браковать(дорОбработать.уКонецПотока === дорОбработать.уНачалоПотока);
			}
			дорОбработать.nContinuityCounter = чЗаголовокТранспортногоПакета + 1 & 15;
			switch (чЗаголовокТранспортногоПакета & 4194320) {
			  case 16:
				Проверить(дорОбработать.уКонецПотока !== дорОбработать.уНачалоПотока);
				break;

			  case 4194320:
				var cbPesPacket = _dvКуча.getUint16(pPayload + 4);
				var cbPesHeader = _мбКуча[pPayload + 8];
				Проверить(дорОбработать.pPesPacketEnd === дорОбработать.уКонецПотока || дорОбработать.pPesPacketEnd === -1);
				if (cbPesPacket !== 0) {
					дорОбработать.pPesPacketEnd = дорОбработать.уКонецПотока + cbPesPacket - 3 - cbPesHeader;
				} else {
					Проверить(nPid === nVideoPid);
					дорОбработать.pPesPacketEnd = -1;
				}
				if (nPid === nVideoPid || дорОбработать.чВДНачала === -1) {
					var nPts, nDts;
					switch (_dvКуча.getUint16(pPayload + 6) & 61632) {
					  case 32896:
						Проверить(cbPesHeader >= 5);
						nPts = DecodeTimestamp(pPayload + 9, 33);
						nDts = nPts;
						break;

					  case 32960:
						Проверить(cbPesHeader >= 10);
						nPts = DecodeTimestamp(pPayload + 9, 49);
						nDts = DecodeTimestamp(pPayload + 14, 17);
						break;

					  default:
						Проверить(false);
					}
					if (дорОбработать.чВДНачала === -1) {
						дорОбработать.чВДНачала = nDts;
					}
					if (nPid === nVideoPid) {
						if (nDts === _чВДПоследнегоВидеоСемпла && cbPesPacket !== 0) {
							Проверить((_мбКуча[pPayload + 6] & 4) == 0);
						} else {
							Проверить(_дорВидео.уКонецСемплов <= _дорВидео.уКонецПамятиСемплов - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА);
							if (_чВДПоследнегоВидеоСемпла !== -1) {
								var чДлительностьВидеоСемпла = nDts - _чВДПоследнегоВидеоСемпла;
								if (чДлительностьВидеоСемпла <= 0) {
									if (чДлительностьВидеоСемпла > -10) {
										чДлительностьВидеоСемпла = 1;
										nDts = _чВДПоследнегоВидеоСемпла + чДлительностьВидеоСемпла;
										++кИзмененийВД;
									} else {
										Браковать(false);
									}
								}
								Проверить(чДлительностьВидеоСемпла < TS_TIMESCALE * 60);
								_чМинДлительностьВидеоСемпла = Math.min(_чМинДлительностьВидеоСемпла, чДлительностьВидеоСемпла);
								_чМаксДлительностьВидеоСемпла = Math.max(_чМаксДлительностьВидеоСемпла, чДлительностьВидеоСемпла);
								_dvКуча.setUint32(_дорВидео.уКонецСемплов + ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА, чДлительностьВидеоСемпла);
								_dvКуча.setUint32(_дорВидео.уКонецСемплов + РАЗМЕР_ВИДЕОСЕМПЛА - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА, _дорВидео.уКонецПотока);
							}
							_dvКуча.setInt32(_дорВидео.уКонецСемплов + ВП_ВИДЕОСЕМПЛА, nPts - nDts);
							_дорВидео.уКонецСемплов += РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА;
							_чВДПоследнегоВидеоСемпла = nDts;
						}
					} else {
						Проверить(nPts === nDts);
					}
				}
				pPayload += 9 + cbPesHeader;
				break;

			  default:
				Проверить(false);
			}
			var cbPayload = уТранспортныйПакет + РАЗМЕР_ТРАНСПОРТНОГО_ПАКЕТА - pPayload;
			Проверить(cbPayload > 0 && cbPayload + дорОбработать.уКонецПотока <= дорОбработать.уКонецПамятиПотока);
			_мбКуча.copyWithin(дорОбработать.уКонецПотока, pPayload, pPayload + cbPayload);
			дорОбработать.уКонецПотока += cbPayload;
		}
		Проверить(_дорВидео.pPesPacketEnd === _дорВидео.уКонецПотока || _дорВидео.pPesPacketEnd === -1);
		Проверить(_дорАудио.pPesPacketEnd === _дорАудио.уКонецПотока || _дорАудио.pPesPacketEnd === -1);
		Проверить(_дорМетаданные.pPesPacketEnd === _дорМетаданные.уКонецПотока || _дорМетаданные.pPesPacketEnd === -1);
		if (cPat !== 1 || cPmt !== 1) {
			м_Журнал.Ой(`Количество таблиц в сегменте: PAT=${cPat} PMT=${cPmt}`);
		}
		if (кИзмененийВД !== 0) {
			м_Журнал.Ой(`Количество видеосемплов с увеличенным ВД: ${кИзмененийВД}`);
		}
		Проверить(nVideoPid !== -1 || nAudioPid !== -1);
		_лПотериВидео = nVideoPid !== -1 && _дорВидео.Пусто();
		_лПотериЗвука = nAudioPid !== -1 && _дорАудио.Пусто();
		if (_лПотериВидео || _лПотериЗвука) {
			м_Журнал.Ой(`Сегмент не годится для воспроизведения: нет видео ${_лПотериВидео}, нет звука ${_лПотериЗвука}`);
			return false;
		}
		var сВажность = _муНачалоМетаданных.length > 1 ? 'Ой' : 'Вот';
		var сЗапись = `Метаданных=${_муНачалоМетаданных.length}`;
		if (!_дорВидео.Пусто()) {
			_dvКуча.setUint32(_дорВидео.уКонецСемплов + РАЗМЕР_ВИДЕОСЕМПЛА - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА, _дорВидео.уКонецПотока);
			var кВидеосемплов = _дорВидео.ПолучитьКоличествоСемплов();
			_чСредняяДлительностьВидеоСемпла = (_чВДПоследнегоВидеоСемпла - _дорВидео.чВДНачала) / (кВидеосемплов - 1);
			if (кВидеосемплов < 25) {
				сВажность = 'Ой';
			}
			сЗапись += ` ВДПервВидСемпла=${(_дорВидео.чВДНачала / TS_TIMESCALE).toFixed(5)}` + ` ВДПослВидСемпла=${(_чВДПоследнегоВидеоСемпла / TS_TIMESCALE).toFixed(5)}` + ` ДлитВидСегмента>${Мс(_чВДПоследнегоВидеоСемпла - _дорВидео.чВДНачала)} ВидСемплов=${кВидеосемплов}` + ` ДлитВидСемплов=${Мс(_чМинДлительностьВидеоСемпла, '')}<${Мс(_чСредняяДлительностьВидеоСемпла, '')}<${Мс(_чМаксДлительностьВидеоСемпла)}` + `(${(TS_TIMESCALE / _чМинДлительностьВидеоСемпла).toFixed(2)}` + `<${(TS_TIMESCALE / _чСредняяДлительностьВидеоСемпла).toFixed(2)}` + `<${(TS_TIMESCALE / _чМаксДлительностьВидеоСемпла).toFixed(2)}к/с)`;
		}
		if (!_дорАудио.Пусто()) {
			сЗапись += ` ВДПервАудСемпла=${(_дорАудио.чВДНачала / TS_TIMESCALE).toFixed(5)}`;
		}
		if (!_дорВидео.Пусто() && !_дорАудио.Пусто()) {
			var чСмещениеЗвука = _дорАудио.чВДНачала - _дорВидео.чВДНачала;
			if (чСмещениеЗвука < -TS_TIMESCALE * .1 || чСмещениеЗвука > TS_TIMESCALE * .2) {
				сВажность = 'Ой';
			}
			сЗапись += ` СмещНачалаАудСегмента=${Мс(_дорАудио.чВДНачала - _дорВидео.чВДНачала)}`;
		}
		м_Журнал[сВажность](сЗапись);
		_чПозицияКодирования = (_дорАудио.чВДНачала !== -1 ? _дорАудио.чВДНачала : _дорВидео.чВДНачала) / TS_TIMESCALE;
		return true;
	}
	function DecodeTimestamp(уАдрес, nMarkerBits) {
		var ч1 = _мбКуча[уАдрес] | 0;
		var ч2 = _dvКуча.getUint32(уАдрес + 1) | 0;
		Проверить((ч1 & 241) == (nMarkerBits | 0) && (ч2 & 65537) == 65537);
		return +((ч1 & 14) * (1 << 29) + (ч2 >> 2 & 1073709056 | ч2 >> 1 & 32767));
	}
	function ProgramAssociationTable(уНачало, уКонец) {
		Проверить(уНачало < уКонец);
		уНачало += 1 + _мбКуча[уНачало];
		Проверить(уКонец - уНачало >= 16);
		Проверить(_мбКуча[уНачало] === 0);
		Проверить((_dvКуча.getUint16(уНачало + 1) & 53247) == 32781);
		Проверить((_мбКуча[уНачало + 5] & 1) == 1);
		var nPatVersion = _мбКуча[уНачало + 5] & 62;
		Проверить(_мбКуча[уНачало + 6] === 0);
		Проверить(_мбКуча[уНачало + 7] === 0);
		var nProgramNumber = _dvКуча.getUint16(уНачало + 8);
		Проверить(nProgramNumber !== 0);
		var nPmtPid = _dvКуча.getUint16(уНачало + 10) & 8191;
		Проверить(nPmtPid >= 16 && nPmtPid <= 8190);
		this.nPatVersion = nPatVersion;
		this.nProgramNumber = nProgramNumber;
		this.nPmtPid = nPmtPid;
	}
	function ProgramMapTable(уНачало, уКонец, nProgramNumber) {
		Проверить(уНачало < уКонец);
		уНачало += 1 + _мбКуча[уНачало];
		Проверить(уКонец - уНачало >= 12);
		Проверить(_мбКуча[уНачало] === 2);
		var уКонецСекции = _dvКуча.getUint16(уНачало + 1);
		Проверить((уКонецСекции & 49152) == 32768);
		уКонецСекции = уНачало + 3 + (уКонецСекции & 4095) - 4;
		Проверить(уКонецСекции >= уНачало + 12 && уКонецСекции + 4 <= уКонец);
		Проверить(_dvКуча.getUint16(уНачало + 3) === nProgramNumber);
		Проверить((_мбКуча[уНачало + 5] & 1) == 1);
		var nPmtVersion = _мбКуча[уНачало + 5] & 62;
		Проверить(_мбКуча[уНачало + 6] === 0);
		Проверить(_мбКуча[уНачало + 7] === 0);
		уНачало += 12 + (_dvКуча.getUint16(уНачало + 10) & 4095);
		var nVideoPid = -1, nAudioPid = -1, nMetadataPid = -1;
		while (уНачало !== уКонецСекции) {
			var pDescriptor = уНачало + 5;
			Проверить(pDescriptor <= уКонецСекции);
			var nElementaryPid = _dvКуча.getUint16(уНачало + 1) & 8191;
			Проверить(nElementaryPid >= 16 && nElementaryPid <= 8190);
			var nEsInfoLength = _dvКуча.getUint16(уНачало + 3) & 4095;
			Проверить(pDescriptor + nEsInfoLength <= уКонецСекции);
			switch (_мбКуча[уНачало]) {
			  case 27:
				if (nVideoPid === -1) {
					nVideoPid = nElementaryPid;
				} else {
					м_Журнал.Ой(`Найден дополнительный видеопоток PID=${nElementaryPid}`);
				}
				break;

			  case 15:
				if (nAudioPid === -1) {
					nAudioPid = nElementaryPid;
				} else {
					м_Журнал.Ой(`Найден дополнительный аудиопоток PID=${nElementaryPid}`);
				}
				break;

			  case 21:
				if (nEsInfoLength === 15 && _мбКуча[pDescriptor] === 38 && _мбКуча[pDescriptor + 1] === 13 && _мбКуча[pDescriptor + 2] === 255 && _мбКуча[pDescriptor + 3] === 255 && _мбКуча[pDescriptor + 4] === 73 && _мбКуча[pDescriptor + 5] === 68 && _мбКуча[pDescriptor + 6] === 51 && _мбКуча[pDescriptor + 7] === 32 && _мбКуча[pDescriptor + 8] === 255 && _мбКуча[pDescriptor + 9] === 73 && _мбКуча[pDescriptor + 10] === 68 && _мбКуча[pDescriptor + 11] === 51 && _мбКуча[pDescriptor + 12] === 32) {
					if (nMetadataPid === -1) {
						nMetadataPid = nElementaryPid;
					} else {
						м_Журнал.Ой(`Найден дополнительный метапоток PID=${nElementaryPid} metadata_service_id=${_мбКуча[pDescriptor + 13]}`);
					}
				}
			}
			уНачало = pDescriptor + nEsInfoLength;
		}
		this.nPmtVersion = nPmtVersion;
		this.nVideoPid = nVideoPid;
		this.nAudioPid = nAudioPid;
		this.nMetadataPid = nMetadataPid;
	}
	function РазобратьМетаданные() {
		if (_муНачалоМетаданных.length === 0) {
			return;
		}
		var oID3 = new ID3(_мбКуча, _муНачалоМетаданных[_муНачалоМетаданных.length - 1], _дорМетаданные.уКонецПотока);
		for (var сИдПоля of oID3) {
			if (сИдПоля === 'TXXX') {
				var {сОписание, сЗначение} = oID3.РазобратьTXXX();
				if (сОписание === 'segmentmetadata') {
					var оМетаданные = JSON.parse(сЗначение);
					if (Number.isFinite(оМетаданные.transc_r)) {
						Проверить(оМетаданные.transc_r > 14200704e5 && оМетаданные.transc_r < 18468864e5);
						_чВремяКодирования = оМетаданные.transc_r;
					}
					if (Number.isFinite(оМетаданные.stream_offset)) {
						Проверить(оМетаданные.stream_offset >= 0);
						_чПозицияТрансляции = оМетаданные.stream_offset;
					}
				}
				break;
			}
		}
	}
	function РазобратьВидеоПоток() {
		if (_лРазрыв) {
			_abSequenceParameterSet = null;
			_abPictureParameterSet = null;
			_abSequenceParameterSetExt = null;
		}
		if (_дорВидео.Пусто()) {
			return true;
		}
		var ФЛАГИ_ОБЫЧНОГО_КАДРА = 65536;
		var ФЛАГИ_КЛЮЧЕВОГО_КАДРА = 0;
		Проверить(_дорВидео.уНачалоПотока > _дорВидео.уНачалоПамятиПотока && _дорВидео.уКонецПотока > _дорВидео.уНачалоПотока && _дорВидео.уКонецСемплов > _дорВидео.уНачалоСемплов);
		var уРазобранныйПоток = _дорВидео.уНачалоПамятиПотока;
		var уСемплПервогоКлючКадра = -1;
		var cNalUnits = 0, cAccessUnits = 0, кСемпловБезVCL = 0, кКлючКадров = 0, уСемплПоследнегоКлючКадра = -1;
		var уСемпл = _дорВидео.уНачалоСемплов;
		var уНачалоСледующегоСемпла = -1;
		var уНачалоРазобранногоСемпла;
		var чФлагиСемпла;
		var pNalUnitEnd = _фНайтиПрефикс(_дорВидео.уНачалоПотока, _дорВидео.уКонецПотока);
		Проверить(pNalUnitEnd === _дорВидео.уНачалоПотока);
		Проверить(_мцКуча[0] > 3);
		for (;;) {
			var кбРазмерПрефикса = pNalUnitEnd === _дорВидео.уКонецПотока ? 0 : _мцКуча[0];
			var лНачалоСемпла = pNalUnitEnd + кбРазмерПрефикса - Math.min(4, кбРазмерПрефикса) >= уНачалоСледующегоСемпла;
			if (лНачалоСемпла && уНачалоСледующегоСемпла !== -1) {
				if (чФлагиСемпла === -1) {
					чФлагиСемпла = ФЛАГИ_ОБЫЧНОГО_КАДРА;
					++кСемпловБезVCL;
				}
				Проверить(уРазобранныйПоток > уНачалоРазобранногоСемпла);
				_dvКуча.setUint32(уСемпл + РАЗМЕР_ВИДЕОСЕМПЛА, уРазобранныйПоток - уНачалоРазобранногоСемпла);
				_dvКуча.setUint32(уСемпл + ФЛАГИ_ВИДЕОСЕМПЛА, чФлагиСемпла);
				уСемпл += РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА;
			}
			if (pNalUnitEnd === _дорВидео.уКонецПотока) {
				Проверить(уСемпл === _дорВидео.уКонецСемплов);
				break;
			}
			var pNalUnitBegin = pNalUnitEnd + кбРазмерПрефикса;
			pNalUnitEnd = _фНайтиПрефикс(pNalUnitBegin, _дорВидео.уКонецПотока);
			Браковать(pNalUnitEnd >= pNalUnitBegin);
			if (лНачалоСемпла) {
				Проверить(уСемпл < _дорВидео.уКонецСемплов);
				уНачалоСледующегоСемпла = _dvКуча.getUint32(уСемпл + РАЗМЕР_ВИДЕОСЕМПЛА);
				уНачалоРазобранногоСемпла = уРазобранныйПоток;
				чФлагиСемпла = -1;
				if (cAccessUnits === 1) {
					cAccessUnits = 0;
				}
			}
			if (pNalUnitBegin === pNalUnitEnd) {
				continue;
			}
			++cNalUnits;
			var nNalRefIdc = _мбКуча[pNalUnitBegin] & 224;
			Браковать(nNalRefIdc < 128);
			switch (_мбКуча[pNalUnitBegin] & 31) {
			  case 1:
			  case 2:
			  case 3:
			  case 4:
				Проверить(чФлагиСемпла !== ФЛАГИ_КЛЮЧЕВОГО_КАДРА);
				чФлагиСемпла = ФЛАГИ_ОБЫЧНОГО_КАДРА;
				break;

			  case 5:
				Проверить(nNalRefIdc !== 0);
				if (чФлагиСемпла !== ФЛАГИ_КЛЮЧЕВОГО_КАДРА) {
					Проверить(чФлагиСемпла !== ФЛАГИ_ОБЫЧНОГО_КАДРА);
					чФлагиСемпла = ФЛАГИ_КЛЮЧЕВОГО_КАДРА;
					if (уСемплПервогоКлючКадра === -1) {
						уСемплПервогоКлючКадра = уСемпл;
					}
					уСемплПоследнегоКлючКадра = уСемпл;
					++кКлючКадров;
				}
				break;

			  case 6:
				Проверить(nNalRefIdc === 0);
				break;

			  case 7:
				Проверить(nNalRefIdc !== 0);
				if (_лРазрыв && (уСемплПервогоКлючКадра === -1 || _abSequenceParameterSet === null)) {
					_abSequenceParameterSet = _мбКуча.slice(pNalUnitBegin, pNalUnitEnd);
				}
				continue;

			  case 8:
				Проверить(nNalRefIdc !== 0);
				if (_лРазрыв && (уСемплПервогоКлючКадра === -1 || _abPictureParameterSet === null)) {
					_abPictureParameterSet = _мбКуча.slice(pNalUnitBegin, pNalUnitEnd);
				}
				continue;

			  case 9:
				Проверить(nNalRefIdc === 0);
				++cAccessUnits;
				continue;

			  case 10:
				Проверить(nNalRefIdc === 0);
				continue;

			  case 11:
				Проверить(nNalRefIdc === 0);
				Проверить(false);
				continue;

			  case 12:
				Проверить(nNalRefIdc === 0);
				continue;

			  case 13:
				Проверить(nNalRefIdc !== 0);
				Проверить(false);
				if (_лРазрыв && (уСемплПервогоКлючКадра === -1 || _abSequenceParameterSetExt === null)) {
					_abSequenceParameterSetExt = _мбКуча.slice(pNalUnitBegin, pNalUnitEnd);
				}
				continue;
			}
			var cbNalUnit = pNalUnitEnd - pNalUnitBegin;
			_dvКуча.setUint32(уРазобранныйПоток, cbNalUnit);
			уРазобранныйПоток += 4;
			Проверить(уРазобранныйПоток < pNalUnitBegin);
			_мбКуча.copyWithin(уРазобранныйПоток, pNalUnitBegin, pNalUnitEnd);
			уРазобранныйПоток += cbNalUnit;
		}
		_дорВидео.уНачалоПотока = _дорВидео.уНачалоПамятиПотока;
		_дорВидео.уКонецПотока = уРазобранныйПоток;
		м_Журнал.Вот('NalUnits=' + cNalUnits + ' КлючКадров=' + кКлючКадров + ' ПервКлючКадр=' + _дорВидео.ПолучитьНомерСемпла(уСемплПервогоКлючКадра) + ' ПослКлючКадр=' + _дорВидео.ПолучитьНомерСемпла(уСемплПоследнегоКлючКадра));
		if (кСемпловБезVCL !== 0) {
			м_Журнал.Ой(`Видеосемплов без VCL NAL unit: ${кСемпловБезVCL}`);
		}
		if (cAccessUnits > 1) {
			м_Журнал.Ой('Несколько access unit в одном видеосемпле');
		}
		if (_лРазрыв) {
			if (уСемплПервогоКлючКадра === -1 || _abSequenceParameterSet === null || _abPictureParameterSet === null) {
				м_Журнал.Ой(`Сегмент не годится для воспроизведения: не найден IDR ${уСемплПервогоКлючКадра === -1}, не найден SPS ${_abSequenceParameterSet === null}, не найден PPS ${_abPictureParameterSet === null}`);
				return false;
			}
			var мбКопия = _abSequenceParameterSet.slice();
			var о = RemoveEmulationPreventionBytesFromNalUnit(мбКопия, 0, мбКопия.length);
			ParseSequenceParameterSet(мбКопия, о.уНачалоRBSP, о.уКонецRBSP);
		} else if (ДЕЛАТЬ_ПЕРВЫЙ_КАДР_КЛЮЧЕВЫМ && уСемплПервогоКлючКадра !== _дорВидео.уНачалоСемплов) {
			м_Журнал.Ой('Делаю первый видеосемпл ключевым');
			_dvКуча.setUint32(_дорВидео.уНачалоСемплов + ФЛАГИ_ВИДЕОСЕМПЛА, ФЛАГИ_КЛЮЧЕВОГО_КАДРА);
		}
		return true;
	}
	function ParseSequenceParameterSet(мбПоток, уНачало, уКонец) {
		_nProfileIndication = мбПоток[уНачало];
		_nConstraintSetFlag = мбПоток[уНачало + 1];
		_nLevelIndication = мбПоток[уНачало + 2];
		var оПотокБитов = new ПотокБитов(мбПоток, уНачало + 3, уКонец);
		оПотокБитов.ПропуститьЭКГ();
		var nSeparateColourPlaneFlag = 0;
		_nChromaFormatIndication = 1;
		_nBitDepthLumaMinus8 = 0;
		_nBitDepthChromaMinus8 = 0;
		switch (_nProfileIndication) {
		  case 183:
			_nChromaFormatIndication = 0;
			break;

		  case 100:
		  case 110:
		  case 122:
		  case 244:
		  case 44:
		  case 83:
		  case 86:
		  case 118:
		  case 128:
		  case 138:
		  case 139:
		  case 134:
			_nChromaFormatIndication = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			Проверить(_nChromaFormatIndication <= 3);
			if (_nChromaFormatIndication === 3) {
				nSeparateColourPlaneFlag = оПотокБитов.ПрочестьБиты(1);
			}
			_nBitDepthLumaMinus8 = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			Проверить(_nBitDepthLumaMinus8 <= 6);
			_nBitDepthChromaMinus8 = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			Проверить(_nBitDepthChromaMinus8 <= 6);
			оПотокБитов.ПропуститьБиты(1);
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				for (var i = 0, ic = _nChromaFormatIndication !== 3 ? 8 : 12; i < ic; ++i) {
					if (оПотокБитов.ПрочестьБиты(1) !== 0) {
						var nLastScale = 8, nNextScale = 8;
						for (var j = 0, jc = i < 6 ? 16 : 64; j < jc; ++j) {
							if (nNextScale !== 0) {
								nNextScale = (nLastScale + оПотокБитов.ПрочестьЗнаковыйЭКГ() + 256) % 256;
							}
							if (nNextScale !== 0) {
								nLastScale = nNextScale;
							}
						}
					}
				}
			}
		}
		оПотокБитов.ПропуститьЭКГ();
		switch (оПотокБитов.ПрочестьБеззнаковыйЭКГ()) {
		  case 0:
			оПотокБитов.ПропуститьЭКГ();
			break;

		  case 1:
			оПотокБитов.ПропуститьБиты(1);
			оПотокБитов.ПропуститьЭКГ();
			оПотокБитов.ПропуститьЭКГ();
			for (i = 0, ic = оПотокБитов.ПрочестьБеззнаковыйЭКГ(); i < ic; ++i) {
				оПотокБитов.ПропуститьЭКГ();
			}
		}
		_nMaxNumberReferenceFrames = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
		оПотокБитов.ПропуститьБиты(1);
		var nPictureWidthInMacroblocks = оПотокБитов.ПрочестьБеззнаковыйЭКГ() + 1;
		var nPictureHeightInMapUnits = оПотокБитов.ПрочестьБеззнаковыйЭКГ() + 1;
		var nFrameMacroblocksOnlyFlag = оПотокБитов.ПрочестьБиты(1);
		if (nFrameMacroblocksOnlyFlag === 0) {
			оПотокБитов.ПропуститьБиты(1);
		}
		оПотокБитов.ПропуститьБиты(1);
		var nFrameCropLeftOffset = 0;
		var nFrameCropRightOffset = 0;
		var nFrameCropTopOffset = 0;
		var nFrameCropBottomOffset = 0;
		if (оПотокБитов.ПрочестьБиты(1) !== 0) {
			nFrameCropLeftOffset = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			nFrameCropRightOffset = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			nFrameCropTopOffset = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
			nFrameCropBottomOffset = оПотокБитов.ПрочестьБеззнаковыйЭКГ();
		}
		_чЧастотаКадров = 0;
		_чДиапазон = -1;
		if (оПотокБитов.ПрочестьБиты(1) !== 0) {
			var nAspectRatioIndication;
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				nAspectRatioIndication = оПотокБитов.ПрочестьБиты(8);
				if (nAspectRatioIndication === 255) {
					оПотокБитов.ПрочестьБиты(16);
					оПотокБитов.ПрочестьБиты(16);
				}
			}
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				оПотокБитов.ПропуститьБиты(1);
			}
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				оПотокБитов.ПрочестьБиты(3);
				_чДиапазон = оПотокБитов.ПрочестьБиты(1);
				if (оПотокБитов.ПрочестьБиты(1) !== 0) {
					оПотокБитов.ПропуститьБиты(8 + 8 + 8);
				}
			}
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				оПотокБитов.ПропуститьЭКГ();
				оПотокБитов.ПропуститьЭКГ();
			}
			var nNumUnitsInTick, nTimeScale, nFixedFrameRateFlag;
			if (оПотокБитов.ПрочестьБиты(1) !== 0) {
				nNumUnitsInTick = оПотокБитов.ПрочестьБиты(32);
				nTimeScale = оПотокБитов.ПрочестьБиты(32);
				nFixedFrameRateFlag = оПотокБитов.ПрочестьБиты(1);
				_чЧастотаКадров = nTimeScale / nNumUnitsInTick / (nFixedFrameRateFlag === 0 ? -2 : 2);
			}
		}
		var nCropUnitX = 1;
		var nCropUnitY = 1;
		if (nSeparateColourPlaneFlag === 0 && _nChromaFormatIndication !== 0) {
			nCropUnitX = _nChromaFormatIndication === 3 ? 1 : 2;
			nCropUnitY = _nChromaFormatIndication === 1 ? 2 : 1;
		}
		if (nFrameMacroblocksOnlyFlag === 0) {
			nCropUnitY += nCropUnitY;
			nPictureHeightInMapUnits += nPictureHeightInMapUnits;
		}
		_чШиринаКартинки = nPictureWidthInMacroblocks * 16 - nCropUnitX * nFrameCropRightOffset - nCropUnitX * nFrameCropLeftOffset;
		_чВысотаКартинки = nPictureHeightInMapUnits * 16 - nCropUnitY * nFrameCropBottomOffset - nCropUnitY * nFrameCropTopOffset;
		_лЧересстрочное = nFrameMacroblocksOnlyFlag === 0;
	}
	function RemoveEmulationPreventionBytesFromNalUnit(мбПоток, уНачало, уКонец) {
		Проверить(уНачало < уКонец);
		var nNalUnitType = мбПоток[уНачало++] & 31;
		if (nNalUnitType === 14 || nNalUnitType === 20 || nNalUnitType === 21) {
			Проверить(уНачало < уКонец);
			уНачало += nNalUnitType === 21 && (мбПоток[уНачало] & 128) != 0 ? 2 : 3;
			Проверить(уНачало <= уКонец);
		}
		var уНачалоRBSP = уНачало;
		var уКонец2 = уКонец - 2;
		while (уНачало < уКонец2) {
			if (мбПоток[уНачало++] === 0 && мбПоток[уНачало++] === 0) {
				var чТретийБайт = мбПоток[уНачало++];
				Проверить(чТретийБайт >= 3);
				if (чТретийБайт === 3) {
					var уДекодированныйПоток = уНачало - 1;
					Проверить(уНачало === уКонец || мбПоток[уНачало] <= 3);
					while (уНачало < уКонец2) {
						if ((мбПоток[уДекодированныйПоток++] = мбПоток[уНачало++]) === 0 && (мбПоток[уДекодированныйПоток++] = мбПоток[уНачало++]) === 0) {
							чТретийБайт = мбПоток[уДекодированныйПоток++] = мбПоток[уНачало++];
							Проверить(чТретийБайт >= 3);
							if (чТретийБайт === 3) {
								--уДекодированныйПоток;
								Проверить(уНачало === уКонец || мбПоток[уНачало] <= 3);
							}
						}
					}
					while (уНачало !== уКонец) {
						var чПоследнийБайт = мбПоток[уДекодированныйПоток++] = мбПоток[уНачало++];
					}
					Проверить(чПоследнийБайт !== 0);
					return {
						уНачалоRBSP,
						уКонецRBSP: уДекодированныйПоток
					};
				}
			}
		}
		Проверить(уНачало === уКонец || мбПоток[уКонец - 1] !== 0);
		return {
			уНачалоRBSP,
			уКонецRBSP: уКонец
		};
	}
	function РазобратьАудиоПоток() {
		if (_дорАудио.Пусто()) {
			return true;
		}
		var ADTS_HEADER_SIZE = 7;
		Проверить(_дорАудио.уКонецПотока > _дорАудио.уНачалоПотока && _дорАудио.уКонецСемплов === _дорАудио.уНачалоСемплов);
		if (_лРазрыв) {
			Проверить(_дорАудио.ПолучитьРазмерПотока() > ADTS_HEADER_SIZE);
			ParseAdtsFixedHeader(_dvКуча.getUint32(_дорАудио.уНачалоПотока));
		}
		var pAdtsFrame = _дорАудио.уНачалоПотока;
		var уРазобранныйПоток = _дорАудио.уНачалоПотока;
		var уСемпл = _дорАудио.уНачалоСемплов;
		var уКонецПотока = _дорАудио.уКонецПотока - ADTS_HEADER_SIZE;
		var уКонецПамятиСемплов = _дорАудио.уКонецПамятиСемплов - РАЗМЕР_СТРУКТУРЫ_АУДИОСЕМПЛА;
		while (pAdtsFrame < уКонецПотока) {
			Проверить(уСемпл <= уКонецПамятиСемплов);
			Проверить(_мбКуча[pAdtsFrame] === 255 && _мбКуча[pAdtsFrame + 1] === 241);
			Проверить((_мбКуча[pAdtsFrame + 6] & 3) == 0);
			var cbAdtsFrame = _dvКуча.getUint32(pAdtsFrame + 3) >> 13 & 8191;
			var pNextAdtsFrame = pAdtsFrame + cbAdtsFrame;
			Проверить(cbAdtsFrame > ADTS_HEADER_SIZE && pNextAdtsFrame <= _дорАудио.уКонецПотока);
			_мбКуча.copyWithin(уРазобранныйПоток, pAdtsFrame + ADTS_HEADER_SIZE, pNextAdtsFrame);
			cbAdtsFrame -= ADTS_HEADER_SIZE;
			уРазобранныйПоток += cbAdtsFrame;
			_dvКуча.setUint32(уСемпл, cbAdtsFrame);
			уСемпл += РАЗМЕР_СТРУКТУРЫ_АУДИОСЕМПЛА;
			pAdtsFrame = pNextAdtsFrame;
		}
		Проверить(pAdtsFrame === _дорАудио.уКонецПотока);
		_дорАудио.уКонецПотока = уРазобранныйПоток;
		_дорАудио.уКонецСемплов = уСемпл;
		var чДлительностьАудиоСемпла = ДЛИНА_АУДИОСЕМПЛА / _чЧастотаДискретизации;
		var чДлительностьАудиоСегмента = _дорАудио.ПолучитьКоличествоСемплов() * чДлительностьАудиоСемпла;
		_чВДКонцаАудиоСегмента = _дорАудио.чВДНачала + Math.round(чДлительностьАудиоСегмента * TS_TIMESCALE);
		_чБитрейтЗвука = _дорАудио.ПолучитьРазмерПотока() * 8 / 1e3 / чДлительностьАудиоСегмента;
		м_Журнал.Вот(`ВДКонцаАудСегмента=${(_чВДКонцаАудиоСегмента / TS_TIMESCALE).toFixed(5)}` + ` ДлитАудСегмента=${(чДлительностьАудиоСегмента * 1e3).toFixed(2)}мс` + ` ДлитАудСемпла=${(чДлительностьАудиоСемпла * 1e3).toFixed(2)}мс`);
		return true;
	}
	function ParseAdtsFixedHeader(nAdtsFixedHeader) {
		Проверить((nAdtsFixedHeader & 4294901760) == (4293984256 | 0));
		_nAudioObjectType = (nAdtsFixedHeader >> 14 & 3) + 1;
		Проверить(_nAudioObjectType === 2);
		_anDecoderSpecificInfo[0] = _nAudioObjectType << 3;
		var чИндексЧастотыДискретизации = nAdtsFixedHeader >> 10 & 15;
		_чЧастотаДискретизации = ЧАСТОТА_ДИСКРЕТИЗАЦИИ[чИндексЧастотыДискретизации];
		Проверить(_чЧастотаДискретизации !== void 0);
		_anDecoderSpecificInfo[0] |= чИндексЧастотыДискретизации >> 1;
		_anDecoderSpecificInfo[1] = чИндексЧастотыДискретизации << 7 & 128;
		_чКоличествоКаналов = nAdtsFixedHeader >> 6 & 7;
		Проверить(_чКоличествоКаналов !== 0);
		_anDecoderSpecificInfo[1] |= _чКоличествоКаналов << 3;
		м_Журнал[_nAudioObjectType !== 2 || _чЧастотаДискретизации < 44100 || _чКоличествоКаналов > 2 ? 'Ой' : 'Вот'](`AudioObjectType=${_nAudioObjectType} ЧастотаДискретизации=${_чЧастотаДискретизации} КоличествоКаналов=${_чКоличествоКаналов}`);
	}
	function ПолучитьНазваниеКодеков() {
		var с = 'video/mp4; codecs="';
		if (!_дорВидео.Пусто()) {
			с += 'avc1.' + ('0' + _nProfileIndication.toString(16)).slice(-2) + ('0' + _nConstraintSetFlag.toString(16)).slice(-2) + ('0' + _nLevelIndication.toString(16)).slice(-2);
		}
		if (!_дорВидео.Пусто() && !_дорАудио.Пусто()) {
			с += ', ';
		}
		if (!_дорАудио.Пусто()) {
			с += `mp4a.40.${_nAudioObjectType}`;
		}
		return с + '"';
	}
	function СоздатьСегментИнициализации() {
		var кбРазмер = 1100 + (_abSequenceParameterSet === null ? 0 : _abSequenceParameterSet.length) + (_abPictureParameterSet === null ? 0 : _abPictureParameterSet.length) + (_abSequenceParameterSetExt === null ? 0 : _abSequenceParameterSetExt.length) + (_дорАудио.Пусто() ? 0 : _anDecoderSpecificInfo.length);
		var мбСегмент = new Uint8Array(кбРазмер);
		var dvСегмент = СоздатьDataView(мбСегмент);
		var оСегмент = new IsoBaseMedia(мбСегмент, dvСегмент, 0);
		оСегмент.AddBox('ftyp', [ 105, 115, 111, 54, 0, 0, 0, 0, 97, 118, 99, 49 ]);
		оСегмент.AddBox('moov', () => {
			оСегмент.AddFullBox('mvhd', 1, 0, [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255 ]);
			оСегмент.AddBox('mvex', () => {
				if (!_дорВидео.Пусто()) {
					оСегмент.AddFullBox('trex', 0, 0, 20);
					оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 20, НОМЕР_ВИДЕО_ДОРОЖКИ);
					оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 16, 1);
				}
				if (!_дорАудио.Пусто()) {
					оСегмент.AddFullBox('trex', 0, 0, 20);
					оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 20, НОМЕР_АУДИО_ДОРОЖКИ);
					оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 16, 1);
					оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 12, ДЛИНА_АУДИОСЕМПЛА);
				}
			});
			if (!_дорВидео.Пусто()) {
				ДобавитьДорожкуВСегментИнициализации(true, оСегмент);
			}
			if (!_дорАудио.Пусто()) {
				ДобавитьДорожкуВСегментИнициализации(false, оСегмент);
			}
		});
		return оСегмент.Завершить();
	}
	function ДобавитьДорожкуВСегментИнициализации(лВидео, оСегмент) {
		оСегмент.AddBox('trak', () => {
			оСегмент.AddFullBox('tkhd', 0, 3, 80);
			оСегмент.мбБуфер[оСегмент.уКонец - 64] = 255;
			оСегмент.мбБуфер[оСегмент.уКонец - 63] = 255;
			оСегмент.мбБуфер[оСегмент.уКонец - 62] = 255;
			оСегмент.мбБуфер[оСегмент.уКонец - 61] = 255;
			оСегмент.мбБуфер[оСегмент.уКонец - 43] = 1;
			оСегмент.мбБуфер[оСегмент.уКонец - 27] = 1;
			оСегмент.мбБуфер[оСегмент.уКонец - 12] = 64;
			if (лВидео) {
				оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 72, НОМЕР_ВИДЕО_ДОРОЖКИ);
				оСегмент.dvБуфер.setUint16(оСегмент.уКонец - 8, _чШиринаКартинки);
				оСегмент.dvБуфер.setUint16(оСегмент.уКонец - 4, _чВысотаКартинки);
			} else {
				оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 72, НОМЕР_АУДИО_ДОРОЖКИ);
				оСегмент.dvБуфер.setUint16(оСегмент.уКонец - 48, 256);
			}
			оСегмент.AddBox('mdia', () => {
				оСегмент.AddFullBox('mdhd', 0, 0, 20);
				оСегмент.dvБуфер.setUint32(оСегмент.уКонец - 12, лВидео ? TS_TIMESCALE : _чЧастотаДискретизации);
				оСегмент.мбБуфер[оСегмент.уКонец - 8] = 255;
				оСегмент.мбБуфер[оСегмент.уКонец - 7] = 255;
				оСегмент.мбБуфер[оСегмент.уКонец - 6] = 255;
				оСегмент.мбБуфер[оСегмент.уКонец - 5] = 255;
				оСегмент.мбБуфер[оСегмент.уКонец - 4] = 85;
				оСегмент.мбБуфер[оСегмент.уКонец - 3] = 196;
				оСегмент.AddFullBox('hdlr', 0, 0, 21);
				if (лВидео) {
					оСегмент.мбБуфер[оСегмент.уКонец - 17] = 118;
					оСегмент.мбБуфер[оСегмент.уКонец - 16] = 105;
					оСегмент.мбБуфер[оСегмент.уКонец - 15] = 100;
					оСегмент.мбБуфер[оСегмент.уКонец - 14] = 101;
				} else {
					оСегмент.мбБуфер[оСегмент.уКонец - 17] = 115;
					оСегмент.мбБуфер[оСегмент.уКонец - 16] = 111;
					оСегмент.мбБуфер[оСегмент.уКонец - 15] = 117;
					оСегмент.мбБуфер[оСегмент.уКонец - 14] = 110;
				}
				оСегмент.AddBox('minf', () => {
					if (лВидео) {
						оСегмент.AddFullBox('vmhd', 0, 1, 8);
					} else {
						оСегмент.AddFullBox('smhd', 0, 0, 4);
					}
					оСегмент.AddBox('dinf', () => {
						оСегмент.AddFullBox('dref', 0, 0, () => {
							оСегмент.dvБуфер.setUint32(оСегмент.уКонец, 1);
							оСегмент.уКонец += 4;
							оСегмент.AddFullBox('url ', 0, 1, 0);
						});
					});
					оСегмент.AddBox('stbl', () => {
						оСегмент.AddFullBox('stsd', 0, 0, () => {
							оСегмент.dvБуфер.setUint32(оСегмент.уКонец, 1);
							оСегмент.уКонец += 4;
							if (лВидео) {
								оСегмент.AddBox('avc1', () => {
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 6, 1);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 24, _чШиринаКартинки);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 26, _чВысотаКартинки);
									оСегмент.dvБуфер.setUint32(оСегмент.уКонец + 28, 4718592);
									оСегмент.dvБуфер.setUint32(оСегмент.уКонец + 32, 4718592);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 40, 1);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 74, 24);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 76, 65535);
									оСегмент.уКонец += 78;
									оСегмент.AddBox('avcC', () => {
										оСегмент.мбБуфер[оСегмент.уКонец] = 1;
										оСегмент.мбБуфер[оСегмент.уКонец + 1] = _nProfileIndication;
										оСегмент.мбБуфер[оСегмент.уКонец + 2] = _nConstraintSetFlag;
										оСегмент.мбБуфер[оСегмент.уКонец + 3] = _nLevelIndication;
										оСегмент.мбБуфер[оСегмент.уКонец + 4] = 255;
										оСегмент.мбБуфер[оСегмент.уКонец + 5] = 225;
										оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 6, _abSequenceParameterSet.length);
										оСегмент.КопироватьИзБуфера(оСегмент.уКонец + 8, _abSequenceParameterSet);
										оСегмент.мбБуфер[оСегмент.уКонец] = 1;
										оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 1, _abPictureParameterSet.length);
										оСегмент.КопироватьИзБуфера(оСегмент.уКонец + 3, _abPictureParameterSet);
										switch (_nProfileIndication) {
										  case 100:
										  case 110:
										  case 122:
										  case 144:
											оСегмент.мбБуфер[оСегмент.уКонец] = 252 | _nChromaFormatIndication;
											оСегмент.мбБуфер[оСегмент.уКонец + 1] = 248 | _nBitDepthLumaMinus8;
											оСегмент.мбБуфер[оСегмент.уКонец + 2] = 248 | _nBitDepthChromaMinus8;
											if (_abSequenceParameterSetExt === null) {
												оСегмент.уКонец += 4;
											} else {
												оСегмент.мбБуфер[оСегмент.уКонец + 3] = 1;
												оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 4, _abSequenceParameterSetExt.length);
												оСегмент.КопироватьИзБуфера(оСегмент.уКонец + 6, _abSequenceParameterSetExt);
											}
										}
									});
								});
							} else {
								оСегмент.AddBox('mp4a', () => {
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 6, 1);
									оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 18, 16);
									оСегмент.уКонец += 28;
									оСегмент.AddFullBox('esds', 0, 0, () => {
										оСегмент.мбБуфер[оСегмент.уКонец] = 3;
										оСегмент.мбБуфер[оСегмент.уКонец + 1] = 23 + _anDecoderSpecificInfo.length;
										оСегмент.dvБуфер.setUint16(оСегмент.уКонец + 2, 1);
										оСегмент.мбБуфер[оСегмент.уКонец + 5] = 4;
										оСегмент.мбБуфер[оСегмент.уКонец + 6] = 15 + _anDecoderSpecificInfo.length;
										оСегмент.мбБуфер[оСегмент.уКонец + 7] = 64;
										оСегмент.мбБуфер[оСегмент.уКонец + 8] = 21;
										оСегмент.мбБуфер[оСегмент.уКонец + 20] = 5;
										оСегмент.мбБуфер[оСегмент.уКонец + 21] = _anDecoderSpecificInfo.length;
										оСегмент.КопироватьИзМассива(оСегмент.уКонец + 22, _anDecoderSpecificInfo);
										оСегмент.мбБуфер[оСегмент.уКонец] = 6;
										оСегмент.мбБуфер[оСегмент.уКонец + 1] = 1;
										оСегмент.мбБуфер[оСегмент.уКонец + 2] = 2;
										оСегмент.уКонец += 3;
									});
								});
							}
						});
						оСегмент.AddFullBox('stts', 0, 0, 4);
						оСегмент.AddFullBox('stsc', 0, 0, 4);
						оСегмент.AddFullBox('stco', 0, 0, 4);
						оСегмент.AddFullBox('stsz', 0, 0, 8);
					});
				});
			});
		});
	}
	function СоздатьМедиасегмент(мбМедиасегмент) {
		var dvМедиасегмент = СоздатьDataView(мбМедиасегмент);
		var оСегмент = new IsoBaseMedia(мбМедиасегмент, dvМедиасегмент, 0);
		var уСмещениеВидеоданных, уСмещениеАудиоданных;
		оСегмент.AddBox('moof', () => {
			оСегмент.AddFullBox('mfhd', 0, 0, 4);
			dvМедиасегмент.setUint32(оСегмент.уКонец - 4, 0);
			if (!_дорВидео.Пусто()) {
				оСегмент.AddBox('traf', () => {
					оСегмент.AddFullBox('tfhd', 0, 131072, 4);
					dvМедиасегмент.setUint32(оСегмент.уКонец - 4, НОМЕР_ВИДЕО_ДОРОЖКИ);
					оСегмент.AddFullBox('tfdt', 1, 0, 8);
					мбМедиасегмент.setUint64(оСегмент.уКонец - 8, _дорВидео.чВДНачала);
					оСегмент.AddFullBox('trun', 1, 3841, () => {
						dvМедиасегмент.setUint32(оСегмент.уКонец, _дорВидео.ПолучитьКоличествоСемплов());
						уСмещениеВидеоданных = оСегмент.уКонец + 4;
						оСегмент.КопироватьИзБуфера(оСегмент.уКонец + 8, _мбКуча, _дорВидео.уНачалоСемплов, _дорВидео.уКонецСемплов);
					});
				});
			}
			if (!_дорАудио.Пусто()) {
				оСегмент.AddBox('traf', () => {
					оСегмент.AddFullBox('tfhd', 0, 131072, 4);
					dvМедиасегмент.setUint32(оСегмент.уКонец - 4, НОМЕР_АУДИО_ДОРОЖКИ);
					оСегмент.AddFullBox('tfdt', 1, 0, 8);
					мбМедиасегмент.setUint64(оСегмент.уКонец - 8, Math.round(_дорАудио.чВДНачала / TS_TIMESCALE * _чЧастотаДискретизации));
					оСегмент.AddFullBox('trun', 1, 513, () => {
						dvМедиасегмент.setUint32(оСегмент.уКонец, _дорАудио.ПолучитьКоличествоСемплов());
						уСмещениеАудиоданных = оСегмент.уКонец + 4;
						оСегмент.КопироватьИзБуфера(оСегмент.уКонец + 8, _мбКуча, _дорАудио.уНачалоСемплов, _дорАудио.уКонецСемплов);
					});
				});
			}
		});
		оСегмент.AddBox('mdat', () => {
			if (!_дорВидео.Пусто()) {
				dvМедиасегмент.setInt32(уСмещениеВидеоданных, оСегмент.уКонец - оСегмент.уНачало);
				оСегмент.КопироватьИзБуфера(оСегмент.уКонец, _мбКуча, _дорВидео.уНачалоПотока, _дорВидео.уКонецПотока);
			}
			if (!_дорАудио.Пусто()) {
				dvМедиасегмент.setInt32(уСмещениеАудиоданных, оСегмент.уКонец - оСегмент.уНачало);
				оСегмент.КопироватьИзБуфера(оСегмент.уКонец, _мбКуча, _дорАудио.уНачалоПотока, _дорАудио.уКонецПотока);
			}
		});
		return оСегмент.Завершить();
	}
	function ОтправитьПреобразованныйСегмент(мбМедиасегмент) {
		var мбуфПередать = void 0;
		var оДанные = {
			чПреобразованЗа: _чПреобразованЗа,
			лЗабраковано: _лЗабраковано,
			лПотериВидео: _лПотериВидео,
			лПотериЗвука: _лПотериЗвука,
			чМинДлительностьВидеоСемпла: _чМинДлительностьВидеоСемпла / TS_TIMESCALE * 1e3,
			чМаксДлительностьВидеоСемпла: _чМаксДлительностьВидеоСемпла / TS_TIMESCALE * 1e3,
			чСредняяДлительностьВидеоСемпла: _чСредняяДлительностьВидеоСемпла / TS_TIMESCALE * 1e3,
			чБитрейтЗвука: _чБитрейтЗвука,
			чПозицияКодирования: _чПозицияКодирования,
			чПозицияТрансляции: _чПозицияТрансляции,
			чВремяКодирования: _чВремяКодирования
		};
		if (мбМедиасегмент) {
			оДанные.мбМедиасегмент = СоздатьМедиасегмент(мбМедиасегмент);
			оДанные.лЕстьВидео = !_дорВидео.Пусто();
			оДанные.лЕстьЗвук = !_дорАудио.Пусто();
			мбуфПередать = [ оДанные.мбМедиасегмент.buffer ];
			if (_лРазрыв) {
				оДанные.мбСегментИнициализации = СоздатьСегментИнициализации();
				оДанные.сКодеки = ПолучитьНазваниеКодеков();
				оДанные.nProfileIndication = _nProfileIndication;
				оДанные.nConstraintSetFlag = _nConstraintSetFlag;
				оДанные.nLevelIndication = _nLevelIndication;
				оДанные.nMaxNumberReferenceFrames = _nMaxNumberReferenceFrames;
				оДанные.чШиринаКартинки = _чШиринаКартинки;
				оДанные.чВысотаКартинки = _чВысотаКартинки;
				оДанные.чЧастотаКадров = _чЧастотаКадров;
				оДанные.чДиапазон = _чДиапазон;
				оДанные.лЧересстрочное = _лЧересстрочное;
				оДанные.nAudioObjectType = _nAudioObjectType;
				оДанные.чЧастотаДискретизации = _чЧастотаДискретизации;
				оДанные.чКоличествоКаналов = _чКоличествоКаналов;
				мбуфПередать.push(оДанные.мбСегментИнициализации.buffer);
			}
			_оИсходныйСегмент.лРазрыв = _лРазрыв;
			м_Журнал.Вот(`Отправляю сегмент Разрыв=${_лРазрыв} Размер=${(оДанные.мбМедиасегмент.length / 1024 / 1024).toFixed(2)}мб`);
		}
		_оИсходныйСегмент.пДанные = оДанные;
		м_Журнал.Отправить();
		ОтправитьРезультат(мбуфПередать);
	}
	function СостыковатьСегменты() {
		_чДлительностьПервогоВидеоСемпла = -1;
		if (_лРазрыв) {
			return;
		}
		var чОтклонениеВДВидео = 0, чПерекрытиеВДВидео = 1, чОтклонениеВДАудио = 0;
		if (!_дорВидео.Пусто()) {
			чОтклонениеВДВидео = _дорВидео.чВДНачала - _чВДКонцаПредыдущегоВидеоСегмента;
			чПерекрытиеВДВидео = _дорВидео.чВДНачала - _чВДПоследнегоВидеоСемплаПредыдущегоВидеоСегмента;
		}
		if (!_дорАудио.Пусто()) {
			чОтклонениеВДАудио = _дорАудио.чВДНачала - _чВДКонцаПредыдущегоАудиоСегмента;
		}
		if (чПерекрытиеВДВидео <= 0 || чОтклонениеВДАудио < -TS_TIMESCALE * .1) {
			м_Журнал.Ой(`Добавлен разрыв: ОтклонениеВДВидео=${Мс(чОтклонениеВДВидео)} ПерекрытиеВДВидео=${Мс(чПерекрытиеВДВидео)} ОтклонениеВДАудио=${чОтклонениеВДАудио}`);
			_лРазрыв = true;
			return;
		}
		if (Math.abs(чОтклонениеВДВидео) > TS_TIMESCALE * .002 || Math.abs(чОтклонениеВДАудио) > 2) {
			м_Журнал.Ой(`ОтклонениеВДВидео=${Мс(чОтклонениеВДВидео)} ПерекрытиеВДВидео=${Мс(чПерекрытиеВДВидео)} ОтклонениеВДАудио=${чОтклонениеВДАудио}`);
		}
		if (чОтклонениеВДВидео > TS_TIMESCALE * .009) {
			_дорВидео.чВДНачала -= чОтклонениеВДВидео;
			if (_дорВидео.ПолучитьКоличествоСемплов() === 1) {
				м_Журнал.Ой('ВД единственного видеосемпла было уменьшено');
			} else {
				_чДлительностьПервогоВидеоСемпла = _dvКуча.getUint32(_дорВидео.уНачалоСемплов + ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА);
				_dvКуча.setUint32(_дорВидео.уНачалоСемплов + ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА, _чДлительностьПервогоВидеоСемпла + чОтклонениеВДВидео);
				_чМинДлительностьВидеоСемпла = Math.min(_чМинДлительностьВидеоСемпла, _чДлительностьПервогоВидеоСемпла + чОтклонениеВДВидео);
				_чМаксДлительностьВидеоСемпла = Math.max(_чМаксДлительностьВидеоСемпла, _чДлительностьПервогоВидеоСемпла + чОтклонениеВДВидео);
				м_Журнал.Ой(`Длительность первого видеосемпла ${Мс(_чДлительностьПервогоВидеоСемпла)} была увеличена`);
			}
		}
		if (чОтклонениеВДАудио > TS_TIMESCALE * .1) {
			_лПотериЗвука = true;
		}
	}
	function РассчитатьДлительностьПоследнегоВидеосемпла() {
		var кВидеосемплов = _дорВидео.ПолучитьКоличествоСемплов();
		if (кВидеосемплов === 0) {
			return;
		}
		var чДлительность;
		if (кВидеосемплов === 1) {
			чДлительность = _дорАудио.Пусто() ? Math.round(TS_TIMESCALE / 30) : _чВДКонцаАудиоСегмента - _дорАудио.чВДНачала;
		} else {
			var чМаксДлительность = Infinity;
			var уСемпл = _дорВидео.уКонецСемплов - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА;
			var чВД = 0;
			var чВППоследнегоВидеоСемпла = _dvКуча.getInt32(уСемпл + ВП_ВИДЕОСЕМПЛА);
			for (var ы = Math.min(16, кВидеосемплов); --ы != 0; ) {
				уСемпл -= РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА;
				чВД -= _dvКуча.getUint32(уСемпл + ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА);
				var чВП = чВД + _dvКуча.getInt32(уСемпл + ВП_ВИДЕОСЕМПЛА);
				if (чВП > чВППоследнегоВидеоСемпла) {
					чМаксДлительность = Math.min(чМаксДлительность, чВП - чВППоследнегоВидеоСемпла);
				}
			}
			чДлительность = Math.min(чМаксДлительность, _чДлительностьПервогоВидеоСемпла !== -1 ? _чДлительностьПервогоВидеоСемпла : _dvКуча.getUint32(_дорВидео.уКонецСемплов - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА * 2 + ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА));
		}
		м_Журнал[кВидеосемплов === 1 ? 'Ой' : 'Вот'](`Длительность последнего видеосемпла ${Мс(чДлительность)}`);
		_dvКуча.setUint32(_дорВидео.уКонецСемплов - РАЗМЕР_СТРУКТУРЫ_ВИДЕОСЕМПЛА + ДЛИТЕЛЬНОСТЬ_ВИДЕОСЕМПЛА, чДлительность);
		_чВДКонцаВидеоСегмента = _чВДПоследнегоВидеоСемпла + чДлительность;
	}
	function ПреобразоватьСегмент() {
		var чНачало = performance.now();
		_лРазрыв = _лРазрыв || _оИсходныйСегмент.лРазрыв;
		м_Журнал.Вот(`ПРЕОБРАЗУЮ СЕГМЕНТ ${_оИсходныйСегмент.чНомер} Разрыв=${_лРазрыв} Длительность=${_оИсходныйСегмент.чДлительность} Размер=${(_оИсходныйСегмент.пДанные.byteLength / 1024 / 1024).toFixed(2)}мб`);
		ОчиститьСтатистику();
		var лСегментПреобразован = false;
		var мбТранспортныйПоток = new Uint8Array(_оИсходныйСегмент.пДанные);
		try {
			м_Память.Выделить(мбТранспортныйПоток);
			if (РазобратьТранспортныйПоток(мбТранспортныйПоток)) {
				СостыковатьСегменты();
				РазобратьМетаданные();
				лСегментПреобразован = РазобратьВидеоПоток() && РазобратьАудиоПоток();
				if (лСегментПреобразован) {
					РассчитатьДлительностьПоследнегоВидеосемпла();
				}
			}
		} catch (пИсключение) {
			if (пИсключение instanceof Error && пИсключение.message === 'БРАКОВАТЬ') {
				м_Журнал.Ой(`Сегмент забракован: ${пИсключение.stack}`);
				ОчиститьСтатистику();
				_лЗабраковано = true;
			} else {
				throw пИсключение;
			}
		}
		_оИсходныйСегмент.пДанные = null;
		if (лСегментПреобразован) {
			ОтправитьПреобразованныйСегмент(мбТранспортныйПоток);
		} else {
			ВыброситьВПомойку(мбТранспортныйПоток);
			ОтправитьПреобразованныйСегмент(null);
		}
		_лРазрыв = !лСегментПреобразован;
		_чВДПоследнегоВидеоСемплаПредыдущегоВидеоСегмента = _чВДПоследнегоВидеоСемпла;
		_чВДКонцаПредыдущегоВидеоСегмента = _чВДКонцаВидеоСегмента;
		_чВДКонцаПредыдущегоАудиоСегмента = _чВДКонцаАудиоСегмента;
		_чПреобразованЗа = performance.now() - чНачало;
	}
	function ОбработатьСменуСостояния() {
		м_Журнал.Вот(`ПРОПУСКАЮ СЕГМЕНТ ${_оИсходныйСегмент.чНомер} Состояние=${_оИсходныйСегмент.пДанные}`);
		if (_оИсходныйСегмент.пДанные !== СОСТОЯНИЕ_СМЕНА_ВАРИАНТА) {
			м_Память.Освободить();
		}
		м_Журнал.Отправить();
		ОтправитьРезультат();
		_лРазрыв = true;
	}
	function ОбработатьСообщение(пДанные) {
		_оИсходныйСегмент = пДанные;
		if (typeof _оИсходныйСегмент.пДанные == 'number') {
			ОбработатьСменуСостояния();
		} else {
			ПреобразоватьСегмент();
		}
		_оИсходныйСегмент = null;
	}
	function ОбработатьИсключение(пИсключение) {
		self.onmessage = null;
		_мНеобработанныеСообщения = null;
		м_Память.Освободить();
		м_Журнал.Отправить();
		ЗавершитьРаботуИОтправитьОтчет(пИсключение);
	}
	self.onmessage = (оСобытие => {
		try {
			if (_мНеобработанныеСообщения !== null) {
				_мНеобработанныеСообщения.push(оСобытие.data);
				м_Журнал.Ой('Обработка сообщения отложена: компиляция не завершена');
				м_Журнал.Отправить();
			} else {
				ОбработатьСообщение(оСобытие.data);
			}
		} catch (пИсключение) {
			ОбработатьИсключение(пИсключение);
		}
	});
	self.onmessageerror = (оСобытие => {
		throw new Error(`Произошло событие ${оСобытие.type}`);
	});
	_оАссемблер.Компилировать().then(() => {
		м_Журнал.Вот(`Компиляция завершена: ${performance.now().toFixed()}мс Необработанных сообщений: ${_мНеобработанныеСообщения.length}`);
		while (_мНеобработанныеСообщения.length !== 0) {
			ОбработатьСообщение(_мНеобработанныеСообщения.shift());
		}
		_мНеобработанныеСообщения = null;
	}).catch(ОбработатьИсключение);
}