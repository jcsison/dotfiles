'use strict';

const ЗАГРУЖАТЬ_МЕТАДАННЫЕ_НЕ_ДОЛЬШЕ = 15e3;

const ЗАГРУЖАТЬ_СПИСОК_ВАРИАНТОВ_НЕ_ДОЛЬШЕ = 15e3;

const ЗАГРУЖАТЬ_СПИСОК_СЕГМЕНТОВ_НЕ_ДОЛЬШЕ = 6e3;

const ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ = 1;

const ОБРАБОТКА_ЗАГРУЖАЕТСЯ = 2;

const ОБРАБОТКА_ЗАГРУЖЕН = 3;

const ОБРАБОТКА_ПРЕОБРАЗОВАН = 4;

const СОСТОЯНИЕ_ЗАПУСК = 1;

const СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ = 2;

const СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ = 3;

const СОСТОЯНИЕ_ЗАГРУЗКА = 4;

const СОСТОЯНИЕ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ = 5;

const СОСТОЯНИЕ_ВОСПРОИЗВЕДЕНИЕ = 6;

const СОСТОЯНИЕ_ОСТАНОВКА = 7;

const СОСТОЯНИЕ_ПОВТОР = 8;

const СОСТОЯНИЕ_СМЕНА_ВАРИАНТА = 9;

const ПОДПИСКА_ОБНОВЛЯЕТСЯ = -1;

const ПОДПИСКА_НЕДОСТУПНА = 0;

const ПОДПИСКА_НЕОФОРМЛЕНА = 1;

const ПОДПИСКА_НЕУВЕДОМЛЯТЬ = 2;

const ПОДПИСКА_УВЕДОМЛЯТЬ = 3;

const КОД_ОТВЕТА = 'Сервер вернул код ';

let г_чТочноеВремя = NaN;

let г_чИдВкладки = NaN;

if (!navigator.clipboard) {
	navigator.clipboard = {};
}

if (!navigator.clipboard.writeText) {
	navigator.clipboard.writeText = function(сТекст) {
		Проверить(typeof сТекст == 'string');
		return new Promise(ДобавитьОбработчикИсключений((фВыполнить, фОтказаться) => {
			const узТекст = document.createElement('input');
			узТекст.type = 'text';
			узТекст.readOnly = true;
			узТекст.value = сТекст;
			узТекст.style.position = 'fixed';
			узТекст.style.left = '-100500px';
			document.body.appendChild(узТекст);
			узТекст.select();
			const лПолучилось = document.execCommand('copy');
			узТекст.remove();
			if (лПолучилось) {
				фВыполнить();
			} else {
				фОтказаться();
			}
		}));
	};
}

function Текст(сКод, сПодстановка) {
	return м_i18n.GetMessage(сКод, сПодстановка);
}

function Округлить(чЗначение, чТочность) {
	Проверить(typeof чЗначение == 'number' && Number.isInteger(чТочность) && чТочность >= 0 && чТочность <= 20);
	if (чТочность === 0) {
		return Math.round(чЗначение);
	}
	const ч = Math.pow(10, чТочность);
	return Math.round(чЗначение * ч) / ч;
}

function Ограничить(чЗначение, чМинимум, чМаксимум) {
	Проверить(Number.isFinite(чЗначение) && Number.isFinite(чМинимум) && Number.isFinite(чМаксимум) && чМинимум <= чМаксимум);
	return Math.min(Math.max(чЗначение, чМинимум), чМаксимум);
}

function StripHtmlTags(sText) {
	Проверить(typeof sText == 'string');
	const elTemplate = document.createElement('template');
	//! <template> does not load or execute anything.
		elTemplate.innerHTML = sText;
	return elTemplate.content.textContent;
}

function ПреобразоватьРазметкуВТекст(сРазметка) {
	Проверить(typeof сРазметка == 'string');
	сРазметка = сРазметка.replace(/[\t\r\n]/g, ' ').replace(/<\s*br[\s\/]*>/gi, '\n');
	сРазметка = StripHtmlTags(сРазметка);
	сРазметка = сРазметка.replace(/^\s+|[^\S\r\n]+$/gm, '');
	return сРазметка.replace(/[^\S\r\n]{2,}/g, ' ');
}

function ResolveRelativeUrl(sRelativeUrl, sAbsoluteBaseUrl) {
	return new URL(sRelativeUrl, sAbsoluteBaseUrl).href;
}

function РазобратьПараметры(оАдрес) {
	return оАдрес.searchParams || new URLSearchParams(оАдрес.search.slice(1));
}

function ИзменитьЗаголовокДокумента(сЗаголовок) {
	history.replaceState(null, '');
	document.title = сЗаголовок;
}

function ПолучитьApiРасширения(фВызвать) {
	фВызвать(chrome);
}

получитьХранилищеПеченек._обОбещание = null;

function получитьХранилищеПеченек() {
	if (получитьХранилищеПеченек._обОбещание === null) {
		получитьХранилищеПеченек._обОбещание = new Promise((фВыполнить, фОтказаться) => {
			chrome.cookies.getAllCookieStores(ДобавитьОбработчикИсключений(моХранилища => {
				if (chrome.runtime.lastError) {
					фОтказаться(new Error(chrome.runtime.lastError.message));
					return;
				}
				if (моХранилища) {
					Проверить(ЭтоЧисло(г_чИдВкладки));
					for (let оХранилище of моХранилища) {
						if (оХранилище.tabIds.includes(г_чИдВкладки)) {
							м_Журнал.Вот(`[API] Хранилище печенек: ${оХранилище.id}`);
							фВыполнить(оХранилище.id);
							return;
						}
					}
				}
				м_Журнал.Ой(`[API] Хранилище печенек не найдено ИдВкладки=${г_чИдВкладки} Хранилища=${м_Журнал.O(моХранилища)}`);
				фВыполнить(null);
			}));
		});
	}
	return получитьХранилищеПеченек._обОбещание;
}

function ПолучитьПеченьку(сАдрес, сИмя) {
	return получитьХранилищеПеченек().then(сХранилище => {
		return new Promise((фВыполнить, фОтказаться) => {
			const оПараметры = {
				url: сАдрес,
				name: сИмя
			};
			if (сХранилище !== null) {
				оПараметры.storeId = сХранилище;
			}
			chrome.cookies.get(оПараметры, ДобавитьОбработчикИсключений(оПеченька => {
				if (!chrome.runtime.lastError) {
					фВыполнить(оПеченька);
				} else if (chrome.runtime.lastError.message.includes('host permission')) {
					м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0215');
				} else {
					фОтказаться(new Error(chrome.runtime.lastError.message));
				}
			}));
		});
	});
}

function ОткрытьАдресВНовойВкладке(сАдрес) {
	window.open(сАдрес);
}

function ЗаписатьТекстВЛокальныйФайл(сТекст, сТипДанных, сИмяФайла) {
	Проверить(typeof сТекст == 'string' && ЭтоНепустаяСтрока(сТипДанных) && ЭтоНепустаяСтрока(сИмяФайла));
	const узСсылка = document.createElement('a');
	узСсылка.href = URL.createObjectURL(new Blob([ сТекст ], {
		type: сТипДанных
	}));
	узСсылка.download = сИмяФайла;
	узСсылка.dispatchEvent(new MouseEvent('click'));
}

function ЭтоСобытиеДляСсылки(оСобытие) {
	return !!оСобытие.target.closest('a[href]');
}

function ЭлементВЭтойТочкеМожноПрокрутить(x, y) {
	for (let узЭлемент = document.elementFromPoint(x, y); узЭлемент; узЭлемент = узЭлемент.parentElement) {
		if (ЭтотЭлементМожноПрокрутить(узЭлемент)) {
			return true;
		}
	}
	return false;
}

function ЭтотЭлементМожноПрокрутить(узЭлемент) {
	const оСтиль = getComputedStyle(узЭлемент);
	return (оСтиль.overflowY === 'scroll' || оСтиль.overflowY === 'auto') && узЭлемент.clientHeight < узЭлемент.scrollHeight;
}

function ЭлементПолностьюПрокручен(узЭлемент) {
	return узЭлемент.scrollHeight - узЭлемент.scrollTop - узЭлемент.clientHeight < 2;
}

function ЭтотЭлементМожноВыделить(узЭлемент) {
	do {
		const оСтиль = getComputedStyle(узЭлемент);
		const сЗначение = оСтиль.getPropertyValue('user-select') || оСтиль.getPropertyValue('-webkit-user-select') || оСтиль.getPropertyValue('-moz-user-select');
		Проверить(сЗначение);
		if (сЗначение !== 'auto') {
			return сЗначение !== 'none';
		}
	} while (узЭлемент = узЭлемент.parentElement);
	return true;
}

function ПоказатьЭлемент(пЭлемент, лПоказать) {
	const узЭлемент = Узел(пЭлемент);
	if (лПоказать) {
		узЭлемент.removeAttribute('hidden');
	} else {
		узЭлемент.setAttribute('hidden', '');
	}
	return узЭлемент;
}

function ЭлементПоказан(пЭлемент) {
	return !Узел(пЭлемент).hasAttribute('hidden');
}

function ИзменитьКнопку(пКнопка, пСостояние) {
	const узКнопка = Узел(пКнопка);
	const чСостояние = Number(пСостояние);
	const сузСостояния = узКнопка.getElementsByTagName('use');
	Проверить(чСостояние >= 0 && чСостояние < сузСостояния.length);
	for (let ы = 0; ы < сузСостояния.length; ++ы) {
		if (ы === чСостояние) {
			const сПодсказка = сузСостояния[ы].getAttributeNS('http://www.w3.org/1999/xlink', 'title');
			if (сПодсказка) {
				узКнопка.title = Текст(сПодсказка);
			}
			сузСостояния[ы].removeAttribute('display');
		} else {
			сузСостояния[ы].setAttribute('display', 'none');
		}
	}
	return узКнопка;
}

const м_Отладка = (() => {
	let _сСписокВариантов = '';
	let _мСпискиСегментов = [];
	function ВставитьСсылкиДляСкачиванияФайлов(узФорма) {}
	function ПоказатьСтраницу() {
		try {
			м_ПолноэкранныйРежим.Отключить();
		} catch (_) {}
		document.body.textContent = '';
		for (let уз of document.querySelectorAll('link[rel="stylesheet"], style')) {
			уз.remove();
		}
		for (let уз of [ document.documentElement, document.body ]) {
			уз.removeAttribute('class');
			уз.removeAttribute('style');
			уз.removeAttribute('hidden');
		}
		return new Promise((фВыполнить, фОтказаться) => {
			const уз = document.createElement('iframe');
			уз.style.position = 'fixed';
			уз.style.top = '0';
			уз.style.left = '0';
			уз.style.width = '100%';
			уз.style.height = '100%';
			уз.style.zIndex = '100500';
			уз.style.border = '0';
			уз.src = 'report.html';
			уз.addEventListener('load', () => {
				м_i18n.TranslateDocument(уз.contentDocument);
				фВыполнить(уз.contentDocument);
			});
			document.body.appendChild(уз);
		});
	}
	function ПоказатьФорму(оДокумент, сИдФормы, лНастроитьФон) {
		if (лНастроитьФон) {
			оДокумент.documentElement.classList.add(сИдФормы);
		}
		for (let узПоказатьИлиСкрыть, сузПоказатьИлиСкрыть = оДокумент.forms, ы = 0; узПоказатьИлиСкрыть = сузПоказатьИлиСкрыть[ы]; ++ы) {
			if (узПоказатьИлиСкрыть.id === сИдФормы) {
				ПоказатьЭлемент(узПоказатьИлиСкрыть, true);
				const узФокус = узПоказатьИлиСкрыть.querySelector('[autofocus]');
				if (узФокус) {
					узФокус.focus();
				}
			} else {
				ПоказатьЭлемент(узПоказатьИлиСкрыть, false);
			}
		}
	}
	function ПоказатьСообщение(сСообщение) {
		ПоказатьСтраницу().then(оДокумент => {
			оДокумент.getElementById('отладка-текстсообщения').textContent = сСообщение;
			ПоказатьФорму(оДокумент, 'отладка-сообщение', true);
		});
	}
	function ПоказатьИОтправитьОтчет(оОтчет, буфОтправить) {
		const ДАННЫЕ_ПОВРЕЖДЕНЫ = 473;
		ПоказатьСтраницу().then(оДокумент => {
			let узФорма;
			if (оОтчет.ПричинаЗавершенияРаботы === 'ОТПРАВИТЬ ОТЗЫВ') {
				узФорма = оДокумент.getElementById('отладка-отзыв');
			} else {
				узФорма = оДокумент.getElementById('отладка-ошибка');
				ВставитьСсылкиДляСкачиванияФайлов(узФорма);
			}
			узФорма.elements['отладка-отчет'].value = JSON.stringify(оОтчет);
			ПоказатьФорму(оДокумент, узФорма.id, true);
			оДокумент.addEventListener('reset', оСобытие => {
				оСобытие.preventDefault();
				window.location.reload();
			});
			let оЗапрос, оДанные, чКод;
			оДокумент.addEventListener('submit', оСобытие => {
				оСобытие.preventDefault();
				if (оСобытие.target.id === 'отладка-идетотправка') {
					чКод = 200;
					оЗапрос.abort();
					return;
				}
				оДокумент.getElementById('отладка-ходотправки').value = 0;
				ПоказатьФорму(оДокумент, 'отладка-идетотправка', false);
				чКод = 0;
				if (!оЗапрос) {
					оЗапрос = new XMLHttpRequest();
					оЗапрос.upload.addEventListener('progress', оСобытие => {
						оДокумент.getElementById('отладка-ходотправки').value = оСобытие.loaded / оСобытие.total;
					});
					оЗапрос.addEventListener('load', () => {
						чКод = оЗапрос.status;
					});
					оЗапрос.addEventListener('loadend', () => {
						if (чКод >= 200 && чКод <= 299) {
							window.location.reload();
						} else if (чКод >= 400 && чКод <= 499 && чКод !== ДАННЫЕ_ПОВРЕЖДЕНЫ) {
							ПоказатьФорму(оДокумент, 'отладка-версияустарела', true);
						} else {
							ПоказатьФорму(оДокумент, 'отладка-сбойотправки', true);
						}
					});
					оДанные = new FormData(узФорма);
					if (буфОтправить) {
						оДанные.append('отладка-транспортныйпоток-0', new Blob([ буфОтправить ], {
							type: 'video/mp2t'
						}));
					}
				}
				//! This request sends a crash report or user feedback to the extension developer. The user can
				//! view the contents of оОтчет and refuse to send it. See https://coolcmd.tk/tw5/privacy.html
								оЗапрос.open('POST', 'http://r90354g8.beget.tech/tw5/report3.php');
				оЗапрос.send(оДанные);
			});
		});
	}
	function СохранитьСписокВариантов(сСписокВариантов) {
		_сСписокВариантов = ОграничитьДлинуСтроки(сСписокВариантов, 15e3);
	}
	function СохранитьСписокСегментов(сСписокСегментов) {
		if (_мСпискиСегментов.length === 3) {
			_мСпискиСегментов.shift();
		}
		_мСпискиСегментов.push(ОграничитьДлинуСтроки(сСписокСегментов, 15e3));
	}
	function СохранитьТранспортныйПоток(оСегмент) {}
	function СохранитьПреобразованныйСегмент(оСегмент) {}
	function ОбнюхатьПроцессорИОперативку(фВызвать) {
		try {
			chrome.system.cpu.getInfo(оПроцессор => {
				try {
					chrome.system.memory.getInfo(оОперативка => {
						фВызвать([ оПроцессор, оОперативка ]);
					});
				} catch (_) {
					фВызвать();
				}
			});
		} catch (_) {
			фВызвать();
		}
	}
	function ОбнюхатьВидюху() {
		try {
			const oContext = document.createElement('canvas').getContext('webgl');
			const oExtension = oContext.getExtension('WEBGL_debug_renderer_info');
			return `${oContext.getParameter(oExtension.UNMASKED_VENDOR_WEBGL)} | ${oContext.getParameter(oExtension.UNMASKED_RENDERER_WEBGL)}`;
		} catch (_) {}
	}
	function ПолучитьЯзыки() {
		try {
			return `${navigator.language} | ${navigator.languages} | ${Текст('J0103')}`;
		} catch (_) {}
	}
	function ПолучитьУстановкиДаты() {
		try {
			const оУстановки = new Intl.DateTimeFormat().resolvedOptions();
			оУстановки.timezoneOffset = new Date().getTimezoneOffset();
			return оУстановки;
		} catch (_) {}
	}
	function СоздатьПоказатьИОтправитьОтчет(сПричинаЗавершенияРаботы, буфОтправить) {
		ОбнюхатьПроцессорИОперативку(пПроцессорИОперативка => {
			ПоказатьИОтправитьОтчет({
				ПричинаЗавершенияРаботы: сПричинаЗавершенияРаботы,
				ВерсияРасширения: ВЕРСИЯ_РАСШИРЕНИЯ,
				Оборзеватель: navigator.userAgent,
				Время: new Date().toISOString(),
				Рассинхронизация: Date.now() - performance.now() - г_чТочноеВремя,
				Адрес: window.location.href,
				Инкогнито: chrome.extension.inIncognitoContext,
				Языки: ПолучитьЯзыки(),
				Фокусник: м_Фокусник.ПолучитьСостояние(),
				Пульс: м_Пульс.ПолучитьДанныеДляОтчета(),
				Настройки: м_Настройки.ПолучитьДанныеДляОтчета(),
				Статистика: м_Статистика.ПолучитьДанныеДляОтчета(),
				УстановкиДаты: ПолучитьУстановкиДаты(),
				Видюха: ОбнюхатьВидюху(),
				ПроцессорИОперативка: пПроцессорИОперативка,
				Экран: {
					top: window.screen.top,
					left: window.screen.left,
					width: window.screen.width,
					height: window.screen.height,
					availTop: window.screen.availTop,
					availLeft: window.screen.availLeft,
					availWidth: window.screen.availWidth,
					availHeight: window.screen.availHeight,
					colorDepth: window.screen.colorDepth,
					pixelDepth: window.screen.pixelDepth,
					orientation: typeof window.screen.orientation == 'object' ? window.screen.orientation.type : void 0,
					screenX: window.screenX,
					screenY: window.screenY,
					outerWidth: window.outerWidth,
					outerHeight: window.outerHeight,
					innerWidth: window.innerWidth,
					innerHeight: window.innerHeight,
					devicePixelRatio: window.devicePixelRatio
				},
				СписокВариантов: _сСписокВариантов,
				СпискиСегментов: _мСпискиСегментов,
				Журнал: м_Журнал.ПолучитьДанныеДляОтчета()
			}, буфОтправить);
		});
	}
	function ЗавершитьРаботуИПоказатьСообщение(сКодСообщения) {
		if (!г_лРаботаЗавершена) {
			console.error(сКодСообщения);
			ЗавершитьРаботу(false);
			ПоказатьСообщение(Текст(сКодСообщения));
		}
		throw void 0;
	}
	function ЗавершитьРаботуИОтправитьОтчет(сПричинаЗавершенияРаботы, буфОтправить) {
		if (!г_лРаботаЗавершена) {
			console.error(сПричинаЗавершенияРаботы);
			сПричинаЗавершенияРаботы = String(сПричинаЗавершенияРаботы);
			if (сПричинаЗавершенияРаботы.includes('out of memory')) {
				ЗавершитьРаботуИПоказатьСообщение('J0200');
			}
			try {
				м_Проигрыватель.ПоказатьСостояние('Вот', '[Отладка] Завершаю работу');
				г_моОчередь.ПоказатьСостояние();
			} catch (_) {}
			ЗавершитьРаботу(false);
			СоздатьПоказатьИОтправитьОтчет(сПричинаЗавершенияРаботы, буфОтправить);
		}
		throw void 0;
	}
	function ПойманоИсключение(пИсключение) {
		ЗавершитьРаботуИОтправитьОтчет(ПеревестиИсключениеВСтроку(пИсключение));
	}
	function ЗавершитьРаботуИОтправитьОтзыв() {
		try {
			ЗавершитьРаботуИОтправитьОтчет('ОТПРАВИТЬ ОТЗЫВ');
		} catch (_) {}
	}
	return {
		ПойманоИсключение,
		ЗавершитьРаботуИПоказатьСообщение,
		ЗавершитьРаботуИОтправитьОтчет,
		ЗавершитьРаботуИОтправитьОтзыв,
		СохранитьСписокВариантов,
		СохранитьСписокСегментов,
		СохранитьТранспортныйПоток,
		СохранитьПреобразованныйСегмент
	};
})();

class ОтменаОбещания {
	constructor() {
		this._лВыполняется = false;
		this._фОбработчик = null;
	}
	НачалоВыполнения() {
		Проверить(!this._лВыполняется);
		this._лВыполняется = true;
	}
	Отменить() {
		this._лВыполняется = false;
		if (this._фОбработчик) {
			this._фОбработчик();
			this._фОбработчик = null;
		}
	}
	ЗаменитьОбработчик(фОбработчик) {
		Проверить(this._лВыполняется);
		Проверить(typeof фОбработчик == 'function' || фОбработчик === null);
		this._фОбработчик = фОбработчик;
	}
}

ОтменаОбещания.ОБЕЩАНИЕ_ОТМЕНЕНО = new Error('ОБЕЩАНИЕ ОТМЕНЕНО');

function Ждать(ооОтменаОбещания, чМиллисекунды) {
	Проверить(Number.isFinite(чМиллисекунды));
	чМиллисекунды = Math.round(чМиллисекунды);
	Проверить(чМиллисекунды >= 0 && чМиллисекунды <= 2147483647);
	return new Promise((фВыполнить, фОтказаться) => {
		const чТаймер = setTimeout(фВыполнить, чМиллисекунды);
		if (ооОтменаОбещания) {
			ооОтменаОбещания.ЗаменитьОбработчик(() => {
				clearTimeout(чТаймер);
				фОтказаться(ОтменаОбещания.ОБЕЩАНИЕ_ОТМЕНЕНО);
			});
		}
	});
}

class Сегмент {
	constructor(чОбработка, пДанные, чДлительность, лРазрыв, чНомер) {
		Проверить(typeof чОбработка == 'number' && чОбработка >= ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ && чОбработка <= ОБРАБОТКА_ПРЕОБРАЗОВАН);
		Проверить(typeof пДанные == 'number' && чОбработка >= ОБРАБОТКА_ЗАГРУЖЕН || typeof пДанные == 'string' && чОбработка === ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ || ЭтоОбъект(пДанные) && чОбработка > ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ);
		switch (arguments.length) {
		  case 2:
			чДлительность = 0;
			лРазрыв = true;

		  case 4:
			Проверить(Number.isFinite(чДлительность) && чДлительность >= 0);
			Проверить(typeof лРазрыв == 'boolean');
			чНомер = ++Сегмент._чНомер;

		  case 5:
			Проверить(Number.isFinite(чНомер));
			break;

		  default:
			Проверить(false);
		}
		if (typeof пДанные == 'number') {
			м_Журнал.Окак(`[Очередь] Добавлен сегмент ${чНомер} Состояние=${пДанные} Обработка=${чОбработка}`);
		}
		this.чОбработка = чОбработка;
		this.пДанные = пДанные;
		this.чДлительность = чДлительность;
		this.лРазрыв = лРазрыв;
		this.чНомер = чНомер;
	}
	toString() {
		if (typeof this.пДанные == 'number') {
			return `${this.чНомер}-${this.чОбработка}-${this.пДанные}`;
		}
		if (this.лРазрыв) {
			return `${this.чНомер}-${this.чОбработка}-Р`;
		}
		return `${this.чНомер}-${this.чОбработка}`;
	}
}

Сегмент._чНомер = 0;

let г_моОчередь = [];

г_моОчередь.ПодсчитатьПреобразованныеСегменты = function() {
	let кКоличество = 0, чДлительность = 0;
	for (;кКоличество < this.length && this[кКоличество].чОбработка === ОБРАБОТКА_ПРЕОБРАЗОВАН; ++кКоличество) {
		if (typeof this[кКоличество].пДанные != 'number') {
			чДлительность += this[кКоличество].чДлительность;
		}
	}
	return {
		кКоличество,
		чДлительность
	};
};

г_моОчередь.Добавить = function(оСегмент) {
	Проверить(оСегмент instanceof Сегмент);
	for (let о of this) {
		Проверить(о.чНомер !== оСегмент.чНомер);
	}
	if (оСегмент.чОбработка !== ОБРАБОТКА_ПРЕОБРАЗОВАН) {
		this.push(оСегмент);
	} else {
		const {кКоличество, чДлительность} = this.ПодсчитатьПреобразованныеСегменты();
		if (чДлительность > ПЕРЕПОЛНЕНИЕ_БУФЕРА * 1.5) {
			м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0208');
		}
		this.splice(кКоличество, 0, оСегмент);
	}
	return оСегмент;
};

г_моОчередь.Удалить = function(пЭлемент, кКоличество = 1) {
	if (кКоличество === 0) {
		return;
	}
	Проверить(Number.isInteger(кКоличество) && кКоличество > 0);
	let чИндекс;
	if (typeof пЭлемент == 'number') {
		Проверить(Number.isInteger(пЭлемент) && пЭлемент >= 0);
		чИндекс = пЭлемент;
	} else if ((чИндекс = this.indexOf(пЭлемент)) === -1) {
		Проверить(пЭлемент instanceof Сегмент);
		return;
	}
	while (--кКоличество >= 0) {
		Проверить(чИндекс < this.length);
		switch (this[чИндекс].чОбработка) {
		  case ОБРАБОТКА_ЗАГРУЖАЕТСЯ:
			if (ЭтоОбъект(this[чИндекс].пДанные)) {
				м_Журнал.Вот(`[Очередь] Отменяю загрузку ${this[чИндекс]}`);
				this[чИндекс].пДанные.Отменить();
			}
			break;

		  case ОБРАБОТКА_ЗАГРУЖЕН:
			м_Помойка.Выбросить(this[чИндекс].пДанные);
			break;

		  case ОБРАБОТКА_ПРЕОБРАЗОВАН:
			if (ЭтоОбъект(this[чИндекс].пДанные)) {
				м_Помойка.Выбросить(this[чИндекс].пДанные.мбСегментИнициализации);
				м_Помойка.Выбросить(this[чИндекс].пДанные.мбМедиасегмент);
			}
		}
		м_Журнал.Вот(`[Очередь] Удаляю ${this[чИндекс]}`);
		this.splice(чИндекс, 1);
	}
};

г_моОчередь.Очистить = function() {
	this.Удалить(0, this.length);
};

г_моОчередь.ПоказатьСостояние = function() {
	м_Журнал.Вот(`[Очередь] ${this.join(' ')}`);
};

class ВводЧисла {
	constructor(сИмяНастройки, чШаг, чТочность, сИдУзла) {
		Проверить(чТочность >= 0 && ЭтоНепустаяСтрока(сИдУзла));
		this._сИмяНастройки = сИмяНастройки;
		this._чШаг = чШаг;
		this._чТочность = чТочность;
		this._чДобавить = 0;
		this._кИнтервал = 0;
		this._чТаймер = 0;
		м_События.ДобавитьОбработчик(`тащилка-перетаскивание-${сИдУзла}`, оПараметры => this._ОбработатьПеретаскивание(оПараметры));
		this._узЧисло = document.querySelector(`#${сИдУзла} > .вводчисла-число`);
		this.Обновить();
	}
	Обновить(чЗначение = м_Настройки.Получить(this._сИмяНастройки)) {
		this._узЧисло.value = чЗначение === АВТОНАСТРОЙКА ? Текст(м_Настройки.ПолучитьПараметрыНастройки(this._сИмяНастройки).сАвтонастройка) : м_i18n.ФорматироватьЧисло(чЗначение, this._чТочность);
	}
	_ОбработатьПеретаскивание(оПараметры) {
		const ИНТЕРВАЛ_ИЗМЕНЕНИЯ_ЗНАЧЕНИЯ = 130;
		if (оПараметры.чШаг === 1) {
			this._чДобавить = оПараметры.узНажат.classList.contains('вводчисла-минус') ? -this._чШаг : this._чШаг;
			this._кИнтервал = 0;
			this._чТаймер = setInterval(() => this._ОбработатьТаймер(), ИНТЕРВАЛ_ИЗМЕНЕНИЯ_ЗНАЧЕНИЯ);
			this._ОбработатьТаймер();
		}
		if (оПараметры.чШаг === 3) {
			clearInterval(this._чТаймер);
		}
	}
}

ВводЧисла.prototype._ОбработатьТаймер = ДобавитьОбработчикИсключений(function() {
	const ЗАДЕРЖКА_ИЗМЕНЕНИЯ_ЗНАЧЕНИЯ = 3;
	if (++this._кИнтервал == 1 || this._кИнтервал > ЗАДЕРЖКА_ИЗМЕНЕНИЯ_ЗНАЧЕНИЯ) {
		const оПараметрыНастройки = м_Настройки.ПолучитьПараметрыНастройки(this._сИмяНастройки);
		const чЗначение = м_Настройки.Получить(this._сИмяНастройки);
		let чНовоеЗначение;
		if (оПараметрыНастройки.сАвтонастройка && this._чДобавить < 0 && чЗначение === оПараметрыНастройки.чМинимальное || оПараметрыНастройки.сАвтонастройка && this._чДобавить > 0 && чЗначение === оПараметрыНастройки.чМаксимальное) {
			чНовоеЗначение = АВТОНАСТРОЙКА;
		} else if (чЗначение === АВТОНАСТРОЙКА && this._чДобавить > 0) {
			чНовоеЗначение = оПараметрыНастройки.чМинимальное;
		} else if (чЗначение === АВТОНАСТРОЙКА && this._чДобавить < 0) {
			чНовоеЗначение = оПараметрыНастройки.чМаксимальное;
		} else {
			чНовоеЗначение = чЗначение + this._чДобавить;
		}
		if (чНовоеЗначение !== АВТОНАСТРОЙКА) {
			чНовоеЗначение = Ограничить(Округлить(чНовоеЗначение, this._чТочность), оПараметрыНастройки.чМинимальное, оПараметрыНастройки.чМаксимальное);
		}
		if (чНовоеЗначение !== чЗначение) {
			м_Настройки.Изменить(this._сИмяНастройки, чНовоеЗначение);
			this.Обновить(чНовоеЗначение);
			this.ПослеИзменения(чНовоеЗначение);
		}
	}
});

ВводЧисла.prototype.ПослеИзменения = ЗАГЛУШКА;

const м_События = (() => {
	let _амОбработчики = new Map();
	function ДобавитьОбработчик(сСобытие, фОбработчик) {
		Проверить(ЭтоНепустаяСтрока(сСобытие));
		Проверить(typeof фОбработчик == 'function' || ЭтоОбъект(фОбработчик));
		let мноОбработчикиСобытия = _амОбработчики.get(сСобытие);
		if (мноОбработчикиСобытия === void 0) {
			мноОбработчикиСобытия = new Set();
			_амОбработчики.set(сСобытие, мноОбработчикиСобытия);
		}
		мноОбработчикиСобытия.add(фОбработчик);
	}
	function УдалитьОбработчик(сСобытие, фОбработчик) {
		Проверить(ЭтоНепустаяСтрока(сСобытие));
		Проверить(typeof фОбработчик == 'function' || ЭтоОбъект(фОбработчик));
		const мноОбработчикиСобытия = _амОбработчики.get(сСобытие);
		if (мноОбработчикиСобытия !== void 0) {
			мноОбработчикиСобытия.delete(фОбработчик);
			if (мноОбработчикиСобытия.size === 0) {
				_амОбработчики.delete(сСобытие);
			}
		}
	}
	function ПослатьСобытие(сСобытие, пДанные) {
		Проверить(ЭтоНепустаяСтрока(сСобытие));
		м_Журнал.Вот(`[События] Произошло событие ${сСобытие}`);
		const мноОбработчикиСобытия = _амОбработчики.get(сСобытие);
		if (мноОбработчикиСобытия !== void 0) {
			Проверить(мноОбработчикиСобытия.size !== 0);
			let оСобытие;
			for (let фОбработчик of мноОбработчикиСобытия.values()) {
				if (typeof фОбработчик == 'function') {
					фОбработчик(пДанные, сСобытие);
				} else {
					if (оСобытие === void 0) {
						оСобытие = {
							type: сСобытие,
							data: пДанные
						};
					}
					фОбработчик.handleEvent(оСобытие);
				}
			}
		}
	}
	return {
		ДобавитьОбработчик,
		УдалитьОбработчик,
		ПослатьСобытие
	};
})();

const м_Помойка = (() => {
	class ПомойкаВРабочемПотоке {
		constructor() {
			this._оПомойка = null;
			this._кбВПомойке = 0;
		}
		Выбросить(оБарахло) {
			const ВМЕСТИМОСТЬ_ПОМОЙКИ = 1e7;
			if (ЭтоОбъект(оБарахло)) {
				if (оБарахло.buffer) {
					оБарахло = оБарахло.buffer;
				}
				if (оБарахло.byteLength) {
					м_Журнал.Вот(`[Помойка] Выбрасываю ${оБарахло.byteLength} байтов`);
					if (this._оПомойка === null) {
						this._оПомойка = new Worker('/recycler.js');
					}
					this._кбВПомойке += оБарахло.byteLength;
					this._оПомойка.postMessage(оБарахло, [ оБарахло ]);
					if (this._кбВПомойке > ВМЕСТИМОСТЬ_ПОМОЙКИ) {
						this.Сжечь();
					}
				}
			}
		}
		Сжечь() {
			if (this._оПомойка !== null) {
				м_Журнал.Вот(`[Помойка] Сжигаю ${this._кбВПомойке} байтов`);
				this._оПомойка.postMessage(null);
				this._оПомойка = null;
				this._кбВПомойке = 0;
			}
		}
	}
	class ПомойкаОтсутствует {
		Выбросить(оБарахло) {}
		Сжечь() {}
	}
	м_События.ДобавитьОбработчик('управление-изменилосьсостояние', чСостояние => {
		if (чСостояние === СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ || чСостояние === СОСТОЯНИЕ_ОСТАНОВКА || чСостояние === СОСТОЯНИЕ_ПОВТОР) {
			м_Помойка.Сжечь();
		}
	});
	return ЭТО_ПЛАНШЕТ || ВЕРСИЯ_ДВИЖКА_БРАУЗЕРА >= 64 ? new ПомойкаОтсутствует() : new ПомойкаВРабочемПотоке();
})();

const м_Фокусник = (() => {
	let _оСостояние = ПолучитьНовоеСостояние();
	function ПолучитьСостояние() {
		return _оСостояние;
	}
	function ПолучитьНовоеСостояние() {
		const лПоказан = !document.hidden;
		const лАктивен = лПоказан && document.hasFocus();
		return {
			лПоказан,
			лАктивен
		};
	}
	const ОбработатьСобытие = ДобавитьОбработчикИсключений(оСобытие => {
		м_Журнал.Вот(`[Фокусник] Событие ${оСобытие.type}, старое состояние ${м_Журнал.O(_оСостояние)}`);
		setImmediate(ОбновитьСостояние);
	});
	const ОбновитьСостояние = ДобавитьОбработчикИсключений(() => {
		const оНовоеСостояние = ПолучитьНовоеСостояние();
		if (_оСостояние.лПоказан !== оНовоеСостояние.лПоказан || _оСостояние.лАктивен !== оНовоеСостояние.лАктивен) {
			м_Журнал.Окак(`[Фокусник] Новое состояние ${м_Журнал.O(оНовоеСостояние)}`);
			_оСостояние = оНовоеСостояние;
			м_События.ПослатьСобытие('фокусник-изменилосьсостояние', оНовоеСостояние);
		}
	});
	м_Журнал.Вот(`[Фокусник] Начальное состояние ${м_Журнал.O(_оСостояние)}`);
	document.addEventListener('visibilitychange', ОбработатьСобытие);
	window.addEventListener('focus', ОбработатьСобытие);
	window.addEventListener('blur', ОбработатьСобытие);
	return {
		ПолучитьСостояние
	};
})();

const м_Пульс = (() => {
	const ИНТЕРВАЛ_ПРОВЕРКИ = 970;
	const МИН_ОТКЛОНЕНИЕ_ВРЕМЕНИ = -30;
	const МАКС_ОТКЛОНЕНИЕ_ВРЕМЕНИ = 200;
	const МАКС_ОТКЛОНЕНИЕ_ДАТЫ = 40;
	let _чМаксимальноеОтклонение = 0;
	let _чТаймер = 0;
	let _чВремя;
	let _чДата;
	const ПроверитьПульс = ДобавитьОбработчикИсключений(() => {
		const чВремя = performance.now();
		const чДата = Date.now();
		const чОтклонениеВремени = чВремя - _чВремя - ИНТЕРВАЛ_ПРОВЕРКИ;
		const чОтклонениеДаты = чДата - _чДата - (чВремя - _чВремя);
		if (чОтклонениеВремени < МИН_ОТКЛОНЕНИЕ_ВРЕМЕНИ || чОтклонениеВремени > МАКС_ОТКЛОНЕНИЕ_ВРЕМЕНИ || Math.abs(чОтклонениеДаты) > МАКС_ОТКЛОНЕНИЕ_ДАТЫ) {
			м_Журнал.Ой(`[Пульс] ${м_Журнал.F0(чОтклонениеВремени)} ${м_Журнал.F0(чОтклонениеДаты)}`);
		}
		_чМаксимальноеОтклонение = Math.max(_чМаксимальноеОтклонение, чОтклонениеВремени);
		_чВремя = чВремя;
		_чДата = чДата;
		_чТаймер = setTimeout(ПроверитьПульс, ИНТЕРВАЛ_ПРОВЕРКИ);
	});
	function ОбработатьИзменениеСостояния(чСостояние) {
		if (чСостояние === СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ || чСостояние === СОСТОЯНИЕ_ОСТАНОВКА || чСостояние === СОСТОЯНИЕ_ПОВТОР) {
			if (_чТаймер !== 0) {
				м_Журнал.Вот('[Пульс] Таймер остановлен');
				clearTimeout(_чТаймер);
				_чТаймер = 0;
			}
		} else if (_чТаймер === 0) {
			м_Журнал.Вот('[Пульс] Таймер запущен');
			_чВремя = performance.now();
			_чДата = Date.now();
			_чТаймер = setTimeout(ПроверитьПульс, ИНТЕРВАЛ_ПРОВЕРКИ);
		}
	}
	function ПолучитьДанныеДляОтчета() {
		return _чМаксимальноеОтклонение;
	}
	м_События.ДобавитьОбработчик('управление-изменилосьсостояние', ОбработатьИзменениеСостояния);
	return {
		ПолучитьДанныеДляОтчета
	};
})();

const м_Статистика = (() => {
	const ЧАСТОТА_ОБНОВЛЕНИЯ_СТАТИСТИКИ = 3;
	const РАЗМЕР_ИСТОРИИ_СПИСКА = 30;
	const РАЗМЕР_ИСТОРИИ_ЗАГРУЗКИ = 30;
	const РАЗМЕР_ИСТОРИИ_БУФЕРА = 40;
	const ВЫДЕЛИТЬ_ИНТЕРВАЛ_ОБНОВЛЕНИЯ = 150;
	const ВЫДЕЛИТЬ_СЕКУНД_ДОБАВЛЕНО = .33;
	const ВЫДЕЛИТЬ_ОЖИДАНИЕ_ОТВЕТА = 1;
	const ВЫДЕЛИТЬ_ПРЕОБРАЗОВАНО = 2;
	const ВЫДЕЛИТЬ_НЕ_ПРОСМОТРЕНО_МИН = 1.5;
	const ВЫДЕЛИТЬ_НЕ_ПРОСМОТРЕНО_МАКС = .5;
	const ВЫДЕЛИТЬ_ПРОПУЩЕННЫЕ_КАДРЫ = 100;
	const ВЫДЕЛИТЬ_ЧАСТОТУ_КАДРОВ = .85;
	const ВЫДЕЛИТЬ_ПОТЕРЮ_ВИДЕО_ОТН = 1 / 5;
	const ВЫДЕЛИТЬ_ПОТЕРЮ_ВИДЕО_АБС = 300;
	const ВЫДЕЛИТЬ_ИСЧЕРПАНИЕ_БУФЕРА = 5;
	let _чТаймер = 0;
	let _nTargetDuration = 0;
	let _чМинДлительностьВидеосемпла = -Infinity;
	let _чМаксДлительностьВидеосемпла = +Infinity;
	let _оИнтервалОбновления = null;
	let _оСегментовДобавлено = null;
	let _оСекундДобавлено = null;
	let _оТолщинаСегмента = null;
	let _оТолщинаКанала = null;
	let _оОжиданиеОтвета = null;
	let _оНеПросмотрено = null;
	let _кИсходныхСегментов = 0;
	let _кЗабракованныхСегментов = 0;
	let _кбВсегоСкачано = 0;
	let _кОшибокЗагрузки = 0;
	let _кНезагруженныхСегментов = 0;
	let _кПотерьВидео = 0;
	let _кПотерьЗвука = 0;
	let _кИсчерпанийБуфера = 0;
	let _кИсчерпанийБуфераДосрочно = 0;
	let _кПереполненийБуфера = 0;
	let _чПропущеноВБуфере = 0;
	let _чВремяПоследнегоОбновления;
	let _чНеПросмотреноСек;
	let _кНеПросмотреноСек;
	function ВыделитьИнтервалОбновления(чЧисло) {
		return чЧисло >= ВЫДЕЛИТЬ_ИНТЕРВАЛ_ОБНОВЛЕНИЯ;
	}
	function ВыделитьСегментовДобавлено(чЧисло) {
		return чЧисло === 0 || чЧисло > 2;
	}
	function ВыделитьОжиданиеОтвета(чЧисло) {
		return чЧисло >= ВЫДЕЛИТЬ_ОЖИДАНИЕ_ОТВЕТА;
	}
	function ВыделитьНеПросмотрено(чЧисло) {
		return чЧисло < ВЫДЕЛИТЬ_НЕ_ПРОСМОТРЕНО_МИН || чЧисло >= м_Настройки.Получить('чМаксРазмерБуфера') + м_Настройки.Получить('чРастягиваниеБуфера') * ВЫДЕЛИТЬ_НЕ_ПРОСМОТРЕНО_МАКС;
	}
	class Анализ {
		constructor(сИдУзла, чРазмерИстории, чТочность) {
			Проверить(чРазмерИстории > 0 && чТочность >= 0);
			this._узТаблица = Узел(сИдУзла);
			this._мчИстория = new Array(чРазмерИстории);
			this._млВыделить = new Array(чРазмерИстории);
			this._чТочность = чТочность;
			this._Очистить();
		}
		Освободить() {
			this._узТаблица.textContent = '';
			this._узТаблица = null;
		}
		Очистить() {
			if (this._кЗаполнено !== 0) {
				this._Очистить();
			}
		}
		ПолучитьПоследнееЧисло(чЗаглушка) {
			return this._кЗаполнено === 0 ? чЗаглушка : this._мчИстория[this._чИндекс];
		}
		ДобавитьЧисло(чЧисло, пВыделить, пВыделитьСреднее) {
			const НАЧАЛО_ИСТОРИИ = 5;
			const лВыделить = Boolean(typeof пВыделить == 'function' ? пВыделить(чЧисло) : пВыделить);
			if (this._кЗаполнено !== 0) {
				this._узТаблица.children[НАЧАЛО_ИСТОРИИ + this._чИндекс].classList.add('статистика-подробно');
			}
			if (this._кЗаполнено !== this._мчИстория.length) {
				++this._кЗаполнено;
			}
			if (++this._чИндекс === this._мчИстория.length) {
				this._чИндекс = 0;
			}
			this._мчИстория[this._чИндекс] = чЧисло;
			this._млВыделить[this._чИндекс] = лВыделить;
			let чМинимальноеЧисло = Infinity, лВыделитьМинимальное = false;
			let чМаксимальноеЧисло = -Infinity, лВыделитьМаксимальное = false;
			let чСреднееЧисло = 0, кЧисел = 0;
			for (let ы = 0; ы < this._кЗаполнено; ++ы) {
				if (Number.isFinite(this._мчИстория[ы])) {
					if (this._мчИстория[ы] < чМинимальноеЧисло || this._мчИстория[ы] === чМинимальноеЧисло && this._млВыделить[ы]) {
						чМинимальноеЧисло = this._мчИстория[ы];
						лВыделитьМинимальное = this._млВыделить[ы];
					}
					if (this._мчИстория[ы] > чМаксимальноеЧисло || this._мчИстория[ы] === чМаксимальноеЧисло && this._млВыделить[ы]) {
						чМаксимальноеЧисло = this._мчИстория[ы];
						лВыделитьМаксимальное = this._млВыделить[ы];
					}
					чСреднееЧисло += this._мчИстория[ы];
					++кЧисел;
				}
			}
			let лВыделитьСреднее;
			if (кЧисел === 0) {
				чСреднееЧисло = NaN;
				лВыделитьСреднее = false;
			} else {
				чСреднееЧисло /= кЧисел;
				лВыделитьСреднее = Boolean(typeof пВыделитьСреднее == 'function' ? пВыделитьСреднее(чСреднееЧисло) : пВыделитьСреднее);
			}
			ОбновитьЗначение(this._узТаблица.children[0], this._ВСтроку(чМинимальноеЧисло), лВыделитьМинимальное);
			ОбновитьЗначение(this._узТаблица.children[2], this._ВСтроку(чСреднееЧисло), лВыделитьСреднее);
			ОбновитьЗначение(this._узТаблица.children[4], this._ВСтроку(чМаксимальноеЧисло), лВыделитьМаксимальное);
			ОбновитьЗначение(this._узТаблица.children[НАЧАЛО_ИСТОРИИ + this._чИндекс], this._ВСтроку(чЧисло), лВыделить).classList.remove('статистика-подробно');
			return чСреднееЧисло;
		}
		_Очистить() {
			this._кЗаполнено = 0;
			this._чИндекс = -1;
			const узФрагмент = document.createDocumentFragment();
			узФрагмент.appendChild(document.createElement('td')).className = 'анализ-минимум';
			узФрагмент.appendChild(document.createElement('td')).textContent = ' < ';
			узФрагмент.lastChild.className = 'статистика-символ';
			узФрагмент.appendChild(document.createElement('td')).className = 'анализ-среднее';
			узФрагмент.appendChild(document.createElement('td')).textContent = ' < ';
			узФрагмент.lastChild.className = 'статистика-символ';
			узФрагмент.appendChild(document.createElement('td')).className = 'анализ-максимум';
			for (let ы = this._мчИстория.length; --ы >= 0; ) {
				узФрагмент.appendChild(document.createElement('td')).className = 'анализ-история статистика-подробно';
			}
			this._узТаблица.textContent = '';
			this._узТаблица.appendChild(узФрагмент);
		}
		_ВСтроку(чЧисло) {
			return Number.isFinite(чЧисло) ? чЧисло.toFixed(this._чТочность) : ' ';
		}
	}
	function ОбновитьЗначение(пЭлемент, пЗначение, лВыделить) {
		const узЭлемент = Узел(пЭлемент);
		узЭлемент.classList.toggle('статистика-выделить', лВыделить);
		узЭлемент.textContent = пЗначение;
		return узЭлемент;
	}
	function ПолучитьНазваниеПрофиляH264(nProfileIndication, nConstraintSetFlag) {
		switch (nProfileIndication) {
		  case 66:
			return (nConstraintSetFlag & 64) == 0 ? 'Baseline' : 'Constrained Baseline';

		  case 77:
			return 'Main';

		  case 88:
			return 'Extended';

		  case 100:
			switch (nConstraintSetFlag & 12) {
			  case 8:
				return 'Progressive High';

			  case 12:
				return 'Constrained High';
			}
			return 'High';

		  case 110:
			return (nConstraintSetFlag & 16) == 0 ? 'High 10' : 'High 10 Intra';

		  case 122:
			return (nConstraintSetFlag & 16) == 0 ? 'High 4:2:2' : 'High 4:2:2 Intra';

		  case 244:
			return (nConstraintSetFlag & 16) == 0 ? 'High 4:4:4 Predictive' : 'High 4:4:4 Intra';

		  case 44:
			return 'CAVLC 4:4:4 Intra';
		}
		м_Журнал.Ой(`[Статистика] Неизвестный профиль H.264 ProfileIndication=${nProfileIndication} ConstraintSetFlag=${nConstraintSetFlag}`);
		return `P${nProfileIndication}C${nConstraintSetFlag}`;
	}
	function ОбновитьСтатистику() {
		document.getElementById('статистика-длительностьпросмотра').textContent = м_i18n.ПеревестиСекундыВСтроку(performance.now() / 1e3, true);
		const {droppedVideoFrames, totalVideoFrames} = м_Проигрыватель.ПолучитьКоличествоПропущенныхКадров();
		ОбновитьЗначение('статистика-пропущено', droppedVideoFrames, droppedVideoFrames >= ВЫДЕЛИТЬ_ПРОПУЩЕННЫЕ_КАДРЫ).nextElementSibling.nextElementSibling.textContent = totalVideoFrames;
		let чЖдетЗагрузки = 0, чЗагружается = 0, кПреобразовано = 0, чПреобразовано = 0;
		for (let оСегмент of г_моОчередь) {
			switch (оСегмент.чОбработка) {
			  case ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ:
				чЖдетЗагрузки += оСегмент.чДлительность;
				break;

			  case ОБРАБОТКА_ЗАГРУЖАЕТСЯ:
			  case ОБРАБОТКА_ЗАГРУЖЕН:
				чЗагружается += оСегмент.чДлительность;
				break;

			  case ОБРАБОТКА_ПРЕОБРАЗОВАН:
				кПреобразовано += 1;
				чПреобразовано += оСегмент.чДлительность;
				break;

			  default:
				Проверить(false);
			}
		}
		const {чПросмотрено, чНеПросмотрено} = м_Проигрыватель.ПолучитьЗаполненностьБуфера();
		let уз = ОбновитьЗначение('статистика-очередь', чЖдетЗагрузки.toFixed(1), чЖдетЗагрузки > м_Настройки.Получить('чМаксРазмерБуфера'));
		уз = уз.nextElementSibling.nextElementSibling;
		уз.textContent = чЗагружается.toFixed(1);
		уз = уз.nextElementSibling;
		ОбновитьЗначение(уз, чПреобразовано.toFixed(1), кПреобразовано >= ВЫДЕЛИТЬ_ПРЕОБРАЗОВАНО);
		уз = уз.nextElementSibling;
		ОбновитьЗначение(уз, чНеПросмотрено.toFixed(1), ВыделитьНеПросмотрено(чНеПросмотрено));
		уз = уз.nextElementSibling.nextElementSibling;
		уз.textContent = чПросмотрено.toFixed(1);
		if ([ СОСТОЯНИЕ_ЗАГРУЗКА, СОСТОЯНИЕ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ, СОСТОЯНИЕ_ВОСПРОИЗВЕДЕНИЕ ].includes(м_Управление.ПолучитьСостояние())) {
			_чНеПросмотреноСек = Math.min(_чНеПросмотреноСек, чНеПросмотрено);
			_кНеПросмотреноСек = (_кНеПросмотреноСек + 1) % ЧАСТОТА_ОБНОВЛЕНИЯ_СТАТИСТИКИ;
			if (_кНеПросмотреноСек === 0) {
				_оНеПросмотрено.ДобавитьЧисло(_чНеПросмотреноСек, ВыделитьНеПросмотрено, ВыделитьНеПросмотрено);
				_чНеПросмотреноСек = Infinity;
			}
		}
	}
	function ОкноПоказано() {
		return _чТаймер !== 0;
	}
	function ОткрытьОкно() {
		if (ОкноПоказано()) {
			return;
		}
		_оИнтервалОбновления = new Анализ('статистика-интервалобновления', РАЗМЕР_ИСТОРИИ_СПИСКА, 0);
		_оСегментовДобавлено = new Анализ('статистика-сегментовдобавлено', РАЗМЕР_ИСТОРИИ_СПИСКА, 0);
		_оСекундДобавлено = new Анализ('статистика-секунддобавлено', РАЗМЕР_ИСТОРИИ_СПИСКА, 1);
		_оТолщинаСегмента = new Анализ('статистика-толщинасегмента', РАЗМЕР_ИСТОРИИ_ЗАГРУЗКИ, 1);
		_оТолщинаКанала = new Анализ('статистика-толщинаканала', РАЗМЕР_ИСТОРИИ_ЗАГРУЗКИ, 1);
		_оОжиданиеОтвета = new Анализ('статистика-ожиданиеответа', РАЗМЕР_ИСТОРИИ_ЗАГРУЗКИ, 1);
		_оНеПросмотрено = new Анализ('статистика-непросмотрено', РАЗМЕР_ИСТОРИИ_БУФЕРА, 1);
		_чВремяПоследнегоОбновления = NaN;
		_чНеПросмотреноСек = Infinity;
		_кНеПросмотреноСек = 0;
		Узел('статистика-исходных').textContent = _кИсходныхСегментов;
		ОбновитьЗначение('статистика-забракованных', _кЗабракованныхСегментов, _кЗабракованныхСегментов !== 0);
		ОбновитьЗначение('статистика-незагружено', _кОшибокЗагрузки, _кОшибокЗагрузки !== 0).nextElementSibling.nextElementSibling.textContent = _кНезагруженныхСегментов;
		ОбновитьЗначение('статистика-потерьвидео', _кПотерьВидео, _кПотерьВидео !== 0);
		ОбновитьЗначение('статистика-потерьзвука', _кПотерьЗвука, _кПотерьЗвука !== 0);
		ОбновитьЗначение('статистика-исчерпано', _кИсчерпанийБуфера, _кИсчерпанийБуфера >= ВЫДЕЛИТЬ_ИСЧЕРПАНИЕ_БУФЕРА);
		ОбновитьЗначение('статистика-переполнено', _кПереполненийБуфера, _кПереполненийБуфера !== 0).nextElementSibling.nextElementSibling.textContent = _чПропущеноВБуфере.toFixed(1);
		_чТаймер = setInterval(ДобавитьОбработчикИсключений(ОбновитьСтатистику), 1e3 / ЧАСТОТА_ОБНОВЛЕНИЯ_СТАТИСТИКИ);
		ОбновитьСтатистику();
		м_События.ДобавитьОбработчик('тащилка-перетаскивание-статистика', ОбработатьПеретаскиваниеОкна);
		ПоказатьЭлемент('статистика', true);
		м_Настройки.Изменить('лПоказатьСтатистику', true);
	}
	function ЗакрытьОкно() {
		if (!ОкноПоказано()) {
			return;
		}
		ПоказатьЭлемент('статистика', false);
		_оИнтервалОбновления.Освободить();
		_оИнтервалОбновления = null;
		_оСегментовДобавлено.Освободить();
		_оСегментовДобавлено = null;
		_оСекундДобавлено.Освободить();
		_оСекундДобавлено = null;
		_оТолщинаСегмента.Освободить();
		_оТолщинаСегмента = null;
		_оТолщинаКанала.Освободить();
		_оТолщинаКанала = null;
		_оОжиданиеОтвета.Освободить();
		_оОжиданиеОтвета = null;
		_оНеПросмотрено.Освободить();
		_оНеПросмотрено = null;
		for (let уз of document.querySelectorAll('[data-очистить]')) {
			уз.textContent = '';
		}
		clearInterval(_чТаймер);
		_чТаймер = 0;
		м_Настройки.Изменить('лПоказатьСтатистику', false);
	}
	function ОбработатьПеретаскиваниеОкна(оПараметры) {
		switch (оПараметры.чШаг) {
		  case 1:
			const оСтиль = getComputedStyle(оПараметры.узТащится);
			оПараметры._чНачальнаяX = Number.parseInt(оСтиль.left, 10);
			оПараметры._чНачальнаяY = Number.parseInt(оСтиль.top, 10);
			break;

		  case 2:
			оПараметры.узТащится.style.setProperty('--x', `${оПараметры._чНачальнаяX + оПараметры.чИзменениеX}px`);
			оПараметры.узТащится.style.setProperty('--y', `${оПараметры._чНачальнаяY + оПараметры.чИзменениеY}px`);
			break;

		  case 3:
			break;

		  default:
			Проверить(false);
		}
	}
	function Запустить() {
		if (м_Настройки.Получить('лПоказатьСтатистику')) {
			ОткрытьОкно();
		}
	}
	function ОчиститьИсторию() {
		if (_оИнтервалОбновления !== null) {
			_оИнтервалОбновления.Очистить();
			_оСегментовДобавлено.Очистить();
			_оСекундДобавлено.Очистить();
			_оТолщинаСегмента.Очистить();
			_оТолщинаКанала.Очистить();
			_оОжиданиеОтвета.Очистить();
			_оНеПросмотрено.Очистить();
			_чВремяПоследнегоОбновления = NaN;
			_чНеПросмотреноСек = Infinity;
			_кНеПросмотреноСек = 0;
		}
		ОбновитьЗначение('статистика-незагружено', _кОшибокЗагрузки = 0, false).nextElementSibling.nextElementSibling.textContent = _кНезагруженныхСегментов = 0;
		ОбновитьЗначение('статистика-исчерпано', _кИсчерпанийБуфера = 0, false);
		ОбновитьЗначение('статистика-переполнено', _кПереполненийБуфера = 0, false).nextElementSibling.nextElementSibling.textContent = (_чПропущеноВБуфере = 0).toFixed(1);
	}
	function ПолучитьTargetDuration() {
		return _nTargetDuration;
	}
	function ПолучитьДлительностьКадраВСекундах() {
		return {
			чМинимальная: Math.max(17, _чМинДлительностьВидеосемпла) / 1e3,
			чМаксимальная: Math.min(1e3 / 25, _чМаксДлительностьВидеосемпла) / 1e3
		};
	}
	function ПолучитьДанныеДляОтчета() {
		return {
			ПараметрыВидео: Узел('статистика-разрешениевидео').textContent + ' ' + Узел('статистика-сжатиевидео').textContent,
			ПараметрыЗвука: Узел('статистика-сжатиезвука').textContent,
			ЗабракованныхСегментов: _кЗабракованныхСегментов,
			ОшибокЗагрузки: _кОшибокЗагрузки,
			НезагруженныхСегментов: _кНезагруженныхСегментов,
			ПотерьВидео: _кПотерьВидео,
			ПотерьЗвука: _кПотерьЗвука,
			ИсчерпанийБуфера: _кИсчерпанийБуфера,
			ИсчерпанийБуфераДосрочно: _кИсчерпанийБуфераДосрочно,
			ПереполненийБуфера: _кПереполненийБуфера,
			ПропущеноВБуфере: _чПропущеноВБуфере
		};
	}
	function РазобранСписокСегментов(оСписок) {
		_nTargetDuration = оСписок.nTargetDuration;
		if (ОкноПоказано()) {
			if (оСписок.моСегменты.length !== 0) {
				Узел('статистика-сервер').textContent = new URL(оСписок.моСегменты[0].сАдрес).host;
			}
			let кОбычныхСегментов = 0, чДлительностьСписка = 0, кБыстрыхСегментов = 0;
			for (let оСегмент of оСписок.моСегменты) {
				if (оСегмент.чДлительность !== -1) {
					кОбычныхСегментов += 1;
					чДлительностьСписка += оСегмент.чДлительность;
				} else {
					кБыстрыхСегментов += 1;
				}
			}
			Узел('статистика-список').textContent = `${кОбычныхСегментов} × ${(чДлительностьСписка / кОбычныхСегментов).toFixed(1)} = ${чДлительностьСписка.toFixed(1)} + ${кБыстрыхСегментов}`;
			ОбновитьЗначение('статистика-targetduration', оСписок.nTargetDuration, оСписок.nTargetDuration !== _nTargetDuration);
		}
	}
	function ДобавленыСегментыВОчередь(кСегментовДобавлено, кСекундДобавлено) {
		if (ОкноПоказано()) {
			const чВремя = performance.now();
			_оИнтервалОбновления.ДобавитьЧисло((чВремя - _чВремяПоследнегоОбновления) / _nTargetDuration / 10, ВыделитьИнтервалОбновления, ВыделитьИнтервалОбновления);
			_чВремяПоследнегоОбновления = чВремя;
			const чВСреднемСегментовДобавлено = _оСегментовДобавлено.ДобавитьЧисло(кСегментовДобавлено, ВыделитьСегментовДобавлено, ВыделитьСегментовДобавлено);
			_оСекундДобавлено.ДобавитьЧисло(кСекундДобавлено, кСекундДобавлено / кСегментовДобавлено < _nTargetDuration * ВЫДЕЛИТЬ_СЕКУНД_ДОБАВЛЕНО, чЧисло => чЧисло / чВСреднемСегментовДобавлено < _nTargetDuration * ВЫДЕЛИТЬ_СЕКУНД_ДОБАВЛЕНО);
		}
	}
	function ПолученИсходныйСегмент() {
		++_кИсходныхСегментов;
		if (ОкноПоказано()) {
			document.getElementById('статистика-исходных').textContent = _кИсходныхСегментов;
		}
	}
	function ЗабракованСегмент() {
		++_кЗабракованныхСегментов;
		if (ОкноПоказано()) {
			ОбновитьЗначение('статистика-забракованных', _кЗабракованныхСегментов, true);
		}
	}
	function СкачаноНечто(кбСкачано) {
		if (Number.isFinite(кбСкачано)) {
			_кбВсегоСкачано += кбСкачано;
			if (ОкноПоказано()) {
				document.getElementById('статистика-скачано').textContent = (_кбВсегоСкачано / 1024 / 1024).toFixed();
			}
		}
	}
	function ЗагруженСегмент(чРазмерСегмента, чДлительностьСегмента, чДлительностьЗагрузки, чОжиданиеОтвета) {
		if (ОкноПоказано()) {
			const чСредняяТолщинаСегмента = _оТолщинаСегмента.ДобавитьЧисло(чРазмерСегмента * 8 / 1e6 / чДлительностьСегмента);
			чДлительностьЗагрузки /= 1e3;
			_оТолщинаКанала.ДобавитьЧисло(чРазмерСегмента * 8 / 1e6 / чДлительностьЗагрузки, чДлительностьЗагрузки > чДлительностьСегмента, чЧисло => чЧисло < чСредняяТолщинаСегмента);
			_оОжиданиеОтвета.ДобавитьЧисло(чОжиданиеОтвета / 1e3, ВыделитьОжиданиеОтвета, ВыделитьОжиданиеОтвета);
		}
	}
	function НеЗагруженыСегменты(кНезагруженныхСегментов) {
		Проверить(кНезагруженныхСегментов > 0);
		_кОшибокЗагрузки += 1;
		_кНезагруженныхСегментов += кНезагруженныхСегментов;
		if (ОкноПоказано()) {
			ОбновитьЗначение('статистика-незагружено', _кОшибокЗагрузки, true).nextElementSibling.nextElementSibling.textContent = _кНезагруженныхСегментов;
		}
	}
	function ПолученПреобразованныйСегмент(оСегмент) {
		const лОкноПоказано = ОкноПоказано();
		const оДанные = оСегмент.пДанные;
		if (оДанные.hasOwnProperty('мбМедиасегмент')) {
			if (оСегмент.лРазрыв) {
				if (оДанные.лЕстьВидео) {
					let сСжатиеВидео = 'H.264' + ` ${ПолучитьНазваниеПрофиляH264(оДанные.nProfileIndication, оДанные.nConstraintSetFlag)}` + ` L${(оДанные.nLevelIndication / 10).toFixed(1)}` + ` RF${оДанные.nMaxNumberReferenceFrames}`;
					if (оДанные.чДиапазон !== -1) {
						сСжатиеВидео += оДанные.чДиапазон === 0 ? ' 16-235' : ' 0-255';
					}
					if (оДанные.лЧересстрочное) {
						сСжатиеВидео += ' чересстрочное';
					}
					if (оДанные.чЧастотаКадров !== 0) {
						сСжатиеВидео += ` ${оДанные.чЧастотаКадров < 0 ? '≈' : ''}${Math.abs(оДанные.чЧастотаКадров).toFixed(2)} ${Текст('J0140')}`;
					}
					Узел('статистика-сжатиевидео').textContent = сСжатиеВидео;
					Узел('статистика-разрешениевидео').textContent = `${оДанные.чШиринаКартинки}x${оДанные.чВысотаКартинки}`;
				} else {
					Узел('статистика-сжатиевидео').textContent = '—';
					Узел('статистика-разрешениевидео').textContent = '—';
				}
				Узел('статистика-частотакадров').textContent = '';
				if (оДанные.лЕстьЗвук) {
					Узел('статистика-сжатиезвука').textContent = [ 'AAC-Main', 'AAC-LC', 'AAC-SSR', 'AAC-LTP' ][оДанные.nAudioObjectType - 1] + ` ${оДанные.чЧастотаДискретизации} ${Текст('J0141')}` + ` ${оДанные.чКоличествоКаналов} ${Текст('J0142')}`;
				} else {
					Узел('статистика-сжатиезвука').textContent = '—';
				}
				Узел('статистика-битрейтзвука').textContent = '';
			}
			if (Number.isFinite(оДанные.чСредняяДлительностьВидеоСемпла)) {
				_чМинДлительностьВидеосемпла = оДанные.чМинДлительностьВидеоСемпла;
				_чМаксДлительностьВидеосемпла = оДанные.чМаксДлительностьВидеоСемпла;
				Проверить(_чМинДлительностьВидеосемпла <= _чМаксДлительностьВидеосемпла);
				const чОтносительноеОтклонение = оДанные.чСредняяДлительностьВидеоСемпла / оДанные.чМаксДлительностьВидеоСемпла;
				const чАбсолютноеОтклонение = оДанные.чМаксДлительностьВидеоСемпла - оДанные.чСредняяДлительностьВидеоСемпла;
				if (чОтносительноеОтклонение <= ВЫДЕЛИТЬ_ПОТЕРЮ_ВИДЕО_ОТН && чАбсолютноеОтклонение >= ВЫДЕЛИТЬ_ПОТЕРЮ_ВИДЕО_АБС) {
					м_Журнал.Ой(`[Статистика] Превышено отклонение длительности кадра в сегменте ${оСегмент.чНомер}` + ` СредняяДлительностьКадра=${м_Журнал.F0(оДанные.чСредняяДлительностьВидеоСемпла)}мс` + ` АбсолютноеОтклонение=${м_Журнал.F0(чАбсолютноеОтклонение)}мс` + ` ОтносительноеОтклонение=${м_Журнал.F2(чОтносительноеОтклонение)}`);
					оДанные.лПотериВидео = true;
				}
				if (лОкноПоказано) {
					let сОтклонение = `@${(1e3 / оДанные.чСредняяДлительностьВидеоСемпла).toFixed(1)}`;
					if (оДанные.чМаксДлительностьВидеоСемпла - оДанные.чМинДлительностьВидеоСемпла > 2) {
						сОтклонение += ` −${(100 - оДанные.чСредняяДлительностьВидеоСемпла / оДанные.чМаксДлительностьВидеоСемпла * 100).toFixed()}%` + ` +${(оДанные.чСредняяДлительностьВидеоСемпла / оДанные.чМинДлительностьВидеоСемпла * 100 - 100).toFixed()}%`;
					}
					ОбновитьЗначение('статистика-частотакадров', сОтклонение, чОтносительноеОтклонение <= ВЫДЕЛИТЬ_ЧАСТОТУ_КАДРОВ);
				}
			}
			if (Number.isFinite(оДанные.чБитрейтЗвука) && лОкноПоказано) {
				Узел('статистика-битрейтзвука').textContent = `${оДанные.чБитрейтЗвука.toFixed()} ${Текст('J0143')}`;
			}
		}
		if (ЭтоЧисло(оДанные.чПреобразованЗа) && лОкноПоказано) {
			Узел('статистика-преобразованза').textContent = оДанные.чПреобразованЗа.toFixed();
		}
		if (оДанные.лЗабраковано) {
			ЗабракованСегмент();
		}
		if (оДанные.лПотериВидео) {
			++_кПотерьВидео;
			if (лОкноПоказано) {
				ОбновитьЗначение('статистика-потерьвидео', _кПотерьВидео, true);
			}
		}
		if (оДанные.лПотериЗвука) {
			++_кПотерьЗвука;
			if (лОкноПоказано) {
				ОбновитьЗначение('статистика-потерьзвука', _кПотерьЗвука, true);
			}
		}
	}
	function ИсчерпанБуферПроигрывателя(лДосрочно) {
		++_кИсчерпанийБуфера;
		if (лДосрочно) {
			++_кИсчерпанийБуфераДосрочно;
		}
		if (ОкноПоказано()) {
			ОбновитьЗначение('статистика-исчерпано', _кИсчерпанийБуфера, _кИсчерпанийБуфера >= ВЫДЕЛИТЬ_ИСЧЕРПАНИЕ_БУФЕРА);
		}
	}
	м_События.ДобавитьОбработчик('проигрыватель-переполненбуфер', чПропущено => {
		++_кПереполненийБуфера;
		_чПропущеноВБуфере += чПропущено;
		if (ОкноПоказано()) {
			ОбновитьЗначение('статистика-переполнено', _кПереполненийБуфера, true).nextElementSibling.nextElementSibling.textContent = _чПропущеноВБуфере.toFixed(1);
		}
	});
	м_События.ДобавитьОбработчик('управление-изменилосьсостояние', чСостояние => {
		if (чСостояние === СОСТОЯНИЕ_ЗАПУСК) {
			ОчиститьИсторию();
		}
	});
	м_События.ДобавитьОбработчик('список-выбранварианттрансляции', ([моСписокВариантов]) => {
		if (моСписокВариантов) {
			ОчиститьИсторию();
		}
	});
	return {
		Запустить,
		ОкноПоказано,
		ОткрытьОкно,
		ЗакрытьОкно,
		ОбновитьЗначение,
		ОчиститьИсторию,
		ПолучитьTargetDuration,
		ПолучитьДлительностьКадраВСекундах,
		ПолучитьДанныеДляОтчета,
		РазобранСписокСегментов,
		ДобавленыСегментыВОчередь,
		ПолученИсходныйСегмент,
		ЗабракованСегмент,
		СкачаноНечто,
		ЗагруженСегмент,
		НеЗагруженыСегменты,
		ПолученПреобразованныйСегмент,
		ИсчерпанБуферПроигрывателя
	};
})();

const м_Окна = (() => {
	function ПолучитьОткрытое() {
		return document.body.getAttribute('data-окно-открыто') || '';
	}
	function ОткрытьОкно(сИдОкна) {
		const узОкно = Узел(сИдОкна);
		Проверить(узОкно.classList.contains('окно'));
		узОкно.classList.add('окнооткрыто');
		document.body.setAttribute('data-окно-открыто', сИдОкна);
		м_События.ПослатьСобытие(`окна-открыто-${сИдОкна}`);
	}
	function ЗакрытьОкно(сИдОкна) {
		const узОкно = Узел(сИдОкна);
		Проверить(узОкно.classList.contains('окно'));
		узОкно.classList.remove('окнооткрыто');
		document.body.removeAttribute('data-окно-открыто');
		м_События.ПослатьСобытие('окна-закрыто', сИдОкна);
	}
	function Открыть(сИдОкна) {
		Проверить(ЭтоНепустаяСтрока(сИдОкна));
		const сИдОткрытогоОкна = ПолучитьОткрытое();
		if (сИдОкна === сИдОткрытогоОкна) {
			return false;
		}
		if (сИдОткрытогоОкна) {
			ЗакрытьОкно(сИдОткрытогоОкна);
		}
		ОткрытьОкно(сИдОкна);
		return true;
	}
	function Закрыть(сИдОкна) {
		Проверить(typeof сИдОкна == 'string');
		if (!сИдОкна || сИдОкна !== ПолучитьОткрытое()) {
			return false;
		}
		ЗакрытьОкно(сИдОкна);
		return true;
	}
	function Переключить(сИдОкна) {
		Открыть(сИдОкна) || ЗакрытьОкно(сИдОкна);
	}
	function ОбработатьЛевыйЩелчок({target: узЩелчок}) {
		if (Узел('проигрыватель').contains(узЩелчок)) {
			const сИдОкна = узЩелчок.getAttribute('data-окно-переключить');
			if (сИдОкна) {
				Переключить(сИдОкна);
			} else {
				const сИдОткрытогоОкна = ПолучитьОткрытое();
				if (сИдОткрытогоОкна && !Узел(сИдОткрытогоОкна).contains(узЩелчок)) {
					ЗакрытьОкно(сИдОткрытогоОкна);
				}
			}
		}
	}
	м_События.ДобавитьОбработчик('управление-левыйщелчок', ОбработатьЛевыйЩелчок);
	return {
		ПолучитьОткрытое,
		Открыть,
		Закрыть,
		Переключить
	};
})();

const м_Меню = (() => {
	function ПолучитьОткрытоеМеню() {
		return document.getElementsByClassName('менюоткрыто')[0];
	}
	function ОткрытьМеню(узМеню) {
		Проверить(узМеню.id);
		Проверить(узМеню.classList.contains('меню'));
		document.body.classList.remove('меню-безанимации');
		document.body.classList.add('меню-открыто');
		узМеню.classList.add('менюоткрыто');
		м_События.ПослатьСобытие(`меню-открыто-${узМеню.id}`);
	}
	function ЗакрытьМеню(узМеню, лБезАнимации) {
		Проверить(узМеню.classList.contains('меню'));
		document.body.classList.toggle('меню-безанимации', лБезАнимации);
		document.body.classList.remove('меню-открыто');
		узМеню.classList.remove('менюоткрыто');
	}
	function Закрыть(лБезАнимации) {
		const узОткрытоеМеню = ПолучитьОткрытоеМеню();
		if (узОткрытоеМеню) {
			ЗакрытьМеню(узОткрытоеМеню, лБезАнимации);
		}
	}
	function ПереместитьМенюКТочке(узМеню, x, y) {
		const оСтиль = getComputedStyle(узМеню);
		const чШиринаМеню = Number.parseFloat(оСтиль.width, 10);
		const чВысотаМеню = Number.parseFloat(оСтиль.height, 10);
		const чШиринаОкна = window.innerWidth;
		const чВысотаОкна = window.innerHeight;
		let чМенюX;
		if (x + чШиринаМеню <= чШиринаОкна) {
			чМенюX = x + 1.999;
		} else if (чШиринаМеню <= x) {
			чМенюX = x - чШиринаМеню - .5;
		} else {
			чМенюX = Math.max(чШиринаОкна - чШиринаМеню, 0);
		}
		let чМенюY;
		if (y + чВысотаМеню <= чВысотаОкна) {
			чМенюY = y + 1.999;
		} else {
			чМенюY = Math.max(чВысотаОкна - чВысотаМеню, 0);
		}
		узМеню.style.left = `${чМенюX}px`;
		узМеню.style.top = `${чМенюY}px`;
	}
	function ПереместитьМенюКЭлементу(узМеню, узЭлемент) {
		const {left: x, top: y, right: x2, bottom: y2} = узЭлемент.getBoundingClientRect();
		const оСтиль = getComputedStyle(узМеню);
		const чШиринаМеню = Number.parseFloat(оСтиль.width, 10);
		const чВысотаМеню = Number.parseFloat(оСтиль.height, 10);
		const чШиринаОкна = window.innerWidth;
		const чВысотаОкна = window.innerHeight;
		let чМенюX;
		if (x + чШиринаМеню <= чШиринаОкна) {
			чМенюX = x;
		} else if (чШиринаМеню <= x2) {
			чМенюX = x2 - чШиринаМеню;
		} else {
			чМенюX = Math.max(чШиринаОкна - чШиринаМеню, 0);
		}
		let чМенюY;
		if (y2 + чВысотаМеню <= чВысотаОкна) {
			чМенюY = y2;
		} else if (чВысотаМеню <= y) {
			чМенюY = y - чВысотаМеню;
		} else {
			чМенюY = Math.max(чВысотаОкна - чВысотаМеню, 0);
		}
		узМеню.style.left = `${чМенюX}px`;
		узМеню.style.top = `${чМенюY}px`;
		узМеню.style.minWidth = `${x2 - x}px`;
	}
	const ОбработатьКонтекстноеМеню = ДобавитьОбработчикИсключений(оСобытие => {
		const узОткрытоеМеню = ПолучитьОткрытоеМеню();
		if (узОткрытоеМеню && узОткрытоеМеню.contains(оСобытие.target)) {
			if (!ЭтоСобытиеДляСсылки(оСобытие)) {
				оСобытие.preventDefault();
			}
			return;
		}
		let узОткрытьМеню = null;
		if (!ЭтотЭлементМожноВыделить(оСобытие.target)) {
			оСобытие.preventDefault();
			узОткрытьМеню = Узел('главноеменю');
		}
		if (узОткрытоеМеню && узОткрытоеМеню !== узОткрытьМеню) {
			ЗакрытьМеню(узОткрытоеМеню, false);
		}
		if (узОткрытьМеню) {
			ПереместитьМенюКТочке(узОткрытьМеню, оСобытие.clientX, оСобытие.clientY);
			if (узОткрытьМеню !== узОткрытоеМеню) {
				ОткрытьМеню(узОткрытьМеню);
			}
		}
	});
	function ОбработатьЛевыйЩелчок({target: узЩелчок}) {
		if (узЩелчок.classList.contains('меню-пункт')) {
			ЗакрытьМеню(узЩелчок.parentNode, true);
			return;
		}
		const узОткрытоеМеню = ПолучитьОткрытоеМеню();
		if (узОткрытоеМеню && !узОткрытоеМеню.contains(узЩелчок)) {
			ЗакрытьМеню(узОткрытоеМеню, false);
		}
		const сОткрытьМеню = узЩелчок.getAttribute('data-меню-переключить');
		if (сОткрытьМеню) {
			const узОткрытьМеню = Узел(сОткрытьМеню);
			if (узОткрытьМеню !== узОткрытоеМеню) {
				ПереместитьМенюКЭлементу(узОткрытьМеню, узЩелчок);
				ОткрытьМеню(узОткрытьМеню);
			}
		}
	}
	function ОбработатьИзменениеПолноэкранногоРежима(лВключен) {
		Закрыть(true);
	}
	document.documentElement.addEventListener('contextmenu', ОбработатьКонтекстноеМеню);
	м_События.ДобавитьОбработчик('управление-левыйщелчок', ОбработатьЛевыйЩелчок);
	м_События.ДобавитьОбработчик('полноэкранныйрежим-изменен', ОбработатьИзменениеПолноэкранногоРежима);
	return {
		Закрыть
	};
})();

const м_ПолноэкранныйРежим = (() => {
	let _sRequestFullscreen = 'requestFullscreen';
	let _sExitFullscreen = 'exitFullscreen';
	let _sFullscreenElement = 'fullscreenElement';
	let _sFullscreenchange = 'fullscreenchange';
	if (!document.requestFullscreen) {
		_sRequestFullscreen = 'webkitRequestFullscreen';
		_sExitFullscreen = 'webkitExitFullscreen';
		_sFullscreenElement = 'webkitFullscreenElement';
		_sFullscreenchange = 'webkitfullscreenchange';
	}
	const ОбработатьИзменениеРежима = ДобавитьОбработчикИсключений(() => {
		const лВключен = Обновить();
		м_События.ПослатьСобытие('полноэкранныйрежим-изменен', лВключен);
	});
	const ОбработатьДвойнойЩелчок = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.button === ЛЕВАЯ_КНОПКА && оСобытие.target.id === 'проигрыватель') {
			оСобытие.preventDefault();
			Переключить();
		}
	});
	function ПолучитьЭлемент() {
		return Узел('проигрывательичат');
	}
	function Включен() {
		return !!document[_sFullscreenElement];
	}
	function Обновить() {
		const лВключен = Включен();
		м_Журнал.Окак(`[ПолноэкранныйРежим] Текущее состояние: ${лВключен}`);
		ИзменитьКнопку('переключитьполноэкранный', лВключен);
		return лВключен;
	}
	function Включить() {
		if (Включен()) {
			return false;
		}
		м_Журнал.Вот('[ПолноэкранныйРежим] Вход в полноэкранный режим');
		м_Автоскрытие.Скрыть(true);
		ПолучитьЭлемент()[_sRequestFullscreen]();
		return true;
	}
	function Отключить() {
		if (!Включен()) {
			return false;
		}
		м_Журнал.Вот('[ПолноэкранныйРежим] Выход из полноэкранного режима');
		м_Автоскрытие.Скрыть(true);
		document[_sExitFullscreen]();
		return true;
	}
	function Переключить() {
		Включить() || Отключить();
	}
	document.addEventListener(_sFullscreenchange, ОбработатьИзменениеРежима);
	document.addEventListener('dblclick', ОбработатьДвойнойЩелчок);
	Обновить();
	return {
		Включен,
		Отключить,
		Переключить,
		ПолучитьЭлемент
	};
})();

const м_Тащилка = (() => {
	const МИН_ИНТЕРВАЛ_ПЕРЕТАСКИВАНИЯ = 45;
	let _чИдУказателя = NaN;
	let _оПараметры = null;
	let _чВремяПоследнегоПеретаскивания;
	let _чНачальнаяX, _чНачальнаяY;
	let _чПоследняяX, _чПоследняяY;
	function Параметры(узНажат, узТащится) {
		this.узНажат = узНажат;
		this.узТащится = узТащится;
		this.чШаг = 1;
		this.лОтмена = false;
		this.лИзмениласьX = false;
		this.лИзмениласьY = false;
		this.чИзменениеX = 0;
		this.чИзменениеY = 0;
	}
	const ОбработатьPointerDown = ДобавитьОбработчикИсключений(оСобытие => {
		if (!Number.isNaN(_чИдУказателя) || оСобытие.button !== ЛЕВАЯ_КНОПКА) {
			return;
		}
		if (оСобытие.target.nodeType !== Node.ELEMENT_NODE) {
			return;
		}
		const узНажат = оСобытие.target.closest('[data-тащилка]');
		if (узНажат === null) {
			return;
		}
		_чИдУказателя = оСобытие.pointerId;
		_оПараметры = new Параметры(узНажат, Узел(узНажат.getAttribute('data-тащилка')));
		_чВремяПоследнегоПеретаскивания = 0;
		_чНачальнаяX = _чПоследняяX = оСобытие.clientX;
		_чНачальнаяY = _чПоследняяY = оСобытие.clientY;
		м_Журнал.Окак(`[Тащилка] Начинаю перетаскивать ${_оПараметры.узТащится.id} X=${_чНачальнаяX} Y=${_чНачальнаяY} id=${_чИдУказателя} type=${оСобытие.pointerType} primary=${оСобытие.isPrimary}`);
		document.addEventListener('pointermove', ОбработатьPointerMove, ПАССИВНЫЙ_ОБРАБОТЧИК);
		document.addEventListener('pointerup', ОбработатьPointerUpИPointerCancel, ПАССИВНЫЙ_ОБРАБОТЧИК);
		document.addEventListener('pointercancel', ОбработатьPointerUpИPointerCancel);
		м_События.ДобавитьОбработчик('фокусник-изменилосьсостояние', ОбработатьПокиданиеВкладки);
		м_Меню.Закрыть(true);
		м_ПолноэкранныйРежим.ПолучитьЭлемент().style.setProperty('cursor', getComputedStyle(узНажат).cursor, 'important');
		м_ПолноэкранныйРежим.ПолучитьЭлемент().classList.add('тащилка-перехват');
		_оПараметры.узТащится.classList.add('тащилка');
		м_События.ПослатьСобытие(`тащилка-перетаскивание-${_оПараметры.узТащится.id}`, _оПараметры);
	});
	const ОбработатьPointerMove = ДобавитьОбработчикИсключений(оСобытие => {
		if (_чИдУказателя === оСобытие.pointerId) {
			if ((оСобытие.buttons & НАЖАТА_ЛЕВАЯ_КНОПКА) == 0) {
				ЗавершитьПеретаскивание('кнопка отпущена');
			} else {
				const чВремя = performance.now();
				if (чВремя - _чВремяПоследнегоПеретаскивания >= МИН_ИНТЕРВАЛ_ПЕРЕТАСКИВАНИЯ) {
					_чВремяПоследнегоПеретаскивания = чВремя;
					_оПараметры.лИзмениласьX = _чПоследняяX !== оСобытие.clientX;
					_оПараметры.лИзмениласьY = _чПоследняяY !== оСобытие.clientY;
					if (_оПараметры.лИзмениласьX || _оПараметры.лИзмениласьY) {
						_чПоследняяX = оСобытие.clientX;
						_чПоследняяY = оСобытие.clientY;
						_оПараметры.чШаг = 2;
						_оПараметры.чИзменениеX = _чПоследняяX - _чНачальнаяX;
						_оПараметры.чИзменениеY = _чПоследняяY - _чНачальнаяY;
						м_События.ПослатьСобытие(`тащилка-перетаскивание-${_оПараметры.узТащится.id}`, _оПараметры);
					}
				}
			}
		}
	});
	const ОбработатьPointerUpИPointerCancel = ДобавитьОбработчикИсключений(оСобытие => {
		if (_чИдУказателя === оСобытие.pointerId) {
			ЗавершитьПеретаскивание(оСобытие.type);
		}
	});
	function ОбработатьПокиданиеВкладки({лАктивен}) {
		if (!лАктивен) {
			ЗавершитьПеретаскивание('вкладка неактивна');
		}
	}
	function ОтменитьПеретаскивание(сИдУзла) {
		Проверить(сИдУзла === void 0 || ЭтоНепустаяСтрока(сИдУзла));
		if (!Number.isNaN(_чИдУказателя) && (сИдУзла === void 0 || сИдУзла === _оПараметры.узТащится.id)) {
			_оПараметры.лОтмена = true;
			ЗавершитьПеретаскивание('операция отменена');
		}
	}
	function ЗавершитьПеретаскивание(сПричина) {
		if (_оПараметры.чШаг !== 3) {
			м_Журнал.Окак(`[Тащилка] Заканчиваю перетаскивание: ${сПричина} X=${_чПоследняяX} Y=${_чПоследняяY}`);
			_оПараметры.чШаг = 3;
			м_События.ПослатьСобытие(`тащилка-перетаскивание-${_оПараметры.узТащится.id}`, _оПараметры);
			м_ПолноэкранныйРежим.ПолучитьЭлемент().style.removeProperty('cursor');
			м_ПолноэкранныйРежим.ПолучитьЭлемент().classList.remove('тащилка-перехват');
			_оПараметры.узТащится.classList.remove('тащилка');
			document.removeEventListener('pointermove', ОбработатьPointerMove);
			document.removeEventListener('pointerup', ОбработатьPointerUpИPointerCancel);
			document.removeEventListener('pointercancel', ОбработатьPointerUpИPointerCancel);
			м_События.УдалитьОбработчик('фокусник-изменилосьсостояние', ОбработатьПокиданиеВкладки);
			_чИдУказателя = NaN;
			_оПараметры = null;
		}
	}
	document.addEventListener('pointerdown', ОбработатьPointerDown, ПАССИВНЫЙ_ОБРАБОТЧИК);
	return {
		ОтменитьПеретаскивание
	};
})();

const м_Автоскрытие = (() => {
	const МИН_ИНТЕРВАЛ_РЕДКОГО_ДВИЖЕНИЯ = 95;
	const ПОРОГ_НАЧАЛА_ДВИЖЕНИЯ = 90;
	const ПОРОГ_ОКОНЧАНИЯ_ДВИЖЕНИЯ = 300;
	const _узАвтоскрытие = document.getElementById('проигрыватель');
	let _чТаймер = 0;
	let _чСкрытьВ;
	let _nScreenX, _nScreenY;
	let _nClientX, _nClientY;
	let _чНачалоДвижения = 0;
	let _чПоследнееДвижение = 0;
	const ОбработатьТаймер = ДобавитьОбработчикИсключений(() => {
		Проверить(_чТаймер !== 0);
		const чСкрытьЧерез = _чСкрытьВ - performance.now();
		if (чСкрытьЧерез > 100) {
			_чТаймер = setTimeout(ОбработатьТаймер, чСкрытьЧерез);
			_чСкрытьВ = 0;
		} else {
			Скрыть(false);
		}
	});
	function Показать() {
		if (_чТаймер === 0) {
			document.body.classList.remove('автоскрытие', 'панель-безанимации');
			_чТаймер = setTimeout(ОбработатьТаймер, м_Настройки.Получить('чИнтервалАвтоскрытия') * 1e3);
			_чСкрытьВ = 0;
		} else {
			_чСкрытьВ = performance.now() + м_Настройки.Получить('чИнтервалАвтоскрытия') * 1e3;
		}
	}
	function Скрыть(лБезАнимации) {
		if (_чТаймер !== 0) {
			clearTimeout(_чТаймер);
			_чТаймер = 0;
			document.body.classList.add('автоскрытие');
			document.body.classList.toggle('панель-безанимации', лБезАнимации);
			if (лБезАнимации) {
				_чНачалоДвижения = _чПоследнееДвижение = 0;
			}
		}
	}
	function ОбработатьРедкоеДвижениеУказателя(оСобытие) {
		if (_nScreenX === оСобытие.screenX && _nScreenY === оСобытие.screenY || _nClientX === оСобытие.clientX && _nClientY === оСобытие.clientY) {
			return;
		}
		_nScreenX = оСобытие.screenX;
		_nScreenY = оСобытие.screenY;
		_nClientX = оСобытие.clientX;
		_nClientY = оСобытие.clientY;
		if (оСобытие.pointerType !== 'mouse') {
			Показать();
		} else {
			const чВремя = оСобытие.timeStamp;
			if (чВремя - _чПоследнееДвижение >= ПОРОГ_ОКОНЧАНИЯ_ДВИЖЕНИЯ) {
				_чНачалоДвижения = чВремя;
			} else if (чВремя - _чНачалоДвижения >= ПОРОГ_НАЧАЛА_ДВИЖЕНИЯ) {
				Показать();
			}
			_чПоследнееДвижение = чВремя;
		}
	}
	const ОбработатьДвижениеУказателя = ДобавитьОбработчикИсключений(оСобытие => {
		_узАвтоскрытие.removeEventListener('pointermove', ОбработатьДвижениеУказателя);
		setTimeout(ПерехватитьДвижениеУказателя, МИН_ИНТЕРВАЛ_РЕДКОГО_ДВИЖЕНИЯ);
		ОбработатьРедкоеДвижениеУказателя(оСобытие);
	});
	const ПерехватитьДвижениеУказателя = ДобавитьОбработчикИсключений(() => {
		_узАвтоскрытие.addEventListener('pointermove', ОбработатьДвижениеУказателя, ПАССИВНЫЙ_ОБРАБОТЧИК);
	});
	const ОбработатьЩелчок = ДобавитьОбработчикИсключений(оСобытие => {
		Показать();
	});
	const ОбработатьПокиданиеУказателя = ДобавитьОбработчикИсключений(оСобытие => {
		Скрыть(false);
	});
	function Запустить() {
		_узАвтоскрытие.addEventListener('pointermove', ОбработатьДвижениеУказателя, ПАССИВНЫЙ_ОБРАБОТЧИК);
		_узАвтоскрытие.addEventListener('click', ОбработатьЩелчок, ПАССИВНЫЙ_ОБРАБОТЧИК);
		_узАвтоскрытие.addEventListener('mouseleave', ОбработатьПокиданиеУказателя);
	}
	return {
		Запустить,
		Скрыть,
		Показать
	};
})();

const м_Оформление = (() => {
	const СЕЛЕКТОР_КНОПКИ_ЦВЕТА = 'input[type="color"]';
	let _оПрозрачность = null;
	const ОбработатьВводЦвета = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.target.matches(СЕЛЕКТОР_КНОПКИ_ЦВЕТА)) {
			ОбновитьСтили();
		}
	});
	const ОбработатьИзменениеЦвета = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.target.matches(СЕЛЕКТОР_КНОПКИ_ЦВЕТА)) {
			м_Настройки.Изменить(оСобытие.target.id, оСобытие.target.value);
		}
	});
	function ОбработатьИзменениеПредустановкиОформления() {
		ОбновитьОкноНастроек();
		ОбновитьСтили();
	}
	function ОбновитьОкноНастроек() {
		for (let узКнопка of document.querySelectorAll(СЕЛЕКТОР_КНОПКИ_ЦВЕТА)) {
			узКнопка.value = м_Настройки.Получить(узКнопка.id);
		}
		_оПрозрачность.Обновить();
	}
	function ОбновитьСтили() {
		const оСтиль = document.documentElement.style;
		for (let узКнопка of document.querySelectorAll(СЕЛЕКТОР_КНОПКИ_ЦВЕТА)) {
			оСтиль.setProperty(`--${узКнопка.id}`, Number.parseInt(узКнопка.value.slice(1, 3), 16) + ',' + Number.parseInt(узКнопка.value.slice(3, 5), 16) + ',' + Number.parseInt(узКнопка.value.slice(5, 7), 16));
		}
		const чНепрозрачность = Округлить(1 - м_Настройки.Получить('чПрозрачность') / 100, 2);
		оСтиль.setProperty('--чНепрозрачность', чНепрозрачность);
		оСтиль.setProperty('--чНепрозрачностьОкна', Ограничить(чНепрозрачность, .85, 1));
	}
	function ПрименитьРазмерИнтерфейса() {
		document.documentElement.style.fontSize = `${16 * м_Настройки.Получить('чРазмерИнтерфейса') / 100}px`;
	}
	function Запустить() {
		м_i18n.TranslateDocument(document);
		_оПрозрачность = new ВводЧисла('чПрозрачность', 5, 0, 'прозрачность');
		_оПрозрачность.ПослеИзменения = ОбновитьСтили;
		document.addEventListener('input', ОбработатьВводЦвета);
		document.addEventListener('change', ОбработатьИзменениеЦвета);
		м_События.ДобавитьОбработчик('настройки-измениласьпредустановка-оформление', ОбработатьИзменениеПредустановкиОформления);
		ОбработатьИзменениеПредустановкиОформления();
		new ВводЧисла('чРазмерИнтерфейса', 1, 0, 'размеринтерфейса').ПослеИзменения = ПрименитьРазмерИнтерфейса;
		ПрименитьРазмерИнтерфейса();
		ПоказатьЭлемент(document.body, true);
	}
	return {
		Запустить
	};
})();

const м_Уведомление = (() => {
	const ПОКАЗЫВАТЬ_УВЕДОМЛЕНИЕ = 2e3;
	let _чТаймер = 0;
	function Показать(сИдЗначка, лЖопа) {
		Проверить(document.getElementById(сИдЗначка) && typeof лЖопа == 'boolean');
		const узУведомление = Узел('уведомление');
		узУведомление.classList.toggle('жопа', лЖопа);
		ПоказатьЭлемент(узУведомление, true);
		узУведомление.firstElementChild.setAttributeNS('http://www.w3.org/1999/xlink', 'href', `#${сИдЗначка}`);
		if (_чТаймер !== 0) {
			clearTimeout(_чТаймер);
		}
		_чТаймер = setTimeout(СкрытьУведомление, ПОКАЗЫВАТЬ_УВЕДОМЛЕНИЕ);
	}
	function ПоказатьСчастье() {
		Показать('svg-success', false);
	}
	function ПоказатьЖопу() {
		Показать('svg-fail', true);
	}
	const СкрытьУведомление = ДобавитьОбработчикИсключений(() => {
		ПоказатьЭлемент('уведомление', false);
		_чТаймер = 0;
	});
	return {
		Показать,
		ПоказатьСчастье,
		ПоказатьЖопу
	};
})();

const м_Шкала = (() => {
	let _чНачало = 0;
	let _чКонец = 0;
	let _чПросмотрено;
	function ОграничитьВремя(чВремя) {
		return Ограничить(чВремя, _чНачало, _чКонец);
	}
	function Обновить() {
		Проверить(Number.isFinite(_чНачало) && Number.isFinite(_чКонец) && Number.isFinite(_чПросмотрено));
		Узел('шкала-просмотрено').style.transform = `scaleX(${((_чПросмотрено - _чНачало) / (_чКонец - _чНачало)).toFixed(4)})`;
	}
	const ОбработатьЩелчок = ДобавитьОбработчикИсключений(оСобытие => {
		if (м_Управление.ПолучитьСостояние() !== СОСТОЯНИЕ_ПОВТОР) {
			return;
		}
		const оБордюр = оСобытие.currentTarget.getBoundingClientRect();
		const оСтиль = getComputedStyle(оСобытие.currentTarget);
		const чНачалоШкалы = Math.round(оБордюр.left + Number.parseFloat(оСтиль.paddingLeft));
		const чКонецШкалы = Math.round(оБордюр.right - Number.parseFloat(оСтиль.paddingRight));
		const чУказатель = оСобытие.clientX + 1;
		const чПеремотатьДо = ОграничитьВремя((чУказатель - чНачалоШкалы) / (чКонецШкалы - чНачалоШкалы) * (_чКонец - _чНачало) + _чНачало);
		м_Журнал.Окак(`[Шкала] Перематываю до ${чПеремотатьДо}`);
		м_Проигрыватель.ПеремотатьПовторДо(чПеремотатьДо);
	});
	function ЗадатьНачалоИКонец(чНачало, чКонец) {
		Проверить(чНачало <= чКонец);
		_чНачало = чНачало;
		_чКонец = чКонец;
		document.getElementById('шкала').addEventListener('click', ОбработатьЩелчок);
	}
	function ЗадатьПросмотрено(чПросмотрено) {
		_чПросмотрено = ОграничитьВремя(чПросмотрено);
		Обновить();
	}
	function ПолучитьНачало() {
		return _чНачало;
	}
	function ПолучитьКонец() {
		return _чКонец;
	}
	return {
		ЗадатьНачалоИКонец,
		ЗадатьПросмотрено,
		ПолучитьНачало,
		ПолучитьКонец
	};
})();

const м_Новости = (() => {
	const ПОКАЗАТЬ_ОДИН_РАЗ = '2000.1.1';
	const ПОКАЗЫВАТЬ_ВСЕГДА = '2000.2.2';
	const ПОЛНАЯ_СПРАВКА = '2000.3.3';
	const ДЛЯ_ПЛАНШЕТА = '2000.4.4';
	const _мНовости = [ [ '2019.10.9', 'J1010', 'F1064' ], [ '2019.3.17', 'J1010', 'F1063' ], [ '2018.10.28', 'J1010', 'F1062' ], [ '2018.8.17', 'J1010', 'F1060' ], [ '2018.7.30', 'J1010', 'F1059' ], [ '2018.6.27', 'J1010', 'F1058' ], [ '2018.6.12', 'J1010', 'F1057' ], [ '2018.5.18', 'J1010', 'F1049' ], [ '2018.4.24', 'J1036', 'F1048' ], [ '2018.4.6', 'J1010', 'F1047' ], [ '2018.3.17', 'J1010', 'F1046' ], [ '2018.3.4', 'J1041', 'F1042' ], [ '2018.2.17', 'J1010', 'F1044' ], [ '2018.1.7', 'J1010', 'F1043' ], [ '2017.11.6', 'J1010', 'F1037', 'F1038' ], [ '2017.10.22', 'J1010', 'F1023' ], [ '2017.10.14', 'J1010', 'F1020' ], [ '2017.9.11', 'J1010', 'F1018' ], [ '2017.8.8', 'J1035', 'F1017' ], [ '2017.6.23', 'J1010', 'F1014' ], [ '2017.5.29', 'J1010', 'F1013' ], [ '2017.3.31', 'J1031', 'F1012' ], [ '2017.2.26', 'J1030', 'F1011' ], [ ПОЛНАЯ_СПРАВКА, 'J1500', 'F1501', 'F1502', 'F1503', 'F1512', 'F1504', 'F1506', 'F1507', 'F1509', 'F1575', 'F1570', 'F1571', 'F1573', 'F1574', 'F1572', 'F1511', 'F1510' ], [ ПОКАЗАТЬ_ОДИН_РАЗ, 'J1054', 'F1501' ], [ ДЛЯ_ПЛАНШЕТА, 'J1055', 'F1056' ], [ ПОКАЗЫВАТЬ_ВСЕГДА, 'J1003', 'F1000' ] ];
	function ПеревестиВерсиюВМиллисекунды(сВерсия) {
		const мчЧасти = /^(\d+)\.(\d+)\.(\d+)(?:\.(\d+))?$/.exec(сВерсия);
		мчЧасти[1] |= 0;
		мчЧасти[2] |= 0;
		мчЧасти[3] |= 0;
		мчЧасти[4] |= 0;
		Проверить(мчЧасти[1] >= 2e3 && мчЧасти[1] <= 2050);
		Проверить(мчЧасти[2] >= 1 && мчЧасти[2] <= 12);
		Проверить(мчЧасти[3] >= 1 && мчЧасти[3] <= 31);
		Проверить(мчЧасти[4] >= 0 && мчЧасти[4] <= 9);
		return Date.UTC(мчЧасти[1], мчЧасти[2] - 1, мчЧасти[3], 0, 0, 0, мчЧасти[4]);
	}
	function ЕстьНовостиСВерсиейСтарше(сВерсия) {
		const чВерсия = ПеревестиВерсиюВМиллисекунды(сВерсия);
		return _мНовости.some(мНовость => ПеревестиВерсиюВМиллисекунды(мНовость[0]) > чВерсия);
	}
	function ДобавитьНовости(чДобавитьВерсииСтарше, сДобавитьВерсиюСправки) {
		Проверить(typeof чДобавитьВерсииСтарше == 'number' && чДобавитьВерсииСтарше >= 0);
		Проверить(сДобавитьВерсиюСправки === '' || сДобавитьВерсиюСправки.startsWith('2000'));
		Проверить(Number.isFinite(чДобавитьВерсииСтарше) || сДобавитьВерсиюСправки !== '');
		УдалитьВсеНовости();
		for (let мНовость of _мНовости) {
			const сВерсия = мНовость[0];
			if (сВерсия.startsWith('2000')) {
				if (сВерсия === ПОКАЗЫВАТЬ_ВСЕГДА || сВерсия === ДЛЯ_ПЛАНШЕТА && ЭТО_ПЛАНШЕТ) {
					ДобавитьНовость(мНовость, 0);
				} else if (сВерсия === сДобавитьВерсиюСправки) {
					ДобавитьНовость(мНовость, 0);
				}
			} else {
				const чВерсия = ПеревестиВерсиюВМиллисекунды(сВерсия);
				if (чВерсия > чДобавитьВерсииСтарше) {
					ДобавитьНовость(мНовость, чВерсия);
				}
			}
		}
	}
	function УдалитьВсеНовости() {
		Узел('текстновостей').textContent = '';
	}
	function ДобавитьНовость(мНовость, чДатаНовости) {
		const узВставить = Узел('текстновостей');
		if (узВставить.firstElementChild) {
			узВставить.appendChild(document.createElement('hr'));
		}
		const узЗаголовок = document.createElement('h4');
		if (чДатаНовости === 0) {
			узЗаголовок.textContent = Текст(мНовость[1]);
		} else {
			узЗаголовок.textContent = `${м_i18n.ФорматироватьДату(чДатаНовости)} · ${Текст(мНовость[1])}`;
		}
		узВставить.appendChild(узЗаголовок);
		for (let ы = 2; ы < мНовость.length; ++ы) {
			м_i18n.InsertAdjacentHtmlMessage(узВставить, 'beforeend', мНовость[ы]);
		}
	}
	function ОткрытьОкно(лПодтвердитьПрочтение) {
		if (лПодтвердитьПрочтение) {
			м_i18n.InsertAdjacentHtmlMessage('закрытьновости', 'content', 'F0619').title = Текст('A0620');
			ПоказатьЭлемент('отложитьновости', true);
		} else {
			м_i18n.InsertAdjacentHtmlMessage('закрытьновости', 'content', 'F0663').title = '';
			ПоказатьЭлемент('отложитьновости', false);
		}
		const узТекст = Узел('текстновостей');
		узТекст.scrollTop = 0;
		ПоказатьИндикаторПрокрутки(!ЭлементПолностьюПрокручен(узТекст));
		м_События.ДобавитьОбработчик('управление-левыйщелчок', ОбработатьЛевыйЩелчок);
		м_События.ДобавитьОбработчик('окна-закрыто-новости', ОбработатьЗакрытиеОкна);
		м_Окна.Открыть('новости');
	}
	function ПоказатьИндикаторПрокрутки(лПоказать) {
		ПоказатьЭлемент('прокрутитьновости', лПоказать);
		Узел('текстновостей')[лПоказать ? 'addEventListener' : 'removeEventListener']('scroll', ОбработатьПрокруткуТекста);
	}
	const ОбработатьПрокруткуТекста = ДобавитьОбработчикИсключений(оСобытие => {
		if (ЭлементПолностьюПрокручен(оСобытие.target)) {
			ПоказатьИндикаторПрокрутки(false);
		}
	});
	function ОбработатьЛевыйЩелчок({сПозывной}) {
		if (сПозывной === 'закрытьновости' && ЭлементПоказан('отложитьновости')) {
			ПоказатьЭлемент('открытьновости', false);
			м_Настройки.Изменить('сПредыдущаяВерсия', ВЕРСИЯ_РАСШИРЕНИЯ);
		}
	}
	function ОбработатьЗакрытиеОкна() {
		ПоказатьИндикаторПрокрутки(false);
	}
	function ОткрытьСправку() {
		ДобавитьНовости(Infinity, ПОЛНАЯ_СПРАВКА);
		ОткрытьОкно(false);
	}
	function ОткрытьНовости() {
		const {пТекущее: сПредыдущаяВерсия, пНачальное: сНачальнаяВерсия} = м_Настройки.ПолучитьПараметрыНастройки('сПредыдущаяВерсия');
		if (сПредыдущаяВерсия === сНачальнаяВерсия) {
			ДобавитьНовости(Infinity, ПОКАЗАТЬ_ОДИН_РАЗ);
			ОткрытьОкно(false);
			ПоказатьЭлемент('открытьновости', false);
			м_Настройки.Изменить('сПредыдущаяВерсия', ВЕРСИЯ_РАСШИРЕНИЯ);
		} else if (сПредыдущаяВерсия !== ВЕРСИЯ_РАСШИРЕНИЯ) {
			ДобавитьНовости(ПеревестиВерсиюВМиллисекунды(сПредыдущаяВерсия), '');
			ОткрытьОкно(true);
			Узел('открытьновости').classList.remove('непрочитано');
		} else {
			ДобавитьНовости(0, '');
			ОткрытьОкно(false);
		}
	}
	function Запустить() {
		const {пТекущее: сПредыдущаяВерсия, пНачальное: сНачальнаяВерсия} = м_Настройки.ПолучитьПараметрыНастройки('сПредыдущаяВерсия');
		if (сПредыдущаяВерсия !== ВЕРСИЯ_РАСШИРЕНИЯ) {
			м_Журнал.Окак(`[Новости] Версия расширения изменилась с ${сПредыдущаяВерсия} на ${ВЕРСИЯ_РАСШИРЕНИЯ}`);
			if (сПредыдущаяВерсия === сНачальнаяВерсия || ЕстьНовостиСВерсиейСтарше(сПредыдущаяВерсия)) {
				ПоказатьЭлемент('открытьновости', true).classList.add('непрочитано');
			} else {
				м_Настройки.Изменить('сПредыдущаяВерсия', ВЕРСИЯ_РАСШИРЕНИЯ);
			}
		}
	}
	return {
		Запустить,
		ОткрытьНовости,
		ОткрытьСправку
	};
})();

const м_Управление = (() => {
	const ПЕРЕМАТЫВАТЬ_СТРЕЛКАМИ_НА = 5;
	const ПЕРЕМАТЫВАТЬ_ПО_КАДРАМ_НА = 5;
	const НАЗВАНИЕ_ТРАНСЛЯЦИИ_НЕИЗВЕСТНО = '• • •';
	let _чСостояние;
	let _оНачалоВоспроизведения, _оРазмерБуфера, _оРастягиваниеБуфера, _оИнтервалОбновленияСписков, _оДлительностьПовтора;
	let _оИнтервалАвтоскрытия;
	function ЗапуститьИзменениеГромкостиКолесом() {
		if (м_Настройки.Получить('лМенятьГромкостьКолесом')) {
			document.addEventListener('wheel', ОбработатьВращениеКолеса);
			document.addEventListener('pointerdown', ОбработатьНажатиеКолеса);
		} else {
			document.removeEventListener('wheel', ОбработатьВращениеКолеса);
			document.removeEventListener('pointerdown', ОбработатьНажатиеКолеса);
		}
	}
	const ОбработатьВращениеКолеса = ДобавитьОбработчикИсключений(оСобытие => {
		if (!(оСобытие.shiftKey || оСобытие.ctrlKey || оСобытие.altKey || оСобытие.metaKey || ЭлементВЭтойТочкеМожноПрокрутить(оСобытие.clientX, оСобытие.clientY))) {
			оСобытие.preventDefault();
			м_Журнал.Вот(`[Управление] Движение колеса deltaY=${оСобытие.deltaY} deltaMode=${оСобытие.deltaMode}`);
			if (оСобытие.deltaY < 0) {
				СохранитьИПрименитьНастройкиЗвука(void 0, Math.min(м_Настройки.Получить('чГромкость2') + м_Настройки.Получить('чШагИзмененияГромкостиКолесом'), МАКСИМАЛЬНАЯ_ГРОМКОСТЬ));
			}
			if (оСобытие.deltaY > 0) {
				СохранитьИПрименитьНастройкиЗвука(void 0, Math.max(м_Настройки.Получить('чГромкость2') - м_Настройки.Получить('чШагИзмененияГромкостиКолесом'), МИНИМАЛЬНАЯ_ГРОМКОСТЬ));
			}
		}
	});
	const ОбработатьНажатиеКолеса = ДобавитьОбработчикИсключений(оСобытие => {
		if (!(оСобытие.button !== СРЕДНЯЯ_КНОПКА || оСобытие.shiftKey || оСобытие.ctrlKey || оСобытие.altKey || оСобытие.metaKey || ЭтоСобытиеДляСсылки(оСобытие))) {
			оСобытие.preventDefault();
			СохранитьИПрименитьНастройкиЗвука(!м_Настройки.Получить('лПриглушить'));
		}
	});
	function ПрименитьМасштабированиеИзображения() {
		Узел('глаз').classList.toggle('масштабировать', м_Настройки.Получить('лМасштабироватьИзображение'));
	}
	function ПрименитьАнимациюИнтерфейса() {
		document.body.classList.toggle('санимацией', м_Настройки.Получить('лАнимацияИнтерфейса'));
	}
	function ОстановитьПросмотрТрансляции() {
		if (_чСостояние === СОСТОЯНИЕ_ОСТАНОВКА || _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
			return false;
		}
		м_Журнал.Окак('[Управление] Останавливаю просмотр трансляции');
		м_Список.Остановить();
		м_Преобразователь.Остановить();
		г_моОчередь.Очистить();
		г_моОчередь.Добавить(new Сегмент(ОБРАБОТКА_ПРЕОБРАЗОВАН, СОСТОЯНИЕ_ПОВТОР));
		м_Проигрыватель.ДобавитьСледующийСегмент();
		return true;
	}
	function ПереключитьПросмотрТрансляции() {
		if (!ОстановитьПросмотрТрансляции()) {
			м_Журнал.Окак('[Управление] Начинаю просмотр трансляции');
			г_моОчередь.Очистить();
			м_Проигрыватель.Перезагрузить(СОСТОЯНИЕ_ЗАПУСК);
			м_Список.Запустить();
		}
	}
	function ПереключитьОкноСтатистики() {
		if (м_Статистика.ОкноПоказано()) {
			м_Статистика.ЗакрытьОкно();
		} else {
			м_Статистика.ОткрытьОкно();
		}
	}
	function ПереключитьПроверкуЦвета(оСобытие) {
		if (document.body.classList.toggle('проверкацвета')) {
			document.body.classList.toggle('проверкацветафон', !оСобытие.shiftKey);
			м_Новости.ОткрытьСправку();
		} else {
			document.body.classList.remove('проверкацветафон');
		}
	}
	function КопироватьТекстВБуферОбмена(сТекст) {
		Проверить(typeof сТекст == 'string');
		if (сТекст === '') {
			м_Уведомление.ПоказатьЖопу();
			return;
		}
		navigator.clipboard.writeText(сТекст).then(() => {
			м_Журнал.Вот('[Управление] Копирование в буфер обмена завершено');
			м_Уведомление.ПоказатьСчастье();
		}, пПричина => {
			м_Журнал.Ой(`[Управление] Ошибка при копировании в буфер обмена: ${пПричина}`);
			м_Уведомление.ПоказатьЖопу();
		}).catch(м_Отладка.ПойманоИсключение);
	}
	function КопироватьАдресТрансляцииВБуферОбмена() {
		if (КопироватьАдресТрансляцииВБуферОбмена.лИдетВыполнение) {
			return;
		}
		КопироватьАдресТрансляцииВБуферОбмена.лИдетВыполнение = true;
		м_Журнал.Окак('[Управление] Получаю адрес трансляции для копирования');
		м_Twitch.ПолучитьАбсолютныйАдресСпискаВариантов(null, true).then(сРезультат => {
			м_Журнал.Вот('[Управление] Копирую адрес трансляции в буфер обмена');
			return navigator.clipboard.writeText(сРезультат).then(() => {
				КопироватьАдресТрансляцииВБуферОбмена.лИдетВыполнение = false;
				м_Журнал.Вот('[Управление] Копирование в буфер обмена завершено');
				м_Управление.ОстановитьПросмотрТрансляции();
				м_Уведомление.ПоказатьСчастье();
			}, пПричина => {
				throw `Ошибка при копировании в буфер обмена: ${пПричина}`;
			});
		}).catch(ДобавитьОбработчикИсключений(пПричина => {
			КопироватьАдресТрансляцииВБуферОбмена.лИдетВыполнение = false;
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Управление] Ошибка при копировании адреса трансляции в буфер обмена: ${пПричина}`);
				м_Уведомление.ПоказатьЖопу();
			} else {
				throw пПричина;
			}
		}));
	}
	const ОбработатьИзменениеГромкости = ДобавитьОбработчикИсключений(оСобытие => {
		СохранитьИПрименитьНастройкиЗвука(false, Number.parseFloat(оСобытие.target.value));
	});
	function СохранитьИПрименитьНастройкиЗвука(лПриглушить, чГромкость) {
		Проверить(лПриглушить !== void 0 || чГромкость !== void 0);
		if (document.body.classList.contains('нетзвука')) {
			return;
		}
		if (лПриглушить !== void 0) {
			м_Настройки.Изменить('лПриглушить', лПриглушить);
		}
		if (чГромкость !== void 0) {
			м_Настройки.Изменить('чГромкость2', Math.round(чГромкость));
		}
		ОбновитьНастройкиЗвука();
		м_Проигрыватель.ПрименитьНастройкиЗвука();
		м_Автоскрытие.Показать();
	}
	function ОбновитьНастройкиЗвука() {
		Узел('громкость').value = м_Настройки.Получить('чГромкость2');
		ИзменитьКнопку('переключитьприглушить', м_Настройки.Получить('лПриглушить'));
	}
	function ОбновитьКоличествоДорожек(лЕстьВидео, лЕстьЗвук) {
		document.body.classList.toggle('нетвидео', !лЕстьВидео);
		document.body.classList.toggle('нетзвука', !лЕстьЗвук);
	}
	function ИзменитьПодпискуЗрителяНаКанал(чПодписка) {
		if (!document.getElementById('зритель-подписка').classList.contains('обновляется')) {
			м_Twitch.ИзменитьПодпискуЗрителяНаКанал(чПодписка);
		}
	}
	const ОбработатьЛевыйЩелчок = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.button !== ЛЕВАЯ_КНОПКА) {
			return;
		}
		const узЩелчок = оСобытие.target;
		let узПозывной = узЩелчок;
		let сПозывной = узПозывной.id || узПозывной.name;
		if (!сПозывной && узЩелчок.parentNode) {
			узПозывной = узЩелчок.parentNode;
			сПозывной = узПозывной.id || узПозывной.name;
		}
		оСобытие.узПозывной = узПозывной;
		оСобытие.сПозывной = сПозывной;
		м_События.ПослатьСобытие('управление-левыйщелчок', оСобытие);
		switch (сПозывной) {
		  case 'переключитьтрансляцию':
			ПереключитьПросмотрТрансляции();
			break;

		  case 'переключитьпаузу':
			if (_чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Проигрыватель.ПереключитьПаузу();
			}
			break;

		  case 'переключитьприглушить':
			СохранитьИПрименитьНастройкиЗвука(!м_Настройки.Получить('лПриглушить'));
			break;

		  case 'переключитьчат':
			м_Чат.ПереключитьСостояниеПанели();
			break;

		  case 'создатьклип':
			м_Twitch.СоздатьКлип();
			break;

		  case 'переключитьполноэкранный':
			м_ПолноэкранныйРежим.Переключить();
			break;

		  case 'одновременныхзагрузок':
			Проверить(узЩелчок.checked);
			м_Настройки.Изменить('кОдновременныхЗагрузок', Number.parseInt(узЩелчок.value, 10));
			м_Статистика.ОчиститьИсторию();
			break;

		  case 'анимацияинтерфейса':
			м_Настройки.Изменить('лАнимацияИнтерфейса', узЩелчок.checked);
			ПрименитьАнимациюИнтерфейса();
			break;

		  case 'масштабироватьизображение':
			м_Настройки.Изменить('лМасштабироватьИзображение', узЩелчок.checked);
			ПрименитьМасштабированиеИзображения();
			break;

		  case 'автоположениечата':
			м_Настройки.Изменить('лАвтоПоложениеЧата', узЩелчок.checked);
			ОбновитьОкноНастроек();
			м_Чат.ПрименитьПоложениеПанели();
			break;

		  case 'горизонтальноеположениечата':
			Проверить(узЩелчок.checked);
			м_Настройки.Изменить('чГоризонтальноеПоложениеЧата', Number.parseInt(узЩелчок.value, 10));
			м_Чат.ПрименитьПоложениеПанели();
			break;

		  case 'вертикальноеположениечата':
			Проверить(узЩелчок.checked);
			м_Настройки.Изменить('чВертикальноеПоложениеЧата', Number.parseInt(узЩелчок.value, 10));
			м_Чат.ПрименитьПоложениеПанели();
			break;

		  case 'положениечата':
			Проверить(узЩелчок.checked);
			м_Настройки.Изменить('чПоложениеПанелиЧата', Number.parseInt(узЩелчок.value, 10));
			м_Чат.ПрименитьПоложениеПанели();
			break;

		  case 'состояниезакрытогочата':
			Проверить(узЩелчок.checked);
			м_Чат.СохранитьИПрименитьСостояниеЗакрытойПанели(Number.parseInt(узЩелчок.value, 10));
			break;

		  case 'переключитьстатистику':
		  case 'позиция-текст':
			ПереключитьОкноСтатистики();
			break;

		  case 'открытьновости':
		  case 'открытьновости2':
			м_Новости.ОткрытьНовости();
			break;

		  case 'открытьсправку':
			м_Новости.ОткрытьСправку();
			break;

		  case 'отправитьотзыв':
			м_Отладка.ЗавершитьРаботуИОтправитьОтзыв();
			break;

		  case 'экспортнастроек':
			м_Настройки.Экспорт();
			break;

		  case 'импортнастроек':
			const уз = document.getElementById('выборфайладляимпортанастроек');
			уз.value = '';
			уз.click();
			break;

		  case 'сброситьнастройки':
			м_Настройки.Сбросить();
			break;

		  case 'проверкацвета':
			ПереключитьПроверкуЦвета(оСобытие);
			break;

		  case 'типтрансляции':
			Проверить(узЩелчок.nodeName === 'BUTTON');
			if (!узЩелчок.disabled) {
				window.location.assign(узЩелчок.getAttribute('data-адрес'));
			}
			break;

		  case 'зритель-подписаться':
			ИзменитьПодпискуЗрителяНаКанал(ПОДПИСКА_УВЕДОМЛЯТЬ);
			break;

		  case 'зритель-отписаться':
			ИзменитьПодпискуЗрителяНаКанал(ПОДПИСКА_НЕОФОРМЛЕНА);
			break;

		  case 'зритель-уведомлять':
			ИзменитьПодпискуЗрителяНаКанал(узЩелчок.checked ? ПОДПИСКА_УВЕДОМЛЯТЬ : ПОДПИСКА_НЕУВЕДОМЛЯТЬ);
			break;

		  case 'закрытьстатистику':
			м_Статистика.ЗакрытьОкно();
			break;

		  case 'копироватьадресзаписи':
			м_Журнал.Вот('[Управление] Копирую адрес записи в буфер обмена');
			КопироватьТекстВБуферОбмена(м_Twitch.ПолучитьАдресЗаписиДляТекущейПозиции());
			break;

		  case 'копироватьадресканала':
			м_Журнал.Вот('[Управление] Копирую адрес канала в буфер обмена');
			КопироватьТекстВБуферОбмена(м_Twitch.ПолучитьАдресКанала(false));
			break;

		  case 'копироватьадрестрансляции':
			КопироватьАдресТрансляцииВБуферОбмена();
		}
	});
	const ОбработатьНажатиеИОтпусканиеКлавы = ДобавитьОбработчикИсключений(оСобытие => {
		const SHIFT_KEY = 1 << 16;
		const CTRL_KEY = 1 << 17;
		const ALT_KEY = 1 << 18;
		const META_KEY = 1 << 19;
		const лНажатие = оСобытие.type === 'keydown';
		const лНажатие1 = лНажатие && !оСобытие.repeat;
		switch (оСобытие.keyCode + оСобытие.shiftKey * SHIFT_KEY + оСобытие.ctrlKey * CTRL_KEY + оСобытие.altKey * ALT_KEY + оСобытие.metaKey * META_KEY) {
		  case 70:
		  case 13:
		  case 13 + ALT_KEY:
			if (лНажатие1) {
				м_ПолноэкранныйРежим.Переключить();
			}
			break;

		  case 27:
			оСобытие.preventDefault();
			if (лНажатие1) {
				м_Меню.Закрыть(true);
				м_Окна.Закрыть(м_Окна.ПолучитьОткрытое());
				м_Автоскрытие.Скрыть(true);
			}
			break;

		  case 86:
			if (лНажатие1) {
				м_Окна.Переключить('настройки');
			}
			break;

		  case 73:
			if (лНажатие1) {
				м_Окна.Переключить('канал');
			}
			break;

		  case 83:
			if (лНажатие1) {
				ПереключитьОкноСтатистики();
			}
			break;

		  case 112:
			if (лНажатие1) {
				м_Новости.ОткрытьСправку();
			}
			break;

		  case 67:
			if (лНажатие1) {
				м_Чат.ПереключитьСостояниеПанели();
			}
			break;

		  case 65 + CTRL_KEY:
			break;

		  case 85:
			if (лНажатие1) {
				м_Чат.ПереключитьПоложениеПанели();
				ОбновитьОкноНастроек();
			}
			break;

		  case 32:
			if (лНажатие1) {
				ПереключитьПросмотрТрансляции();
				м_Автоскрытие.Показать();
			}
			break;

		  case 48:
		  case 49:
		  case 50:
		  case 51:
		  case 52:
		  case 53:
		  case 54:
		  case 55:
		  case 56:
		  case 57:
			if (лНажатие1 && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				ЗадатьСкоростьВоспроизведения((оСобытие.keyCode === 48 ? 58 : оСобытие.keyCode) - 53);
				м_Автоскрытие.Показать();
			}
			break;

		  case 187:
		  case 107:
			if (лНажатие1 && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				ЗадатьСкоростьВоспроизведения(Infinity);
				м_Автоскрытие.Показать();
			}
			break;

		  case 189:
		  case 109:
			if (лНажатие1 && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				ЗадатьСкоростьВоспроизведения(-Infinity);
				м_Автоскрытие.Показать();
			}
			break;

		  case 90:
		  case 12:
			if (лНажатие1 && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Проигрыватель.ПереключитьПаузу();
				м_Автоскрытие.Показать();
			}
			break;

		  case 37:
			if (лНажатие && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Журнал.Окак(`[Управление] Перематываю на -${ПЕРЕМАТЫВАТЬ_СТРЕЛКАМИ_НА}с`);
				м_Проигрыватель.ПеремотатьПовторНа(false, -ПЕРЕМАТЫВАТЬ_СТРЕЛКАМИ_НА);
				м_Автоскрытие.Показать();
			}
			break;

		  case 39:
			if (лНажатие && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Журнал.Окак(`[Управление] Перематываю на +${ПЕРЕМАТЫВАТЬ_СТРЕЛКАМИ_НА}с`);
				м_Проигрыватель.ПеремотатьПовторНа(false, ПЕРЕМАТЫВАТЬ_СТРЕЛКАМИ_НА);
				м_Автоскрытие.Показать();
			}
			break;

		  case 37 + SHIFT_KEY:
			if (лНажатие && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Журнал.Окак(`[Управление] Перематываю на -${ПЕРЕМАТЫВАТЬ_ПО_КАДРАМ_НА} кадров`);
				м_Проигрыватель.ПеремотатьПовторНа(true, -ПЕРЕМАТЫВАТЬ_ПО_КАДРАМ_НА);
				м_Автоскрытие.Показать();
			}
			break;

		  case 39 + SHIFT_KEY:
			if (лНажатие && _чСостояние === СОСТОЯНИЕ_ПОВТОР) {
				м_Журнал.Окак(`[Управление] Перематываю на +1 кадр`);
				м_Проигрыватель.ПеремотатьПовторНа(true, 1);
				м_Автоскрытие.Показать();
			}
			break;

		  case 38:
			if (лНажатие) {
				СохранитьИПрименитьНастройкиЗвука(false, Math.min(м_Настройки.Получить('чГромкость2') + ШАГ_ПОВЫШЕНИЯ_ГРОМКОСТИ_КЛАВОЙ, МАКСИМАЛЬНАЯ_ГРОМКОСТЬ));
			}
			break;

		  case 40:
			if (лНажатие) {
				СохранитьИПрименитьНастройкиЗвука(false, Math.max(м_Настройки.Получить('чГромкость2') - ШАГ_ПОНИЖЕНИЯ_ГРОМКОСТИ_КЛАВОЙ, МИНИМАЛЬНАЯ_ГРОМКОСТЬ));
			}
			break;

		  case 33:
			if (лНажатие1) {
				СохранитьИПрименитьНастройкиЗвука(false);
			}
			break;

		  case 34:
			if (лНажатие1) {
				СохранитьИПрименитьНастройкиЗвука(true);
			}
			break;

		  case 77:
			if (лНажатие1) {
				СохранитьИПрименитьНастройкиЗвука(!м_Настройки.Получить('лПриглушить'));
			}
			break;

		  case 82 + SHIFT_KEY:
			if (лНажатие1) {
				const лМасштабироватьИзображение = м_Настройки.Получить('лМасштабироватьИзображение');
				м_Настройки.Изменить('лМасштабироватьИзображение', !лМасштабироватьИзображение);
				ОбновитьОкноНастроек();
				ПрименитьМасштабированиеИзображения();
				м_Уведомление.Показать(`svg-fullscreen-${лМасштабироватьИзображение}`, false);
			}
			break;

		  case 88 + ALT_KEY:
			if (лНажатие1) {
				м_Twitch.СоздатьКлип();
			}
			break;

		  default:
			return;
		}
		оСобытие.preventDefault();
	});
	function ОбновитьОкноНастроек() {
		document.querySelector(`input[name="одновременныхзагрузок"][value="${м_Настройки.Получить('кОдновременныхЗагрузок')}"]`).checked = true;
		document.querySelector(`input[name="состояниезакрытогочата"][value="${м_Настройки.Получить('чСостояниеЗакрытогоЧата')}"]`).checked = true;
		Узел('адресчата').selectedIndex = м_Настройки.Получить('лПолноценныйЧат') ? 0 : м_Настройки.Получить('лЗатемнитьЧат') ? 2 : 1;
		Узел('масштабироватьизображение').checked = м_Настройки.Получить('лМасштабироватьИзображение');
		Узел('анимацияинтерфейса').checked = м_Настройки.Получить('лАнимацияИнтерфейса');
		Узел('менятьгромкостьколесом').selectedIndex = м_Настройки.Получить('лМенятьГромкостьКолесом') ? м_Настройки.Получить('чШагИзмененияГромкостиКолесом') : 0;
		const лАвтоПоложение = м_Настройки.Получить('лАвтоПоложениеЧата');
		Узел('автоположениечата').checked = лАвтоПоложение;
		const сузСтороны = document.querySelectorAll('.положениечата input');
		if (лАвтоПоложение) {
			const чГоризонтальноеПоложение = м_Настройки.Получить('чГоризонтальноеПоложениеЧата');
			const чВертикальноеПоложение = м_Настройки.Получить('чВертикальноеПоложениеЧата');
			let узГоризонтальноеПоложение, узВертикальноеПоложение;
			for (let узСторона of сузСтороны) {
				const чСторона = Number.parseInt(узСторона.value, 10);
				if (чГоризонтальноеПоложение === чСторона) {
					узГоризонтальноеПоложение = узСторона;
				}
				if (чВертикальноеПоложение === чСторона) {
					узВертикальноеПоложение = узСторона;
				}
				узСторона.name = чСторона === ПРАВАЯ_СТОРОНА || чСторона === ЛЕВАЯ_СТОРОНА ? 'горизонтальноеположениечата' : 'вертикальноеположениечата';
			}
			узГоризонтальноеПоложение.checked = узВертикальноеПоложение.checked = true;
		} else {
			const чПоложение = м_Настройки.Получить('чПоложениеПанелиЧата');
			let узПоложение;
			for (let узСторона of сузСтороны) {
				if (чПоложение === Number.parseInt(узСторона.value, 10)) {
					узПоложение = узСторона;
				}
				узСторона.name = 'положениечата';
			}
			узПоложение.checked = true;
		}
		if (_оНачалоВоспроизведения) {
			_оНачалоВоспроизведения.Обновить();
			_оРазмерБуфера.Обновить();
			_оРастягиваниеБуфера.Обновить();
			_оИнтервалОбновленияСписков.Обновить();
			_оДлительностьПовтора.Обновить();
			_оИнтервалАвтоскрытия.Обновить();
		} else {
			_оНачалоВоспроизведения = new ВводЧисла('чНачалоВоспроизведения', .5, 1, 'началовоспроизведения');
			_оРазмерБуфера = new ВводЧисла('чРазмерБуфера', .5, 1, 'размербуфера');
			_оРастягиваниеБуфера = new ВводЧисла('чРастягиваниеБуфера', .5, 1, 'растягиваниебуфера');
			_оИнтервалОбновленияСписков = new ВводЧисла('чИнтервалОпроса', 5, 0, 'интервалопроса');
			_оДлительностьПовтора = new ВводЧисла('чДлительностьПовтора2', 30, 0, 'длительностьповтора');
			_оНачалоВоспроизведения.ПослеИзменения = _оРазмерБуфера.ПослеИзменения = _оРастягиваниеБуфера.ПослеИзменения = _оИнтервалОбновленияСписков.ПослеИзменения = м_Статистика.ОчиститьИсторию;
			_оИнтервалАвтоскрытия = new ВводЧисла('чИнтервалАвтоскрытия', .5, 1, 'интервалавтоскрытия');
		}
	}
	function ОбработатьОткрытиеГлавногоМеню() {
		Узел('копироватьадресзаписи').tabIndex = м_Twitch.ПолучитьАдресЗаписиДляТекущейПозиции() ? 0 : -1;
	}
	function ОбработатьПаузу(лПауза) {
		ИзменитьКнопку('переключитьпаузу', лПауза);
	}
	function ОбработатьИзменениеПредустановкиБуферизации() {
		ОбновитьОкноНастроек();
		м_Статистика.ОчиститьИсторию();
	}
	function ПолучитьСкоростьВоспроизведения() {
		const узСкорость = Узел('скорость');
		м_Журнал.Окак(`[Управление] Выбрана скорость ${узСкорость.value}`);
		const чСкорость = Number.parseFloat(узСкорость.value);
		Проверить(Number.isFinite(чСкорость) && чСкорость >= 0);
		return чСкорость;
	}
	function ЗадатьСкоростьВоспроизведения(чСкорость) {
		Проверить(ЭтоЧисло(чСкорость));
		const узСкорость = Узел('скорость');
		Проверить(узСкорость.selectedIndex >= 0);
		let чИндекс;
		if (чСкорость === -Infinity || чСкорость === Infinity) {
			чИндекс = узСкорость.selectedIndex - Math.sign(чСкорость);
		} else {
			чИндекс = узСкорость.querySelector('option[value="1.00"]').index - чСкорость;
		}
		if (чИндекс >= 0 && чИндекс < узСкорость.length && чИндекс !== узСкорость.selectedIndex) {
			узСкорость.selectedIndex = чИндекс;
			м_Проигрыватель.ЗадатьСкоростьПовтора(ПолучитьСкоростьВоспроизведения());
		}
	}
	const ОбработатьИзменениеСкоростиВоспроизведения = ДобавитьОбработчикИсключений(оСобытие => {
		if (_чСостояние === СОСТОЯНИЕ_ПОВТОР) {
			м_Проигрыватель.ЗадатьСкоростьПовтора(ПолучитьСкоростьВоспроизведения());
		}
	});
	const ОбработатьИзменениеВариантаТрансляции = ДобавитьОбработчикИсключений(оСобытие => {
		м_Журнал.Окак(`[Управление] Выбран вариант ${оСобытие.target.value}`);
		Проверить(оСобытие.target.value);
		м_Настройки.Изменить('сНазваниеВарианта', оСобытие.target.value);
		м_Список.ИзменитьВариантТрансляции();
	});
	const ОбработатьИзменениеГромкостиКолесом = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.target.selectedIndex === 0) {
			м_Настройки.Изменить('лМенятьГромкостьКолесом', false);
		} else {
			м_Настройки.Изменить('лМенятьГромкостьКолесом', true);
			м_Настройки.Изменить('чШагИзмененияГромкостиКолесом', оСобытие.target.selectedIndex);
		}
		ЗапуститьИзменениеГромкостиКолесом();
	});
	const ОбработатьИзменениеАдресаЧата = ДобавитьОбработчикИсключений(оСобытие => {
		м_Журнал.Окак(`[Управление] Выбран адрес чата ${оСобытие.target.selectedIndex}`);
		switch (оСобытие.target.selectedIndex) {
		  case 0:
			м_Настройки.Изменить('лПолноценныйЧат', true);
			break;

		  case 1:
			м_Настройки.Изменить('лПолноценныйЧат', false);
			м_Настройки.Изменить('лЗатемнитьЧат', false);
			break;

		  case 2:
			м_Настройки.Изменить('лПолноценныйЧат', false);
			м_Настройки.Изменить('лЗатемнитьЧат', true);
			break;

		  default:
			Проверить(false);
		}
		м_Чат.ПрименитьАдрес();
	});
	const ОбработатьВыборФайлаДляИмпортаНастроек = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.target.files.length === 1) {
			м_Настройки.Импорт(оСобытие.target.files[0]);
		}
	});
	function ОбновитьСписокВариантовТрансляции([моСписокВариантов, чВыбранныйВариант]) {
		const узСписок = Узел('варианттрансляции');
		узСписок.length = 0;
		if (моСписокВариантов) {
			for (let ы = 0; ы < моСписокВариантов.length; ++ы) {
				let сНазвание = моСписокВариантов[ы].сНазвание;
				if (сНазвание === 'audio_only') {
					сНазвание = Текст('J0144');
				} else if (сНазвание.endsWith('(source)')) {
					сНазвание = сНазвание.slice(0, -8) + Текст('J0139');
				}
				узСписок.add(new Option(сНазвание, моСписокВариантов[ы].сИдентификатор, ы === чВыбранныйВариант, ы === чВыбранныйВариант));
			}
		}
		узСписок.disabled = узСписок.length < 2;
	}
	function ПоказатьПропускВидео() {
		м_Уведомление.Показать('svg-cut', true);
	}
	function Запустить() {
		Проверить(_чСостояние === void 0);
		Узел('названиетрансляции').lastElementChild.href = м_Twitch.ПолучитьАдресКанала(true);
		let уз = document.getElementById('громкость');
		уз.min = МИНИМАЛЬНАЯ_ГРОМКОСТЬ;
		уз.max = МАКСИМАЛЬНАЯ_ГРОМКОСТЬ;
		уз.step = ШАГ_ИЗМЕНЕНИЯ_ГРОМКОСТИ_МЫШЬЮ;
		уз.addEventListener('input', ОбработатьИзменениеГромкости);
		for (уз of document.getElementById('скорость').children) {
			уз.text = уз.value === '1.00' ? '1x' : м_i18n.ФорматироватьЧисло(уз.value, 2);
		}
		ОбновитьНастройкиЗвука();
		ОбновитьОкноНастроек();
		м_Настройки.НастроитьСпискиПредустановок();
		м_Автоскрытие.Запустить();
		м_Автоскрытие.Показать();
		м_Новости.Запустить();
		м_Чат.Восстановить();
		м_События.ДобавитьОбработчик('меню-открыто-главноеменю', ОбработатьОткрытиеГлавногоМеню);
		м_События.ДобавитьОбработчик('список-выбранварианттрансляции', ОбновитьСписокВариантовТрансляции);
		м_События.ДобавитьОбработчик('проигрыватель-переполненбуфер', ПоказатьПропускВидео);
		м_События.ДобавитьОбработчик('проигрыватель-пауза', ОбработатьПаузу);
		м_События.ДобавитьОбработчик('настройки-измениласьпредустановка-буферизация', ОбработатьИзменениеПредустановкиБуферизации);
		м_События.ДобавитьОбработчик('twitch-полученыметаданныеканала', ПоказатьМетаданныеКанала);
		м_События.ДобавитьОбработчик('twitch-полученыметаданныезрителя', ПоказатьМетаданныеЗрителя);
		м_События.ДобавитьОбработчик('twitch-полученыметаданныетрансляции', ПоказатьМетаданныеТрансляции);
		document.documentElement.addEventListener('click', ОбработатьЛевыйЩелчок);
		document.addEventListener('keydown', ОбработатьНажатиеИОтпусканиеКлавы);
		document.addEventListener('keyup', ОбработатьНажатиеИОтпусканиеКлавы);
		Узел('скорость').addEventListener('change', ОбработатьИзменениеСкоростиВоспроизведения);
		Узел('варианттрансляции').addEventListener('change', ОбработатьИзменениеВариантаТрансляции);
		Узел('менятьгромкостьколесом').addEventListener('change', ОбработатьИзменениеГромкостиКолесом);
		Узел('адресчата').addEventListener('change', ОбработатьИзменениеАдресаЧата);
		Узел('выборфайладляимпортанастроек').addEventListener('change', ОбработатьВыборФайлаДляИмпортаНастроек);
		ЗапуститьИзменениеГромкостиКолесом();
		ИзменитьСостояние(СОСТОЯНИЕ_ЗАПУСК);
		ПрименитьМасштабированиеИзображения();
		ПрименитьАнимациюИнтерфейса();
		м_Оформление.Запустить();
	}
	function ИзменитьСостояние(чНовоеСостояние) {
		Проверить(Number.isInteger(чНовоеСостояние));
		if (_чСостояние === чНовоеСостояние) {
			return;
		}
		м_Журнал.Вот(`[Управление] Состояние трансляции изменилось с ${_чСостояние} на ${чНовоеСостояние}`);
		_чСостояние = чНовоеСостояние;
		document.body.setAttribute('data-состояние', чНовоеСостояние);
		ИзменитьКнопку('переключитьтрансляцию', чНовоеСостояние === СОСТОЯНИЕ_ОСТАНОВКА || чНовоеСостояние === СОСТОЯНИЕ_ПОВТОР);
		м_События.ПослатьСобытие('управление-изменилосьсостояние', чНовоеСостояние);
		switch (чНовоеСостояние) {
		  case СОСТОЯНИЕ_ЗАПУСК:
			ПоказатьМетаданныеТрансляции({
				лЗапись: null,
				сАдресЗаписи: '',
				сНазваниеТрансляции: НАЗВАНИЕ_ТРАНСЛЯЦИИ_НЕИЗВЕСТНО,
				сНазваниеИгры: null,
				сАдресИгры: null,
				кЗрителей: null,
				чДлительностьТрансляции: null
			});
			м_Twitch.ЗавершитьСборМетаданныхТрансляции(true);
			break;

		  case СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ:
			ПоказатьМетаданныеТрансляции({
				лЗапись: null,
				сАдресЗаписи: '',
				сНазваниеТрансляции: НАЗВАНИЕ_ТРАНСЛЯЦИИ_НЕИЗВЕСТНО,
				сНазваниеИгры: null,
				сАдресИгры: null,
				кЗрителей: null,
				чДлительностьТрансляции: null
			});
			м_Twitch.НачатьСборМетаданныхТрансляции();
			break;

		  case СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ:
			ПоказатьМетаданныеТрансляции({
				лЗапись: null,
				сАдресЗаписи: '',
				сНазваниеТрансляции: Текст('J0100'),
				сАдресИгры: null,
				кЗрителей: null,
				чДлительностьТрансляции: null
			});
			м_Twitch.ЗавершитьСборМетаданныхТрансляции(true);
			Узел('статистика-задержкатрансляции').textContent = '';
			break;

		  case СОСТОЯНИЕ_ЗАГРУЗКА:
		  case СОСТОЯНИЕ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ:
		  case СОСТОЯНИЕ_ВОСПРОИЗВЕДЕНИЕ:
			break;

		  case СОСТОЯНИЕ_ОСТАНОВКА:
		  case СОСТОЯНИЕ_ПОВТОР:
			ПоказатьМетаданныеТрансляции({
				кЗрителей: null
			});
			м_Twitch.ЗавершитьСборМетаданныхТрансляции(false);
			Узел('статистика-задержкатрансляции').textContent = '';
			break;

		  default:
			Проверить(false);
		}
	}
	function ПолучитьСостояние() {
		Проверить(_чСостояние !== void 0);
		return _чСостояние;
	}
	function ПоказатьМетаданныеКанала(оМетаданные) {
		if (оМетаданные.сИмя !== void 0) {
			ИзменитьЗаголовокДокумента(`${оМетаданные.сИмя} - Alternate Player for Twitch.tv`);
			Узел('канал-имя').textContent = оМетаданные.сИмя;
		}
		if (оМетаданные.сАватар !== void 0) {
			Проверить(оМетаданные.сАватар);
			Узел('канал-аватар').src = оМетаданные.сАватар;
		}
		if (оМетаданные.сОписание !== void 0) {
			Узел('канал-описание').textContent = оМетаданные.сОписание || '';
		}
		if (оМетаданные.сКодЯзыка !== void 0) {
			const уз = Узел('канал-язык');
			if (оМетаданные.сКодЯзыка) {
				уз.textContent = м_i18n.ПолучитьНазваниеЯзыка(оМетаданные.сКодЯзыка);
				ПоказатьЭлемент(уз.parentNode, true);
			} else {
				ПоказатьЭлемент(уз.parentNode, false);
			}
		}
		if (оМетаданные.кПодписчиков !== void 0) {
			Узел('канал-подписчиков').textContent = м_i18n.ФорматироватьЧисло(оМетаданные.кПодписчиков);
		}
		if (оМетаданные.кПросмотров !== void 0) {
			Узел('канал-просмотров').textContent = м_i18n.ФорматироватьЧисло(оМетаданные.кПросмотров);
		}
		if (оМетаданные.чКаналСоздан !== void 0) {
			Узел('канал-создан').textContent = м_i18n.ФорматироватьДату(оМетаданные.чКаналСоздан);
		}
		if (оМетаданные.моКоманды !== void 0) {
			ПоказатьМассивСсылок(оМетаданные.моКоманды, 'канал-команды');
		}
	}
	function ПоказатьМассивСсылок(моСсылки, пВставить) {
		const узВставить = Узел(пВставить);
		if (моСсылки.length === 0) {
			ПоказатьЭлемент(узВставить.parentNode, false);
		} else {
			const оФрагмент = document.createDocumentFragment();
			for (let оСсылка, ы = 0; оСсылка = моСсылки[ы]; ++ы) {
				if (ы !== 0) {
					оФрагмент.appendChild(document.createTextNode(', '));
				}
				Проверить(ЭтоНепустаяСтрока(оСсылка.сАдрес) && ЭтоНепустаяСтрока(оСсылка.сИмя));
				const узСсылка = document.createElement('a');
				узСсылка.href = оСсылка.сАдрес;
				узСсылка.rel = 'noopener noreferrer';
				узСсылка.target = '_blank';
				if (оСсылка.сОписание) {
					узСсылка.className = 'канал-ссылка';
					узСсылка.title = оСсылка.сОписание;
				}
				узСсылка.textContent = оСсылка.сИмя;
				оФрагмент.appendChild(узСсылка);
			}
			узВставить.textContent = '';
			узВставить.appendChild(оФрагмент);
			ПоказатьЭлемент(узВставить.parentNode, true);
		}
	}
	function ПоказатьМетаданныеЗрителя(оМетаданные) {
		if (оМетаданные.сИмя !== void 0) {
			if (оМетаданные.сИмя !== '') {
				Узел('зритель-имя').textContent = оМетаданные.сИмя;
			} else {
				м_i18n.InsertAdjacentHtmlMessage('зритель-имя', 'content', 'F0590');
			}
		}
		if (оМетаданные.чПодписка !== void 0) {
			const уз = Узел('зритель-подписка');
			if (оМетаданные.чПодписка === ПОДПИСКА_ОБНОВЛЯЕТСЯ) {
				уз.classList.add('обновляется');
			} else {
				уз.classList.remove('обновляется');
				уз.setAttribute('data-подписка', оМетаданные.чПодписка);
				Узел('зритель-уведомлять').checked = оМетаданные.чПодписка === ПОДПИСКА_УВЕДОМЛЯТЬ;
			}
		}
	}
	function ПоказатьМетаданныеТрансляции(оМетаданные) {
		if (оМетаданные.лЗапись !== void 0) {
			const уз = Узел('типтрансляции');
			if (оМетаданные.лЗапись === null) {
				ПоказатьЭлемент(уз, false);
			} else {
				ИзменитьКнопку(уз, оМетаданные.лЗапись);
				if (оМетаданные.сАдресЗаписи) {
					уз.setAttribute('data-адрес', оМетаданные.сАдресЗаписи);
					уз.disabled = false;
				} else {
					уз.disabled = true;
				}
				ПоказатьЭлемент(уз, true);
			}
		}
		if (оМетаданные.сНазваниеТрансляции !== void 0) {
			const уз = Узел('названиетрансляции');
			if (оМетаданные.сНазваниеТрансляции === null) {
				ПоказатьЭлемент(уз, false);
			} else {
				уз.lastElementChild.title = оМетаданные.сНазваниеТрансляции + Текст('J0101');
				уз.lastElementChild.textContent = оМетаданные.сНазваниеТрансляции;
				ПоказатьЭлемент(уз, true);
			}
		}
		if (оМетаданные.сНазваниеИгры !== void 0) {
			const уз = Узел('названиеигры');
			if (оМетаданные.сНазваниеИгры === null) {
				ПоказатьЭлемент(уз, false);
			} else {
				уз.lastElementChild.href = оМетаданные.сАдресИгры;
				уз.lastElementChild.title = оМетаданные.сНазваниеИгры + Текст('J0102');
				уз.lastElementChild.textContent = оМетаданные.сНазваниеИгры;
				ПоказатьЭлемент(уз, true);
			}
		}
		if (оМетаданные.кЗрителей !== void 0) {
			const уз = Узел('количествозрителей');
			if (оМетаданные.кЗрителей === null) {
				ПоказатьЭлемент(уз, false);
			} else {
				уз.lastElementChild.textContent = м_i18n.ФорматироватьЧисло(оМетаданные.кЗрителей);
				ПоказатьЭлемент(уз, true);
			}
		}
		if (оМетаданные.чДлительностьТрансляции !== void 0) {
			Узел('позиция-текст').textContent = оМетаданные.чДлительностьТрансляции === null ? '' : м_i18n.ПеревестиСекундыВСтроку(оМетаданные.чДлительностьТрансляции / 1e3, false);
		}
	}
	return {
		Запустить,
		ПолучитьСостояние,
		ИзменитьСостояние,
		ПолучитьСкоростьВоспроизведения,
		ОбновитьНастройкиЗвука,
		ОбновитьКоличествоДорожек,
		ОстановитьПросмотрТрансляции
	};
})();

const м_Чат = (() => {
	let _узЧат = null;
 //! <iframe>
		function ПолучитьПоложениеПанели() {
		switch (getComputedStyle(document.getElementById('проигрывательичат')).flexDirection) {
		  case 'column-reverse':
			return ВЕРХНЯЯ_СТОРОНА;

		  case 'row':
			return ПРАВАЯ_СТОРОНА;

		  case 'column':
			return НИЖНЯЯ_СТОРОНА;

		  case 'row-reverse':
			return ЛЕВАЯ_СТОРОНА;

		  default:
			Проверить(false);
		}
	}
	const onHeadersReceived = ДобавитьОбработчикИсключений(oResponse => {
		if (!(oResponse.frameId > 0 && oResponse.parentFrameId === 0)) {
			throw new Error(`Неизвестный источник запроса: ${м_Журнал.O(oResponse)}`);
		}
		м_Журнал.Окак(`[Чат] Обрабатываю заголовки ответа ${oResponse.url}`);
		let bModified = false;
		for (let oHeader, i = oResponse.responseHeaders.length; oHeader = oResponse.responseHeaders[--i]; ) {
			switch (oHeader.name.toLowerCase()) {
			  case 'x-frame-options':
				м_Журнал.Окак('[Чат] Удаляю заголовок X-Frame-Options');
				oResponse.responseHeaders.splice(i, 1);
				bModified = true;
				break;

			  case 'content-security-policy':
				const sModifiedValue = oHeader.value.replace(/(?:^|[;,])[\t\n\f\r ]*frame-ancestors(?:$|(?=[;,])|[\t\n\f\r ][^;,]*)/gi, '');
				if (sModifiedValue !== oHeader.value) {
					м_Журнал.Окак(`[Чат] Меняю заголовок Content-Security-Policy\n${oHeader.value}\n${sModifiedValue}`);
					oHeader.value = sModifiedValue;
					bModified = true;
				}
			}
		}
		return bModified ? {
			responseHeaders: oResponse.responseHeaders
		} : void 0;
	});
	const обработатьСообщениеЧата = ДобавитьОбработчикИсключений((оСообщение, оОтправитель, фОтветить) => {
		if (оСообщение.сЗапрос !== 'ВставитьСторонниеРасширения') {
			return false;
		}
		if ((оОтправитель.tab ? оОтправитель.tab.id : chrome.tabs.TAB_ID_NONE) !== г_чИдВкладки) {
			return false;
		}
		м_Журнал.Вот('[Чат] Получен запрос на вставку сторонних расширений');
		chrome.management.getAll(ДобавитьОбработчикИсключений(моРасширения => {
			if (chrome.runtime.lastError) {
				throw new Error(`Не удалось получить список расширений: ${chrome.runtime.lastError.message}`);
			}
			//! Send to content script a list of known browser extensions that are currently installed and enabled in the browser.
			//! These extensions will be loaded into <iframe> (_узЧат). See вставитьСторонниеРасширения() in content.js.
			//! Chrome itself cannot load installed extensions into another extension.
			//! See https://bugs.chromium.org/p/chromium/issues/detail?id=599167
						оСообщение.сСторонниеРасширения = '';
			for (let оРасширение of моРасширения) {
				if (оРасширение.enabled) {
					switch (оРасширение.id) {
					  
						//! BetterTTV browser extension
						//! https://betterttv.com/
						//! https://chrome.google.com/webstore/detail/ajopnjidmegmdimjlfnijceegpefgped
						case 'ajopnjidmegmdimjlfnijceegpefgped':
 //! Chrome
											  case 'deofbbdfofnmppcjbhjibgodpcdchjii':
 //! Opera
											  case 'icllegkipkooaicfmdfaloehobmglglb':
						//! Edge
						оСообщение.сСторонниеРасширения += 'BTTV ';
						break;

						//! FrankerFaceZ browser extension
						//! https://www.frankerfacez.com/
						//! https://chrome.google.com/webstore/detail/fadndhdgpmmaapbmfcknlfgcflmmmieb
											  case 'fadndhdgpmmaapbmfcknlfgcflmmmieb':
 //! Chrome
											  case 'djkpepcignmpfblhbfpmlhoindhndkdj':
						//! Opera
						оСообщение.сСторонниеРасширения += 'FFZ ';
						break;

						//! FFZ Add-On Pack browser extension
						//! https://ffzap.com/
						//! https://chrome.google.com/webstore/detail/aiimboljphncldaakcnapfolgnjonlea
											  case 'aiimboljphncldaakcnapfolgnjonlea':
						//! Chrome
						оСообщение.сСторонниеРасширения += 'FFZAP ';
					}
				}
			}
			м_Журнал.Вот(`[Чат] Посылаю ответ на вставку сторонних расширений: ${оСообщение.сСторонниеРасширения}`);
			try {
				фОтветить(оСообщение);
			} catch (пИсключение) {
				м_Журнал.Ой(`[Чат] Ошибка при посылке ответа: ${пИсключение}`);
			}
		}));
		return true;
	});
	function ВставитьПанель() {
		if (_узЧат) {
			return;
		}
		const сАдрес = м_Twitch.ПолучитьАдресПанелиЧата();
		м_Журнал.Вот(`[Чат] Вставляю iframe ${сАдрес}`);
		if (м_Настройки.Получить('лПолноценныйЧат')) {
			chrome.webRequest.onHeadersReceived.addListener(onHeadersReceived, {
				urls: [ 'https://www.twitch.tv/popout/*/chat', 'https://www.twitch.tv/popout/*/chat?*', 'https://www.twitch.tv/*/chat?*' ],
				types: [ 'sub_frame' ],
				tabId: г_чИдВкладки
			}, [ 'responseHeaders', 'blocking' ]);
		}
		chrome.runtime.onMessage.addListener(обработатьСообщениеЧата);
		_узЧат = document.createElement('iframe');
		_узЧат.src = сАдрес;
		_узЧат.id = 'чат';
		_узЧат.width = м_Настройки.Получить('чШиринаПанелиЧата');
		_узЧат.height = м_Настройки.Получить('чВысотаПанелиЧата');
		Узел('размерчата').insertAdjacentElement('afterend', _узЧат);
	}
	function УдалитьПанель() {
		if (_узЧат) {
			м_Журнал.Вот(`[Чат] Удаляю iframe ${_узЧат.src}`);
			chrome.webRequest.onHeadersReceived.removeListener(onHeadersReceived);
			chrome.runtime.onMessage.removeListener(обработатьСообщениеЧата);
			_узЧат.remove();
			_узЧат = null;
		}
	}
	function ПрименитьАдрес() {
		if (_узЧат) {
			м_Журнал.Окак('[Чат] Меняю адрес iframe');
			УдалитьПанель();
			ВставитьПанель();
		}
	}
	function ПрименитьСостояниеПанели() {
		const чСостояние = м_Настройки.Получить('чСостояниеЧата');
		м_Журнал.Окак(`[Чат] Новое состояние панели: ${чСостояние}`);
		ОтменитьПеретаскиваниеПанели();
		switch (чСостояние) {
		  case ЧАТ_ВЫГРУЖЕН:
			document.body.classList.add('скрытьчат');
			УдалитьПанель();
			break;

		  case ЧАТ_СКРЫТ:
			ВставитьПанель();
			document.body.classList.add('скрытьчат');
			break;

		  case ЧАТ_ПАНЕЛЬ:
			ВставитьПанель();
			document.body.classList.remove('скрытьчат');
			break;

		  default:
			Проверить(false);
		}
	}
	function ПрименитьПоложениеПанели() {
		ОтменитьПеретаскиваниеПанели();
		const оКлассы = document.body.classList;
		if (м_Настройки.Получить('лАвтоПоложениеЧата')) {
			оКлассы.add('автоположениечата');
			оКлассы.toggle('чатвверху', м_Настройки.Получить('чВертикальноеПоложениеЧата') === ВЕРХНЯЯ_СТОРОНА);
			оКлассы.toggle('чатслева', м_Настройки.Получить('чГоризонтальноеПоложениеЧата') === ЛЕВАЯ_СТОРОНА);
		} else {
			const чПоложение = м_Настройки.Получить('чПоложениеПанелиЧата');
			оКлассы.remove('автоположениечата');
			оКлассы.toggle('чатвверху', чПоложение === ВЕРХНЯЯ_СТОРОНА);
			оКлассы.toggle('чатсправа', чПоложение === ПРАВАЯ_СТОРОНА);
			оКлассы.toggle('чатвнизу', чПоложение === НИЖНЯЯ_СТОРОНА);
			оКлассы.toggle('чатслева', чПоложение === ЛЕВАЯ_СТОРОНА);
		}
	}
	function СохранитьИПрименитьСостояниеЗакрытойПанели(чНовоеСостояние) {
		м_Настройки.Изменить('чСостояниеЗакрытогоЧата', чНовоеСостояние);
		const чСостояние = м_Настройки.Получить('чСостояниеЧата');
		if ((чСостояние === ЧАТ_ВЫГРУЖЕН || чСостояние === ЧАТ_СКРЫТ) && чСостояние !== чНовоеСостояние) {
			м_Настройки.Изменить('чСостояниеЧата', чНовоеСостояние);
			ПрименитьСостояниеПанели();
		}
	}
	function ПереключитьСостояниеПанели() {
		const лПолноэкранныйРежим = м_ПолноэкранныйРежим.Включен();
		switch (м_Настройки.Получить('чСостояниеЧата')) {
		  case ЧАТ_ВЫГРУЖЕН:
		  case ЧАТ_СКРЫТ:
			м_Настройки.Изменить('чСостояниеЧата', ЧАТ_ПАНЕЛЬ, лПолноэкранныйРежим);
			break;

		  case ЧАТ_ПАНЕЛЬ:
			м_Настройки.Изменить('чСостояниеЧата', лПолноэкранныйРежим ? ЧАТ_СКРЫТ : м_Настройки.Получить('чСостояниеЗакрытогоЧата'), лПолноэкранныйРежим);
			break;

		  default:
			Проверить(false);
		}
		ПрименитьСостояниеПанели();
	}
	function ПереключитьПоложениеПанели() {
		let чПоложение;
		if (м_Настройки.Получить('лАвтоПоложениеЧата')) {
			м_Настройки.Изменить('лАвтоПоложениеЧата', false);
			чПоложение = ПолучитьПоложениеПанели();
		} else {
			чПоложение = м_Настройки.Получить('чПоложениеПанелиЧата');
		}
		switch (чПоложение) {
		  case ВЕРХНЯЯ_СТОРОНА:
			м_Настройки.Изменить('чПоложениеПанелиЧата', ПРАВАЯ_СТОРОНА);
			break;

		  case ПРАВАЯ_СТОРОНА:
			м_Настройки.Изменить('чПоложениеПанелиЧата', НИЖНЯЯ_СТОРОНА);
			break;

		  case НИЖНЯЯ_СТОРОНА:
			м_Настройки.Изменить('чПоложениеПанелиЧата', ЛЕВАЯ_СТОРОНА);
			break;

		  case ЛЕВАЯ_СТОРОНА:
			м_Настройки.Изменить('чПоложениеПанелиЧата', ВЕРХНЯЯ_СТОРОНА);
			break;

		  default:
			Проверить(false);
		}
		ПрименитьПоложениеПанели();
	}
	function ОбработатьПеретаскиваниеПанели(оПараметры) {
		if (оПараметры.лОтмена) {
			return;
		}
		const чПоложение = ПолучитьПоложениеПанели();
		if (оПараметры.чШаг !== 1 && оПараметры._чНачальноеПоложение !== чПоложение) {
			м_Журнал.Ой(`[Чат] Положение перетаскиваемой панели изменилось с ${оПараметры._чНачальноеПоложение} на ${чПоложение}`);
			ОтменитьПеретаскиваниеПанели();
			return;
		}
		switch (оПараметры.чШаг) {
		  case 1:
			оПараметры._чНачальноеПоложение = чПоложение;
			if (чПоложение === ПРАВАЯ_СТОРОНА || чПоложение === ЛЕВАЯ_СТОРОНА) {
				оПараметры._чНачальныйРазмер = Number.parseInt(getComputedStyle(_узЧат).width, 10);
			} else {
				оПараметры._чНачальныйРазмер = Number.parseInt(getComputedStyle(_узЧат).height, 10);
			}
			break;

		  case 2:
			if (чПоложение === ПРАВАЯ_СТОРОНА || чПоложение === ЛЕВАЯ_СТОРОНА) {
				if (оПараметры.лИзмениласьX) {
					const чМаксРазмер = Number.parseInt(getComputedStyle(Узел('проигрывательичат')).width, 10) - Number.parseInt(getComputedStyle(Узел('проигрыватель')).minWidth, 10);
					_узЧат.width = Math.max(Math.min(чПоложение === ЛЕВАЯ_СТОРОНА ? оПараметры._чНачальныйРазмер + оПараметры.чИзменениеX : оПараметры._чНачальныйРазмер - оПараметры.чИзменениеX, чМаксРазмер), 0);
				}
			} else if (оПараметры.лИзмениласьY) {
				const чМаксРазмер = Number.parseInt(getComputedStyle(Узел('проигрывательичат')).height, 10) - Number.parseInt(getComputedStyle(Узел('проигрыватель')).minHeight, 10);
				_узЧат.height = Math.max(Math.min(чПоложение === ВЕРХНЯЯ_СТОРОНА ? оПараметры._чНачальныйРазмер + оПараметры.чИзменениеY : оПараметры._чНачальныйРазмер - оПараметры.чИзменениеY, чМаксРазмер), 0);
			}
			break;

		  case 3:
			if (чПоложение === ПРАВАЯ_СТОРОНА || чПоложение === ЛЕВАЯ_СТОРОНА) {
				м_Настройки.Изменить('чШиринаПанелиЧата', Number.parseInt(getComputedStyle(_узЧат).width, 10));
			} else {
				м_Настройки.Изменить('чВысотаПанелиЧата', Number.parseInt(getComputedStyle(_узЧат).height, 10));
			}
			break;

		  default:
			Проверить(false);
		}
	}
	function ОтменитьПеретаскиваниеПанели() {
		м_Тащилка.ОтменитьПеретаскивание('размерчата');
	}
	ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме = -1;
	function ОбработатьИзменениеПолноэкранногоРежима(лВключен) {
		if (лВключен) {
			if (ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме === -1) {
				ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме = м_Настройки.Получить('чСостояниеЧата');
				if (ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме === ЧАТ_ПАНЕЛЬ) {
					м_Настройки.Изменить('чСостояниеЧата', ЧАТ_СКРЫТ, true);
					ПрименитьСостояниеПанели();
				}
			}
		} else if (ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме !== -1) {
			if (ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме === ЧАТ_ПАНЕЛЬ) {
				м_Настройки.Изменить('чСостояниеЧата', ЧАТ_ПАНЕЛЬ);
				ПрименитьСостояниеПанели();
			} else if (м_Настройки.Получить('чСостояниеЧата') === ЧАТ_СКРЫТ && м_Настройки.Получить('чСостояниеЗакрытогоЧата') === ЧАТ_ВЫГРУЖЕН) {
				м_Настройки.Изменить('чСостояниеЧата', ЧАТ_ВЫГРУЖЕН);
				ПрименитьСостояниеПанели();
			}
			ОбработатьИзменениеПолноэкранногоРежима.чСостояниеВОбычномРежиме = -1;
		}
	}
	function Восстановить() {
		ПрименитьСостояниеПанели();
		ПрименитьПоложениеПанели();
		м_События.ДобавитьОбработчик('тащилка-перетаскивание-размерчата', ОбработатьПеретаскиваниеПанели);
		м_События.ДобавитьОбработчик('полноэкранныйрежим-изменен', ОбработатьИзменениеПолноэкранногоРежима);
	}
	return {
		Восстановить,
		ПрименитьПоложениеПанели,
		ПрименитьАдрес,
		СохранитьИПрименитьСостояниеЗакрытойПанели,
		ПереключитьСостояниеПанели,
		ПереключитьПоложениеПанели
	};
})();

const м_Аудиоустройство = (() => {
	const _oMediaElement = document.getElementById('глаз');
	function ЭтоНастоящееАудиоустройство(сИд) {
		return сИд !== 'default' && сИд !== 'communications';
	}
	function ПолучитьИдТекущегоАудиоустройства() {
		Проверить(_oMediaElement.parentNode);
		const сИд = _oMediaElement.sinkId;
		м_Журнал.Вот(`[Аудиоустройства] Текущее аудиоустройство: ${сИд}`);
		return сИд !== '' ? сИд : 'default';
	}
	function ОбновитьСписокАудиоустройств() {
		const узСписокАудиоустройств = Узел('аудиоустройства-список');
		узСписокАудиоустройств.length = 0;
		м_Журнал.Окак('[Аудиоустройства] Получаю список медиаустройств');
		navigator.mediaDevices.enumerateDevices().then(моМедиаустройства => {
			м_Журнал.Вот(`[Аудиоустройства] Найдено медиаустройств: ${моМедиаустройства.length}`);
			let кАудиоустройств = 0, кНастоящихАудиоустройств = 0;
			for (let оМедиаустройство of моМедиаустройства) {
				м_Журнал.Вот(`[Аудиоустройства] Найдено медиаустройство kind=${оМедиаустройство.kind} deviceId=${оМедиаустройство.deviceId} groupId=${оМедиаустройство.groupId} label=${оМедиаустройство.label}`);
				if (оМедиаустройство.kind === 'audiooutput') {
					++кАудиоустройств;
					if (ЭтоНастоящееАудиоустройство(оМедиаустройство.deviceId)) {
						++кНастоящихАудиоустройств;
					}
					if (оМедиаустройство.label !== '') {
						узСписокАудиоустройств.add(new Option(оМедиаустройство.label, оМедиаустройство.deviceId, false, false));
					}
				}
			}
			узСписокАудиоустройств.value = ПолучитьИдТекущегоАудиоустройства();
			if (узСписокАудиоустройств.length === 0 && кАудиоустройств !== 0) {
				if (ВЕРСИЯ_ДВИЖКА_БРАУЗЕРА <= 68 && chrome.extension.inIncognitoContext) {
					ПоказатьЭлемент('аудиоустройства', false);
					return;
				}
				ПоказатьЭлемент('аудиоустройства-доступ', true);
				ПоказатьЭлемент(узСписокАудиоустройств, false);
				м_События.ДобавитьОбработчик('управление-левыйщелчок', ОбработатьПолучениеДоступа);
			} else {
				ПоказатьЭлемент('аудиоустройства-доступ', false);
				ПоказатьЭлемент(узСписокАудиоустройств, true);
				узСписокАудиоустройств.addEventListener('change', ОбработатьВыборАудиоустройства);
			}
			if (кНастоящихАудиоустройств > 1) {
				ПоказатьЭлемент('аудиоустройства', true);
			}
		}, пПричина => {
			м_Журнал.Ой(`[Аудиоустройства] Не удалось получить список медиаустройств: ${пПричина}`);
		}).catch(м_Отладка.ПойманоИсключение);
	}
	function ОбработатьПолучениеДоступа({сПозывной}) {
		if (сПозывной !== 'аудиоустройства-доступ') {
			return;
		}
		м_Журнал.Окак('[Аудиоустройства] Запрашиваю разрешение contentSettings');
		chrome.permissions.request({
			permissions: [ 'contentSettings' ]
		}, ДобавитьОбработчикИсключений(лРазрешениеПолучено => {
			if (!лРазрешениеПолучено) {
				м_Журнал.Ой(`[Аудиоустройства] Разрешение не получено: ${chrome.runtime.lastError && chrome.runtime.lastError.message}`);
				return;
			}
			м_Журнал.Окак('[Аудиоустройства] Даю расширению доступ к аудиоустройствам');
			chrome.contentSettings.microphone.set({
				primaryPattern: `*://${chrome.runtime.id}/*`,
				setting: 'allow',
				scope: chrome.extension.inIncognitoContext ? 'incognito_session_only' : 'regular'
			}, ДобавитьОбработчикИсключений(() => {
				if (chrome.runtime.lastError) {
					м_Журнал.Ой(`[Аудиоустройства] Не удалось дать доступ: ${chrome.runtime.lastError.message}`);
				}
				ОбновитьСписокАудиоустройств();
			}));
		}));
	}
	const ОбработатьВыборАудиоустройства = ДобавитьОбработчикИсключений(оСобытие => {
		if (оСобытие.target.selectedIndex === -1) {
			return;
		}
		м_Журнал.Окак(`[Аудиоустройства] Меняю аудиоустройство с ${_oMediaElement.sinkId} на ${оСобытие.target.value} (${оСобытие.target.selectedOptions[0].text})`);
		_oMediaElement.setSinkId(оСобытие.target.value).then(() => {
			м_Журнал.Окак(`[Аудиоустройства] Аудиоустройство изменено на ${_oMediaElement.sinkId}`);
		}, пПричина => {
			м_Журнал.Ой(`[Аудиоустройства] Не удалось изменить аудиоустройство: ${пПричина}`);
			ОбновитьСписокАудиоустройств();
		}).catch(м_Отладка.ПойманоИсключение);
	});
	if (_oMediaElement.setSinkId === void 0) {
		м_Журнал.Ой('[Аудиоустройства] Браузер не поддерживает MediaElement.setSinkId');
	} else {
		if (navigator.mediaDevices.addEventListener === void 0) {
			м_Журнал.Ой('[Аудиоустройства] Браузер не поддерживает mediaDevices.ondevicechange');
		} else {
			navigator.mediaDevices.addEventListener('devicechange', ДобавитьОбработчикИсключений(ОбновитьСписокАудиоустройств));
		}
		ОбновитьСписокАудиоустройств();
	}
})();

const м_Проигрыватель = (() => {
	const ИНТЕРВАЛ_УДАЛЕНИЯ_ВИДЕО = 10;
	const ИСЧЕРПАНИЕ_БУФЕРА = 1 / 25 * 7;
	const ПОВТОР_НЕДОСТУПЕН_ЕСЛИ_ПРОСМОТРЕНО_МЕНЬШЕ_ЧЕМ = 1;
	const ПРОВЕРИТЬ_ДОБАВЛЕНИЕ_СЕГМЕНТА = -1;
	const ПРОВЕРИТЬ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ = -2;
	const ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ = -3;
	const ПРОВЕРИТЬ_ОСТАНОВКА_ВОСПРОИЗВЕДЕНИЯ = -4;
	const ВОСПРОИЗВЕДЕНИЕ_НЕВОЗМОЖНО = 0;
	const ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО = 1;
	const ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО_ПОСЛЕ_ПЕРЕМОТКИ = 2;
	let _oMediaElement;
	let _oMediaSource;
	let _oMediaSourceBuffer = null;
	let _лЕстьВидеодорожка = false;
	let _чВоспроизведениеНачиналось = 0;
	let _лАсинхроннаяОперация = false;
	let _сРазмерБуфера = 'чНачалоВоспроизведения';
	let _лЖдатьЗаполненияБуфера = true;
	let _чСмещениеТрансляции = NaN;
	let _лНужнаПеремотка = false;
	const _оПрямаяТрансляция = {
		ОбработатьSourceOpen() {
			Проверить(_oMediaElement.paused);
			_чВоспроизведениеНачиналось = Math.max(_чВоспроизведениеНачиналось, 1);
			ДобавитьСледующийСегмент();
		},
		ОбработатьProgress() {
			if (!_лАсинхроннаяОперация) {
				НачатьВоспроизведение(ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_ДОБАВЛЕНИЕ_СЕГМЕНТА));
			}
		},
		ОбработатьWaiting() {},
		ОбработатьPlaying() {
			if (м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ && !_oMediaElement.paused) {
				м_Управление.ИзменитьСостояние(СОСТОЯНИЕ_ВОСПРОИЗВЕДЕНИЕ);
			}
		},
		ОбработатьSeeking: ЗАГЛУШКА,
		ОбработатьSeeked: НачатьВоспроизведение,
		ОбработатьEnded() {
			ПерезагрузитьПроигрыватель(СОСТОЯНИЕ_ЗАГРУЗКА);
		},
		ОбработатьTimeUpdate() {
			if (!_oMediaElement.seeking && !_oMediaElement.paused && !_oMediaElement.ended) {
				ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ);
			}
		}
	};
	const _оПовтор = {
		лПауза: true,
		ОбработатьSourceOpen() {
			Проверить(_oMediaElement.paused);
			_чВоспроизведениеНачиналось = Math.max(_чВоспроизведениеНачиналось, 1);
		},
		ОбработатьProgress: ЗАГЛУШКА,
		ОбработатьWaiting: ЗАГЛУШКА,
		ОбработатьPlaying: ЗАГЛУШКА,
		ОбработатьSeeked: ЗАГЛУШКА,
		ОбработатьSeeking() {
			м_Шкала.ЗадатьПросмотрено(_oMediaElement.currentTime);
		},
		ОбработатьEnded() {
			if (!this.лПауза) {
				_oMediaElement.play();
			}
		},
		ОбработатьTimeUpdate() {
			if (!this.лПауза && !_oMediaElement.seeking) {
				this.ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ);
			}
			м_Шкала.ЗадатьПросмотрено(_oMediaElement.currentTime);
		},
		ПроверитьПозициюВоспроизведения(чВремя) {
			Проверить(Number.isFinite(чВремя));
			Проверить(чВремя === ПРОВЕРИТЬ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ || чВремя === ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ || чВремя >= 0);
			const оБуфер = _oMediaElement.buffered;
			const чПоследняяОбласть = оБуфер.length - 1;
			const чТекущееВремя = _oMediaElement.currentTime + 1e-4;
			let чПеремотатьДо = чВремя >= 0 ? чВремя : чТекущееВремя;
			let сПричинаПеремотки = '';
			for (let лНачатьСначала = false; ;) {
				let чНужноДляВоспроизведения = чВремя === ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ ? ИСЧЕРПАНИЕ_БУФЕРА : МИН_РАЗМЕР_БУФЕРА;
				for (let чОбласть = 0; чОбласть <= чПоследняяОбласть; ++чОбласть) {
					if (чПеремотатьДо < оБуфер.start(чОбласть)) {
						чНужноДляВоспроизведения = МИН_РАЗМЕР_БУФЕРА;
						сПричинаПеремотки += 'Перепрыгиваю яму. ';
						чПеремотатьДо = оБуфер.start(чОбласть);
					}
					if (оБуфер.end(чОбласть) - чПеремотатьДо >= чНужноДляВоспроизведения) {
						break;
					}
				}
				if (this.лПауза || чПеремотатьДо < м_Шкала.ПолучитьКонец()) {
					break;
				}
				if (лНачатьСначала) {
					ПоказатьСостояние('Ой', `Бесконечная перемотка Время=${чВремя}`);
					return;
				}
				чПеремотатьДо = м_Шкала.ПолучитьНачало();
				сПричинаПеремотки += 'Начинаю сначала. ';
				лНачатьСначала = true;
			}
			if (чПеремотатьДо !== чТекущееВремя) {
				ПоказатьСостояние('Окак', `${сПричинаПеремотки}Перематываю до ${чПеремотатьДо}`);
				_oMediaElement.currentTime = чПеремотатьДо;
			}
		}
	};
	let _оПоведение = _оПрямаяТрансляция;
	function ПоказатьСостояние(сВажность, сЗапись) {
		const оБуфер = _oMediaSource.sourceBuffers.length !== 0 ? _oMediaSource.sourceBuffers[0] : null;
		const сОбластиБуфера = ПеревестиОбластиВСтроку(оБуфер ? оБуфер.buffered : null);
		const сОбласти = ПеревестиОбластиВСтроку(_oMediaElement.buffered);
		const лОбластиРавны = сОбластиБуфера === сОбласти;
		if (сВажность === 'Вот' && (оБуфер && оБуфер.buffered.length > 1 || _oMediaElement.buffered.length > 1)) {
			сВажность = 'Окак';
		}
		if (_oMediaElement.error || !лОбластиРавны) {
			сВажность = 'Ой';
		}
		м_Журнал[сВажность](`${сЗапись.charAt(0) === '[' ? '' : '[Проигрыватель] '}${сЗапись} •••` + (оБуфер && оБуфер.updating ? ' [U]' : '') + (_oMediaElement.paused ? ' [P]' : '') + (_oMediaElement.seeking ? ' [S]' : '') + (_oMediaElement.ended ? ' [E]' : '') + (_oMediaElement.error ? ` error=${_oMediaElement.error.code}` : '') + (_oMediaElement.src.startsWith('blob:') || _oMediaElement.src.startsWith('mediasource:') ? '' : ` src=${_oMediaElement.src}`) + (_oMediaSource.readyState === 'open' ? '' : ` MSE.readyState=${_oMediaSource.readyState}`) + (_oMediaSource.sourceBuffers.length === 1 ? '' : ` MSE.buffers=${_oMediaSource.sourceBuffers.length}`) + (_oMediaElement.networkState === HTMLMediaElement.NETWORK_LOADING ? '' : ` networkState=${_oMediaElement.networkState}`) + ` readyState=${_oMediaElement.readyState}` + ` currentTime=${_oMediaElement.currentTime}` + (лОбластиРавны ? ` buffered=${сОбласти}` : ` MSE.buffered=${сОбластиБуфера} buffered=${сОбласти}`) + (_oMediaElement.duration === Infinity ? '' : ` duration=${_oMediaElement.duration}`) + ` seekable=${ПеревестиОбластиВСтроку(_oMediaElement.seekable)}` + ` played=${ПеревестиОбластиВСтроку(_oMediaElement.played)}`);
	}
	function ПеревестиОбластиВСтроку(оОбласти) {
		let сРезультат = '';
		if (оОбласти && оОбласти.length !== 0) {
			let чОбласть = Math.max(оОбласти.length - 20, 0);
			if (чОбласть !== 0) {
				сРезультат = `[${чОбласть}]`;
			}
			for (;чОбласть < оОбласти.length; ++чОбласть) {
				if (чОбласть !== 0) {
					сРезультат += `(${(оОбласти.start(чОбласть) - оОбласти.end(чОбласть - 1)).toFixed(3)})`;
				}
				сРезультат += `${оОбласти.start(чОбласть)}-${оОбласти.end(чОбласть)}`;
			}
		}
		return сРезультат;
	}
	function ПолучитьЗаполненностьБуфера(оБуфер = _oMediaElement.buffered) {
		let чПросмотрено = 0;
		let чНеПросмотрено = 0;
		if (оБуфер.length !== 0) {
			const чНачало = оБуфер.start(0);
			const чКонец = оБуфер.end(оБуфер.length - 1);
			const чТекущееВремя = Ограничить(_oMediaElement.currentTime, чНачало, чКонец);
			чПросмотрено = чТекущееВремя - чНачало;
			чНеПросмотрено = чКонец - чТекущееВремя;
		}
		return {
			чПросмотрено,
			чНеПросмотрено
		};
	}
	function ПолучитьКоличествоПропущенныхКадров() {
		return _oMediaElement.getVideoPlaybackQuality ? _oMediaElement.getVideoPlaybackQuality() : {
			totalVideoFrames: _oMediaElement.webkitDecodedFrameCount,
			droppedVideoFrames: _oMediaElement.webkitDroppedFrameCount
		};
	}
	function ПолучитьПозициюВоспроизведенияТрансляции(лДляКлипа) {
		if (Number.isNaN(_чСмещениеТрансляции)) {
			return -1;
		}
		СледитьЗаОшибками();
		let чПозиция = _oMediaElement.currentTime;
		if (лДляКлипа && м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ПОВТОР) {
			чПозиция = м_Шкала.ПолучитьКонец();
		}
		if (!лДляКлипа && чПозиция === 0 && _oMediaSourceBuffer !== null) {
			const оБуфер = _oMediaSourceBuffer.buffered;
			if (оБуфер.length !== 0) {
				чПозиция = оБуфер.start(0);
			}
		}
		return чПозиция === 0 ? -1 : Math.max(чПозиция + _чСмещениеТрансляции, 0);
	}
	function РасчитатьСмещениеТрансляции(оСегмент) {
		if (Number.isFinite(оСегмент.пДанные.чПозицияКодирования) && Number.isFinite(оСегмент.пДанные.чПозицияТрансляции)) {
			const чСмещениеТрансляции = оСегмент.пДанные.чПозицияТрансляции - оСегмент.пДанные.чПозицияКодирования;
			м_Журнал[Math.abs(чСмещениеТрансляции - _чСмещениеТрансляции) > 2 ? 'Ой' : 'Вот'](`[Проигрыватель] Смещение трансляции: ${м_Журнал.F1(чСмещениеТрансляции)}с`);
			_чСмещениеТрансляции = чСмещениеТрансляции;
		}
	}
	function ПоказатьЗадержкуТрансляции(оСегмент) {
		if (м_Статистика.ОкноПоказано() && Number.isFinite(оСегмент.пДанные.чПозицияКодирования) && Number.isFinite(оСегмент.пДанные.чВремяКодирования) && _oMediaElement.currentTime !== 0) {
			const чПолучение = (performance.now() + г_чТочноеВремя - оСегмент.пДанные.чВремяКодирования) / 1e3;
			const чВоспроизведение = оСегмент.пДанные.чПозицияКодирования - _oMediaElement.currentTime;
			const сЗадержка = `${чПолучение.toFixed(1)} + ${чВоспроизведение.toFixed(1)} = ${(чПолучение + чВоспроизведение).toFixed(1)}`;
			м_Журнал[чПолучение > 0 && чВоспроизведение > -.1 ? 'Вот' : 'Ой'](`[Проигрыватель] Задержка трансляции: ${сЗадержка}с`);
			Узел('статистика-задержкатрансляции').textContent = сЗадержка;
		}
	}
	function ПрименитьНастройкиЗвука() {
		_oMediaElement.volume = м_Настройки.Получить('чГромкость2') / МАКСИМАЛЬНАЯ_ГРОМКОСТЬ;
		_oMediaElement.muted = м_Настройки.Получить('лПриглушить');
	}
	function ПерезагрузитьИЖдатьЗаполненияБуфера(чНовоеСостояние) {
		_лЖдатьЗаполненияБуфера = true;
		ПерезагрузитьПроигрыватель(чНовоеСостояние);
	}
	function ПерезагрузитьПроигрыватель(чНовоеСостояние) {
		ПоказатьСостояние('Окак', 'Перезагрузка проигрывателя');
		м_Управление.ИзменитьСостояние(чНовоеСостояние);
		_оПоведение = _оПрямаяТрансляция;
		_oMediaSourceBuffer = null;
		_лНужнаПеремотка = false;
		подключитьMediaSourceКMediaElement();
	}
	function СледитьЗаОшибками() {
		if (_oMediaElement.error) {
			м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0206');
		}
	}
	const СледитьЗаСобытиямиMediaSource = ДобавитьОбработчикИсключений(оСобытие => {
		СледитьЗаОшибками();
		const сЗапись = `[MediaSource] ${оСобытие.type}`;
		switch (оСобытие.type) {
		  case 'sourceopen':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьSourceOpen();
			break;

		  case 'sourceended':
		  case 'sourceclose':
			ПоказатьСостояние('Вот', сЗапись);
			break;

		  default:
			м_Журнал.Вот(сЗапись);
		}
	});
	const СледитьЗаСобытиямиMediaElement = ДобавитьОбработчикИсключений(оСобытие => {
		СледитьЗаОшибками();
		const сЗапись = `[MediaElement] ${оСобытие.type}`;
		switch (оСобытие.type) {
		  case 'loadstart':
			ПоказатьСостояние('Вот', `${сЗапись} src=${_oMediaElement.src} currentSrc=${_oMediaElement.currentSrc}`);
			break;

		  case 'progress':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьProgress();
			break;

		  case 'abort':
			ПоказатьСостояние('Вот', сЗапись);
			break;

		  case 'waiting':
			ПоказатьСостояние('Окак', сЗапись);
			_оПоведение.ОбработатьWaiting();
			break;

		  case 'playing':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьPlaying();
			break;

		  case 'seeking':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьSeeking();
			break;

		  case 'seeked':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьSeeked();
			break;

		  case 'ended':
			ПоказатьСостояние('Вот', сЗапись);
			_оПоведение.ОбработатьEnded();
			break;

		  case 'timeupdate':
			м_Журнал.Вот(`${сЗапись} readyState=${_oMediaElement.readyState} currentTime=${_oMediaElement.currentTime} НеПросмотрено=${м_Журнал.F2(ПолучитьЗаполненностьБуфера().чНеПросмотрено)}`);
			_оПоведение.ОбработатьTimeUpdate();
			break;

		  case 'volumechange':
			м_Журнал.Вот(`${сЗапись} volume=${_oMediaElement.volume} muted=${_oMediaElement.muted}`);
			break;

		  default:
			м_Журнал.Вот(сЗапись);
		}
	});
	function ПроверитьПозициюВоспроизведения(чИсточникПроверки, чБудетДобавлено = 0) {
		const оБуфер = _oMediaElement.buffered;
		const чПоследняяОбласть = оБуфер.length - 1;
		if (чПоследняяОбласть === -1) {
			return false;
		}
		const чТекущееВремя = _oMediaElement.currentTime + 1e-4;
		let чПеремотатьДо = Math.max(чТекущееВремя, оБуфер.start(0));
		let сПричинаПеремотки = '';
		const чНеПросмотрено = оБуфер.end(чПоследняяОбласть) - чПеремотатьДо;
		if (чИсточникПроверки === ПРОВЕРИТЬ_ДОБАВЛЕНИЕ_СЕГМЕНТА) {
			const чРазмерБуфера = м_Настройки.Получить('чМаксРазмерБуфера');
			const чПереполнение = чРазмерБуфера + м_Настройки.Получить('чРастягиваниеБуфера');
			if (чНеПросмотрено <= чПереполнение) {
				return;
			}
			if (_чВоспроизведениеНачиналось === 2) {
				м_События.ПослатьСобытие('проигрыватель-переполненбуфер', чНеПросмотрено - чРазмерБуфера);
			}
			сПричинаПеремотки += `Переполнен буфер проигрывателя ${чНеПросмотрено.toFixed(2)}с > ${чПереполнение}с. `;
			чПеремотатьДо = оБуфер.end(чПоследняяОбласть) - чРазмерБуфера - .1;
		}
		if (чИсточникПроверки === ПРОВЕРИТЬ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ && _чВоспроизведениеНачиналось !== 2) {
			_чВоспроизведениеНачиналось = 2;
			const чПереполнение = м_Настройки.Получить('чМаксРазмерБуфера') + м_Статистика.ПолучитьTargetDuration() / 2;
			if (чНеПросмотрено > чПереполнение) {
				сПричинаПеремотки += `Превышена задержка трансляции ${чНеПросмотрено.toFixed(2)}с > ${чПереполнение}с. `;
				чПеремотатьДо = оБуфер.end(чПоследняяОбласть) - чПереполнение;
			}
		}
		Проверить(ИСЧЕРПАНИЕ_БУФЕРА < МИН_РАЗМЕР_БУФЕРА);
		let чНужноДляВоспроизведения = чИсточникПроверки === ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ ? ИСЧЕРПАНИЕ_БУФЕРА : чИсточникПроверки === ПРОВЕРИТЬ_ОСТАНОВКА_ВОСПРОИЗВЕДЕНИЯ ? Infinity : МИН_РАЗМЕР_БУФЕРА;
		let лВоспроизведениеВозможно = _oMediaSource.readyState === 'ended';
		let чДоКонцаОбласти;
		for (let чОбласть = 0; чОбласть <= чПоследняяОбласть; ++чОбласть) {
			if (чПеремотатьДо < оБуфер.start(чОбласть)) {
				чНужноДляВоспроизведения = МИН_РАЗМЕР_БУФЕРА;
				сПричинаПеремотки += 'Перепрыгиваю яму. ';
				чПеремотатьДо = оБуфер.start(чОбласть);
			}
			чДоКонцаОбласти = оБуфер.end(чОбласть) - чПеремотатьДо;
			if (чДоКонцаОбласти >= чНужноДляВоспроизведения) {
				лВоспроизведениеВозможно = true;
				break;
			}
		}
		if (!лВоспроизведениеВозможно && !_oMediaElement.paused) {
			БуферИсчерпан(чДоКонцаОбласти, чНеПросмотрено, чБудетДобавлено);
		}
		if ((лВоспроизведениеВозможно || чИсточникПроверки === ПРОВЕРИТЬ_ДОБАВЛЕНИЕ_СЕГМЕНТА) && (чПеремотатьДо !== чТекущееВремя || _лНужнаПеремотка)) {
			if (чПеремотатьДо === чТекущееВремя) {
				чПеремотатьДо = _oMediaElement.currentTime;
			}
			ПоказатьСостояние(сПричинаПеремотки ? 'Ой' : 'Окак', `${сПричинаПеремотки}Перематываю до ${чПеремотатьДо}`);
			_лНужнаПеремотка = false;
			_oMediaElement.currentTime = чПеремотатьДо;
			return ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО_ПОСЛЕ_ПЕРЕМОТКИ;
		}
		return лВоспроизведениеВозможно ? ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО : ВОСПРОИЗВЕДЕНИЕ_НЕВОЗМОЖНО;
	}
	function НачатьВоспроизведение(чПроверка) {
		if (_oMediaElement.seeking || чПроверка === ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО_ПОСЛЕ_ПЕРЕМОТКИ || !_oMediaElement.paused || _oMediaElement.ended) {
			return;
		}
		if (_лЖдатьЗаполненияБуфера && _oMediaSource.readyState !== 'ended') {
			const {чНеПросмотрено} = ПолучитьЗаполненностьБуфера();
			const чРазмерБуфера = м_Настройки.Получить(_сРазмерБуфера);
			if (чНеПросмотрено < чРазмерБуфера) {
				м_Журнал.Вот(`[Проигрыватель] В буфере не просмотрено ${м_Журнал.F3(чНеПросмотрено)}с < ${чРазмерБуфера}с`);
				return;
			}
			м_Журнал.Окак(`[Проигрыватель] В буфере не просмотрено ${м_Журнал.F3(чНеПросмотрено)}с >= ${чРазмерБуфера}с`);
		} else {
			м_Журнал.Окак('[Проигрыватель] Не нужно ждать заполнения буфера');
		}
		switch (ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ)) {
		  case ВОСПРОИЗВЕДЕНИЕ_НЕВОЗМОЖНО:
			ПоказатьСостояние('Ой', `Не найдена область >= ${МИН_РАЗМЕР_БУФЕРА}с для начала воспроизведения`);
			_лЖдатьЗаполненияБуфера = true;
			break;

		  case ВОСПРОИЗВЕДЕНИЕ_ВОЗМОЖНО:
			ПоказатьСостояние('Окак', 'Начало воспроизведения');
			_лЖдатьЗаполненияБуфера = true;
			_oMediaElement.play();
			м_Управление.ИзменитьСостояние(СОСТОЯНИЕ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ);
		}
	}
	function ОстановитьВоспроизведение(чНовоеСостояние) {
		if (чНовоеСостояние !== void 0) {
			м_Управление.ИзменитьСостояние(чНовоеСостояние);
		}
		_oMediaElement.pause();
	}
	function БуферИсчерпан(чДоКонцаПоследнейОбласти, чНеПросмотрено, чБудетДобавлено) {
		Проверить(_oMediaSource.readyState !== 'ended');
		Проверить(чДоКонцаПоследнейОбласти < МИН_РАЗМЕР_БУФЕРА);
		const лДосрочно = чНеПросмотрено > 1;
		м_Статистика.ИсчерпанБуферПроигрывателя(лДосрочно);
		_сРазмерБуфера = 'чМаксРазмерБуфера';
		const чРазмерБуфера = м_Настройки.Получить(_сРазмерБуфера);
		if (чДоКонцаПоследнейОбласти + чБудетДобавлено >= МИН_РАЗМЕР_БУФЕРА && чНеПросмотрено + чБудетДобавлено >= чРазмерБуфера) {
			ПоказатьСостояние(лДосрочно ? 'Ой' : 'Окак', `Буфер исчерпан, остановка не нужна БудетДобавлено=${м_Журнал.F3(чБудетДобавлено)}с ДоКонцаПоследнейОбласти=${м_Журнал.F3(чДоКонцаПоследнейОбласти)}с НеПросмотрено=${м_Журнал.F3(чНеПросмотрено)}с РазмерБуфера=${чРазмерБуфера}с`);
		} else {
			ПоказатьСостояние(лДосрочно ? 'Ой' : 'Окак', `Приостанавливаю воспроизведение для заполнения буфера ДоКонцаПоследнейОбласти=${м_Журнал.F3(чДоКонцаПоследнейОбласти)}с НеПросмотрено=${м_Журнал.F3(чНеПросмотрено)}с РазмерБуфера=${чРазмерБуфера}с`);
			_лНужнаПеремотка = true;
			ОстановитьВоспроизведение(СОСТОЯНИЕ_ЗАГРУЗКА);
		}
	}
	function ЗавершитьПоток(оСегмент) {
		ПоказатьСостояние('Окак', `Сегмент ${оСегмент.чНомер} вызвал окончание потока`);
		if (_oMediaElement.buffered.length === 0 || _oMediaElement.paused && ПолучитьЗаполненностьБуфера().чНеПросмотрено < ИСЧЕРПАНИЕ_БУФЕРА + .1) {
			ПерезагрузитьИЖдатьЗаполненияБуфера(СОСТОЯНИЕ_ЗАГРУЗКА);
		} else {
			_лЖдатьЗаполненияБуфера = typeof оСегмент.пДанные == 'number' || !_oMediaElement.seeking && _oMediaElement.paused;
			_oMediaSource.endOfStream();
			НачатьВоспроизведение();
		}
	}
	function УдалитьПросмотренноеВидео(оСегмент) {
		СледитьЗаОшибками();
		let чДлительностьПовтора = м_Настройки.Получить('чДлительностьПовтора2');
		if (чДлительностьПовтора === АВТОНАСТРОЙКА) {
			return Promise.resolve(оСегмент);
		}
		const {чПросмотрено, чНеПросмотрено} = ПолучитьЗаполненностьБуфера(_oMediaSourceBuffer.buffered);
		let чУдалитьДо;
		if (чПросмотрено < чДлительностьПовтора + ИНТЕРВАЛ_УДАЛЕНИЯ_ВИДЕО) {
			return Promise.resolve(оСегмент);
		}
		чУдалитьДо = _oMediaElement.currentTime - чДлительностьПовтора;
		return new Promise((фВыполнить, фОтказаться) => {
			ПоказатьСостояние('Вот', `Удаляю просмотренное видео Просмотрено=${м_Журнал.F3(чПросмотрено)}с УдалитьДо=${м_Журнал.F3(чУдалитьДо)}с`);
			_oMediaSourceBuffer.addEventListener('updateend', Удалено);
			let чПрошлоВремени = -performance.now();
			_oMediaSourceBuffer.remove(0, чУдалитьДо);
			function Удалено() {
				try {
					if (_oMediaSourceBuffer === null) {
						фОтказаться(ОтменаОбещания.ОБЕЩАНИЕ_ОТМЕНЕНО);
					} else {
						чПрошлоВремени += performance.now();
						_oMediaSourceBuffer.removeEventListener('updateend', Удалено);
						const {чПросмотрено} = ПолучитьЗаполненностьБуфера(_oMediaSourceBuffer.buffered);
						ПоказатьСостояние(чПрошлоВремени > 100 || чПросмотрено < МИН_РАЗМЕР_БУФЕРА ? 'Ой' : 'Вот', `Просмотренное видео удалено за ${м_Журнал.F0(чПрошлоВремени)}мс Просмотрено=${м_Журнал.F0(чПросмотрено)}с`);
						фВыполнить(оСегмент);
					}
				} catch (пИсключение) {
					фОтказаться(пИсключение);
				}
			}
		});
	}
	function ДобавитьСегментИнициализации(оСегмент) {
		return ДобавитьСегмент(оСегмент, оСегмент.пДанные.мбСегментИнициализации, 'сегмент инициализации');
	}
	function ДобавитьМедиасегмент(оСегмент) {
		return ДобавитьСегмент(оСегмент, оСегмент.пДанные.мбМедиасегмент, 'медиасегмент');
	}
	function ДобавитьСегмент(оСегмент, мбДобавить, сДобавить) {
		СледитьЗаОшибками();
		return new Promise((фВыполнить, фОтказаться) => {
			ПоказатьСостояние('Вот', `Добавляю ${сДобавить} ${оСегмент.чНомер}`);
			_oMediaSourceBuffer.addEventListener('updateend', Добавлено);
			let чПрошлоВремени = -performance.now();
			_oMediaSourceBuffer.appendBuffer(мбДобавить);
			function Добавлено() {
				try {
					if (_oMediaSourceBuffer === null) {
						фОтказаться(ОтменаОбещания.ОБЕЩАНИЕ_ОТМЕНЕНО);
					} else {
						чПрошлоВремени += performance.now();
						_oMediaSourceBuffer.removeEventListener('updateend', Добавлено);
						ПоказатьСостояние(чПрошлоВремени > 100 ? 'Ой' : 'Вот', `Добавлен ${сДобавить} ${оСегмент.чНомер} за ${м_Журнал.F0(чПрошлоВремени)}мс`);
						фВыполнить(оСегмент);
					}
				} catch (пИсключение) {
					фОтказаться(пИсключение);
				}
			}
		});
	}
	function ПроверитьИсчерпаниеБуфера(оСегмент) {
		if (!_oMediaElement.seeking && !_oMediaElement.paused && !_oMediaElement.ended) {
			ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_ВОСПРОИЗВЕДЕНИЕ, оСегмент.чДлительность);
		}
		return оСегмент;
	}
	function СегментБылДобавлен(оСегмент) {
		_лАсинхроннаяОперация = false;
		г_моОчередь.Удалить(оСегмент);
		РасчитатьСмещениеТрансляции(оСегмент);
		if (!(г_моОчередь[0] && г_моОчередь[0].пДанные === СОСТОЯНИЕ_ПОВТОР)) {
			const чПроверка = ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_ДОБАВЛЕНИЕ_СЕГМЕНТА);
			if (!(г_моОчередь[0] && г_моОчередь[0].чОбработка === ОБРАБОТКА_ПРЕОБРАЗОВАН)) {
				НачатьВоспроизведение(чПроверка);
				ПоказатьЗадержкуТрансляции(оСегмент);
			}
		}
		ДобавитьСледующийСегмент();
	}
	const СегментНеБылДобавлен = ДобавитьОбработчикИсключений(пПричина => {
		_лАсинхроннаяОперация = false;
		if (пПричина === 'ДОБАВЛЕНИЕ СЕГМЕНТА ОТЛОЖЕНО') {
			return;
		}
		if (пПричина === ОтменаОбещания.ОБЕЩАНИЕ_ОТМЕНЕНО) {
			м_Журнал.Вот('[Проигрыватель] Отменено добавление сегмента');
		} else {
			throw пПричина;
		}
	});
	function ПредотвратитьПереполнениеОчереди() {
		const {чДлительность} = г_моОчередь.ПодсчитатьПреобразованныеСегменты();
		if (чДлительность >= ПЕРЕПОЛНЕНИЕ_БУФЕРА) {
			м_Журнал.Ой(`[Проигрыватель] MediaSource закрыт слишком долго ${чДлительность}с >= ${ПЕРЕПОЛНЕНИЕ_БУФЕРА}с`);
			Проверить(м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ЗАПУСК || м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ);
			м_Управление.ОстановитьПросмотрТрансляции();
		}
	}
	function НайтиИОбработатьСменуВариантаТрансляции() {
		for (let ы = г_моОчередь.length; --ы >= 0; ) {
			if (г_моОчередь[ы].пДанные === СОСТОЯНИЕ_СМЕНА_ВАРИАНТА && г_моОчередь[ы].чОбработка === ОБРАБОТКА_ПРЕОБРАЗОВАН) {
				г_моОчередь.ПоказатьСостояние();
				do {
					if (г_моОчередь[ы].пДанные === СОСТОЯНИЕ_СМЕНА_ВАРИАНТА || typeof г_моОчередь[ы].пДанные != 'number') {
						г_моОчередь.Удалить(ы);
					}
				} while (--ы >= 0);
				г_моОчередь.ПоказатьСостояние();
				ПерезагрузитьИЖдатьЗаполненияБуфера(СОСТОЯНИЕ_ЗАГРУЗКА);
				break;
			}
		}
	}
	function ДобавитьСледующийСегмент() {
		СледитьЗаОшибками();
		НайтиИОбработатьСменуВариантаТрансляции();
		const оСегмент = г_моОчередь[0];
		if (!оСегмент || оСегмент.чОбработка !== ОБРАБОТКА_ПРЕОБРАЗОВАН) {
			return;
		}
		Проверить(_оПоведение === _оПрямаяТрансляция);
		if (оСегмент.пДанные === СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ) {
			Проверить(_oMediaSource.sourceBuffers.length === 0);
			_чСмещениеТрансляции = NaN;
			м_Управление.ИзменитьСостояние(оСегмент.пДанные);
			г_моОчередь.Удалить(0);
			ДобавитьСледующийСегмент();
			return;
		}
		if (_лАсинхроннаяОперация) {
			return;
		}
		if (оСегмент.пДанные === СОСТОЯНИЕ_ПОВТОР) {
			Проверить(м_Управление.ПолучитьСостояние() !== СОСТОЯНИЕ_ОСТАНОВКА && м_Управление.ПолучитьСостояние() !== СОСТОЯНИЕ_ПОВТОР);
			ЗапуститьПовтор();
			г_моОчередь.Удалить(0);
			ДобавитьСледующийСегмент();
			return;
		}
		const сГотовность = _oMediaSource.readyState;
		if (сГотовность !== 'open') {
			м_Журнал.Вот(`[Проигрыватель] Добавление сегмента ${оСегмент.чНомер} отложено MediaSource.readyState=${сГотовность} MediaElement.src=${_oMediaElement.src}`);
			if (сГотовность === 'closed' && _чВоспроизведениеНачиналось === 0) {
				ПредотвратитьПереполнениеОчереди();
			}
			return;
		}
		if (оСегмент.лРазрыв && _oMediaSource.sourceBuffers.length !== 0) {
			ЗавершитьПоток(оСегмент);
			return;
		}
		if (оСегмент.пДанные === СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ) {
			Проверить(оСегмент.лРазрыв && _oMediaSource.sourceBuffers.length === 0);
			м_Управление.ИзменитьСостояние(оСегмент.пДанные);
			г_моОчередь.Удалить(0);
			ДобавитьСледующийСегмент();
			return;
		}
		if (_oMediaSource.sourceBuffers.length === 0) {
			ДобавитьБуферы(оСегмент);
			м_Управление.ОбновитьКоличествоДорожек(оСегмент.пДанные.лЕстьВидео, оСегмент.пДанные.лЕстьЗвук);
		}
		_лАсинхроннаяОперация = true;
		let оОбещание = УдалитьПросмотренноеВидео(оСегмент).then(ПроверитьИсчерпаниеБуфера);
		if (оСегмент.пДанные.мбСегментИнициализации) {
			оОбещание = оОбещание.then(ДобавитьСегментИнициализации);
		}
		оОбещание.then(ДобавитьМедиасегмент).then(СегментБылДобавлен).catch(СегментНеБылДобавлен);
	}
	function ПеремотатьПовторДо(чПеремотатьДо) {
		Проверить(м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ПОВТОР);
		_оПовтор.ПроверитьПозициюВоспроизведения(чПеремотатьДо);
	}
	function ПеремотатьПовторНа(лКадры, чПеремотатьНа) {
		Проверить(м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ПОВТОР);
		Проверить(Number.isFinite(чПеремотатьНа));
		if (лКадры) {
			чПеремотатьНа *= м_Статистика.ПолучитьДлительностьКадраВСекундах().чМинимальная;
		}
		if (чПеремотатьНа !== 0) {
			ПеремотатьПовторДо(Ограничить(_oMediaElement.currentTime + чПеремотатьНа, м_Шкала.ПолучитьНачало(), м_Шкала.ПолучитьКонец()));
		}
	}
	function ПереключитьПаузу() {
		Проверить(м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ПОВТОР);
		if (_оПовтор.лПауза = !_оПовтор.лПауза) {
			м_Журнал.Окак('[Проигрыватель] Ставлю повтор на паузу');
			_oMediaElement.pause();
		} else {
			м_Журнал.Окак('[Проигрыватель] Снимаю повтор с паузы');
			_оПовтор.ПроверитьПозициюВоспроизведения(ПРОВЕРИТЬ_НАЧАЛО_ВОСПРОИЗВЕДЕНИЯ);
			_oMediaElement.play();
		}
		м_События.ПослатьСобытие('проигрыватель-пауза', _оПовтор.лПауза);
	}
	function ЗадатьСкоростьПовтора(чСкорость) {
		Проверить(м_Управление.ПолучитьСостояние() === СОСТОЯНИЕ_ПОВТОР);
		_oMediaElement.playbackRate = чСкорость;
	}
	function ЗапуститьПовтор() {
		_оПовтор.лПауза = true;
		_оПоведение = _оПовтор;
		ОстановитьВоспроизведение();
		if (_oMediaSource.sourceBuffers.length !== 0 && _oMediaSource.readyState === 'open') {
			_oMediaSource.endOfStream();
		}
		const {чПросмотрено} = ПолучитьЗаполненностьБуфера();
		if (_oMediaElement.played.length === 0 || чПросмотрено < ПОВТОР_НЕДОСТУПЕН_ЕСЛИ_ПРОСМОТРЕНО_МЕНЬШЕ_ЧЕМ) {
			ПоказатьСостояние('Окак', 'Повторять нечего');
			м_Управление.ИзменитьСостояние(СОСТОЯНИЕ_ОСТАНОВКА);
			return;
		}
		ПоказатьСостояние('Окак', 'Запуск повтора');
		_oMediaElement.playbackRate = м_Управление.ПолучитьСкоростьВоспроизведения();
		м_События.ПослатьСобытие('проигрыватель-пауза', _оПовтор.лПауза);
		м_Шкала.ЗадатьНачалоИКонец(_oMediaElement.buffered.start(0), _oMediaElement.buffered.start(0) + чПросмотрено);
		м_Шкала.ЗадатьПросмотрено(_oMediaElement.currentTime);
		м_Управление.ИзменитьСостояние(СОСТОЯНИЕ_ПОВТОР);
	}
	function ДобавитьБуферы(оСегмент) {
		м_Журнал.Окак(`[Проигрыватель] Добавляю буфер ${оСегмент.пДанные.сКодеки}`);
		Проверить(оСегмент.лРазрыв && оСегмент.пДанные.сКодеки);
		try {
			_oMediaSourceBuffer = _oMediaSource.addSourceBuffer(оСегмент.пДанные.сКодеки);
		} catch (пИсключение) {
			if (ЭтоОбъект(пИсключение) && пИсключение.name === 'NotSupportedError') {
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0201');
			} else {
				м_Отладка.ПойманоИсключение(пИсключение);
			}
		}
		_лЕстьВидеодорожка = оСегмент.пДанные.лЕстьВидео;
		_oMediaSourceBuffer.addEventListener('updatestart', СледитьЗаСобытиямиMediaSource);
		_oMediaSourceBuffer.addEventListener('update', СледитьЗаСобытиямиMediaSource);
		_oMediaSourceBuffer.addEventListener('updateend', СледитьЗаСобытиямиMediaSource);
		_oMediaSourceBuffer.addEventListener('abort', СледитьЗаСобытиямиMediaSource);
		_oMediaSourceBuffer.addEventListener('error', СледитьЗаСобытиямиMediaSource);
	}
	function подключитьMediaSourceКMediaElement() {
		if (_oMediaElement.src) {
			URL.revokeObjectURL(_oMediaElement.src);
		}
		_oMediaElement.src = URL.createObjectURL(_oMediaSource);
	}
	function Запустить() {
		Проверить(!_oMediaElement);
		try {
			_oMediaSource = new MediaSource();
		} catch (_) {
			м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0202');
		}
		_oMediaSource.addEventListener('sourceopen', СледитьЗаСобытиямиMediaSource);
		_oMediaSource.addEventListener('sourceended', СледитьЗаСобытиямиMediaSource);
		_oMediaSource.addEventListener('sourceclose', СледитьЗаСобытиямиMediaSource);
		_oMediaSource.sourceBuffers.addEventListener('addsourcebuffer', СледитьЗаСобытиямиMediaSource);
		_oMediaSource.sourceBuffers.addEventListener('removesourcebuffer', СледитьЗаСобытиямиMediaSource);
		_oMediaElement = document.getElementById('глаз');
		ПрименитьНастройкиЗвука();
		for (let сСобытие of [ 'progress', 'error', 'playing', 'seeking', 'seeked', 'ended', 'timeupdate', 'waiting', 'loadstart', 'suspend', 'abort', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'durationchange', 'play', 'pause', 'ratechange', 'resize' ]) {
			_oMediaElement.addEventListener(сСобытие, СледитьЗаСобытиямиMediaElement);
		}
		подключитьMediaSourceКMediaElement();
		return true;
	}
	function Остановить() {
		if (_oMediaElement) {
			URL.revokeObjectURL(_oMediaElement.src);
			_oMediaElement.removeAttribute('src');
			_oMediaElement.load();
		}
	}
	return {
		Запустить,
		Остановить,
		ПолучитьЗаполненностьБуфера,
		ПолучитьКоличествоПропущенныхКадров,
		ПолучитьПозициюВоспроизведенияТрансляции,
		ПоказатьСостояние,
		Перезагрузить: ПерезагрузитьИЖдатьЗаполненияБуфера,
		ПрименитьНастройкиЗвука,
		ДобавитьСледующийСегмент,
		ПеремотатьПовторДо,
		ПеремотатьПовторНа,
		ПереключитьПаузу,
		ЗадатьСкоростьПовтора
	};
})();

const м_Список = (() => {
	const ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКА_ВАРИАНТОВ_НАЧАЛО = 3e3;
	const ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКА_ВАРИАНТОВ_КОНЕЦ = 3e4;
	const ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКА_ВАРИАНТОВ_ШАГ = 1e3;
	const ДОБАВИТЬ_К_ИНТЕРВАЛУ_ОБНОВЛЕНИЯ_СПИСКА_СЕГМЕНТОВ = 150;
	const КОЛИЧЕСТВО_СЕГМЕНТОВ_ДЛЯ_РАСЧЕТА_ИНТЕРВАЛА = 10;
	let _чСостояние = СОСТОЯНИЕ_ОСТАНОВКА;
	let _чИнтервалОбновленияСписка;
	let _мчДлительностьСегментов = new Array(КОЛИЧЕСТВО_СЕГМЕНТОВ_ДЛЯ_РАСЧЕТА_ИНТЕРВАЛА);
	let _ооОбновлениеСписков = new ОтменаОбещания();
	let _моСписокВариантов = null;
	let _чВыбранныйВариант;
	let _оПоследнийСписок = null;
	function РазобратьСписок(лЭтоСписокВариантов, сАбсолютныйАдресСписка, сРазбираемыйСписок) {
		const МАКС_ПОДДЕРЖИВАЕМАЯ_ВЕРСИЯ_HLS = 7;
		if (!сРазбираемыйСписок.startsWith('#EXTM3U')) {
			throw `Вместо списка загружена какая-то фигня длиною ${сРазбираемыйСписок.length}\n${сРазбираемыйСписок}`;
		}
		let чВерсия = 1;
		let mapRenditionGroups, моСписокВариантов, оНовыйВариант;
		let nTargetDuration, nMediaSequenceNumber, лКонецСписка, лРазрыв, моСегменты, оНовыйСегмент;
		if (лЭтоСписокВариантов) {
			mapRenditionGroups = new Map();
			моСписокВариантов = [];
			оНовыйВариант = null;
		} else {
			nTargetDuration = -1;
			nMediaSequenceNumber = 0;
			лКонецСписка = false;
			лРазрыв = false;
			моСегменты = [];
			оНовыйСегмент = null;
		}
		const рвТегИлиАдрес = /^#([A-Z0-9\-]+)(?::(.+))?$|^[^#\r\n].*$/gm;
		рвТегИлиАдрес.lastIndex = 7;
		for (let мсТегИлиАдрес; мсТегИлиАдрес = рвТегИлиАдрес.exec(сРазбираемыйСписок); ) {
			let [сАдрес, сНазваниеТега, сЗначениеТега] = мсТегИлиАдрес;
			switch (сНазваниеТега) {
			  case void 0:
				сАдрес = ResolveRelativeUrl(сАдрес, сАбсолютныйАдресСписка);
				if (лЭтоСписокВариантов) {
					Проверить(оНовыйВариант);
					оНовыйВариант.сАбсолютныйАдресСпискаСегментов = сАдрес;
					моСписокВариантов.push(оНовыйВариант);
					оНовыйВариант = null;
				} else {
					Проверить(оНовыйСегмент);
					Проверить(!лКонецСписка);
					оНовыйСегмент.лРазрыв = лРазрыв;
					оНовыйСегмент.сАдрес = сАдрес;
					моСегменты.push(оНовыйСегмент);
					лРазрыв = false;
					оНовыйСегмент = null;
				}
				break;

			  case 'EXTINF':
				Проверить(!лЭтоСписокВариантов);
				Проверить(nTargetDuration !== -1);
				Проверить(!оНовыйСегмент);
				оНовыйСегмент = Object.create(null);
				if (сЗначениеТега.charAt(0) === '-') {
					м_Журнал.Ой(`[Список] У сегмента ${nMediaSequenceNumber + моСегменты.length} отрицательная длительность ${сЗначениеТега}`);
					оНовыйСегмент.чДлительность = 0;
				} else {
					const чЗапятая = сЗначениеТега.indexOf(',');
					оНовыйСегмент.чДлительность = РазобратьПоложительноеЧисло(чЗапятая === -1 ? сЗначениеТега : сЗначениеТега.slice(0, чЗапятая));
				}
				if (Math.round(оНовыйСегмент.чДлительность) > nTargetDuration) {
					м_Журнал.Ой(`[Список] Длительность сегмента ${nMediaSequenceNumber + моСегменты.length} больше target duration на ${оНовыйСегмент.чДлительность - nTargetDuration}с`);
					if (оНовыйСегмент.чДлительность > nTargetDuration * 3) {
						оНовыйСегмент.чДлительность = 0;
					}
				}
				break;

			  case 'EXT-X-DISCONTINUITY':
				Проверить(!лЭтоСписокВариантов);
				Проверить(!лРазрыв);
				Проверить(сЗначениеТега === void 0);
				лРазрыв = true;
				м_Журнал.Ой(`[Список] #EXT-X-DISCONTINUITY у сегмента ${nMediaSequenceNumber + моСегменты.length}`);
				break;

			  case 'EXT-X-PROGRAM-DATE-TIME':
			  case 'EXT-X-DATERANGE':
				Проверить(!лЭтоСписокВариантов);
				break;

			  case 'EXT-X-BYTERANGE':
			  case 'EXT-X-KEY':
			  case 'EXT-X-MAP':
			  case 'EXT-X-GAP':
				Проверить(false);
				break;

			  case 'EXT-X-TARGETDURATION':
				Проверить(!лЭтоСписокВариантов);
				Проверить(nTargetDuration === -1);
				nTargetDuration = РазобратьЦелоеПоложительноеЧисло(сЗначениеТега);
				Проверить(nTargetDuration > 0 && nTargetDuration < 60);
				break;

			  case 'EXT-X-MEDIA-SEQUENCE':
				Проверить(!лЭтоСписокВариантов);
				Проверить(nMediaSequenceNumber === 0);
				nMediaSequenceNumber = РазобратьЦелоеПоложительноеЧисло(сЗначениеТега);
				break;

			  case 'EXT-X-ENDLIST':
				Проверить(!лЭтоСписокВариантов);
				Проверить(!лКонецСписка);
				Проверить(сЗначениеТега === void 0);
				лКонецСписка = true;
				м_Журнал.Окак(`[Список] #EXT-X-ENDLIST после сегмента ${nMediaSequenceNumber + моСегменты.length - 1}`);
				break;

			  case 'EXT-X-DISCONTINUITY-SEQUENCE':
				Проверить(!лЭтоСписокВариантов);
				break;

			  case 'EXT-X-PLAYLIST-TYPE':
			  case 'EXT-X-I-FRAMES-ONLY':
				Проверить(false);
				break;

			  case 'EXT-X-MEDIA':
				{
					Проверить(лЭтоСписокВариантов);
					const амАтрибуты = РазобратьСписокАтрибутов(сЗначениеТега);
					const сТип = амАтрибуты.get('TYPE');
					Проверить(сТип);
					Проверить(сТип !== 'VIDEO' && сТип !== 'AUDIO' || !амАтрибуты.has('URI'));
					if (сТип !== 'VIDEO') {
						м_Журнал.Ой(`[Список] Найден #EXT-X-MEDIA TYPE=${сТип}`);
					} else {
						const сГруппа = РазобратьСтроку(амАтрибуты.get('GROUP-ID'));
						Проверить(!mapRenditionGroups.has(сГруппа));
						mapRenditionGroups.set(сГруппа, РазобратьСтроку(амАтрибуты.get('NAME')));
					}
					break;
				}

			  case 'EXT-X-STREAM-INF':
				{
					Проверить(лЭтоСписокВариантов);
					Проверить(!оНовыйВариант);
					оНовыйВариант = Object.create(null);
					const амАтрибуты = РазобратьСписокАтрибутов(сЗначениеТега);
					оНовыйВариант.nPeakBitrate = РазобратьЦелоеПоложительноеЧисло(амАтрибуты.get('BANDWIDTH'));
					оНовыйВариант.сКодеки = амАтрибуты.has('CODECS') ? РазобратьСтроку(амАтрибуты.get('CODECS')) : '';
					Проверить(!амАтрибуты.has('AUDIO') && !амАтрибуты.has('SUBTITLES') && !амАтрибуты.has('CLOSED-CAPTIONS'));
					if (амАтрибуты.has('VIDEO')) {
						оНовыйВариант.сИдентификатор = РазобратьСтроку(амАтрибуты.get('VIDEO'));
					}
					break;
				}

			  case 'EXT-X-I-FRAME-STREAM-INF':
			  case 'EXT-X-SESSION-DATA':
			  case 'EXT-X-SESSION-KEY':
				Проверить(лЭтоСписокВариантов);
				break;

			  case 'EXT-X-TWITCH-INFO':
				{
					Проверить(лЭтоСписокВариантов);
					const чСекунды = РазобратьПоложительноеЧисло(РазобратьСтроку(РазобратьСписокАтрибутов(сЗначениеТега).get('SERVER-TIME')));
					Проверить(чСекунды > 1531267200 && чСекунды < 1846886400);
					const чМиллисекунды = чСекунды * 1e3 + 50;
					const чРассинхронизация = чМиллисекунды - Date.now();
					м_Журнал[Math.abs(чРассинхронизация) > 1e3 ? 'Ой' : 'Окак'](`[Список] Рассинхронизация времени: ${чРассинхронизация}мс`);
					г_чТочноеВремя = чМиллисекунды - performance.now();
					break;
				}

			  case 'EXT-X-VERSION':
				Проверить(чВерсия === 1);
				чВерсия = РазобратьЦелоеПоложительноеЧисло(сЗначениеТега);
				Проверить(чВерсия >= 2 && чВерсия <= МАКС_ПОДДЕРЖИВАЕМАЯ_ВЕРСИЯ_HLS);
				break;

			  case 'EXT-X-START':
				м_Журнал.Ой(`[Список] Найден #EXT-X-START=${сЗначениеТега}`);
				break;

			  case 'EXTM3U':
			  case 'EXT-X-DEFINE':
				Проверить(false);
			}
		}
		if (лЭтоСписокВариантов) {
			Проверить(!оНовыйВариант);
			for (let оВариант of моСписокВариантов) {
				if ('сИдентификатор' in оВариант) {
					оВариант.сНазвание = mapRenditionGroups.get(оВариант.сИдентификатор);
					Проверить(оВариант.сНазвание);
				} else {
					оВариант.сИдентификатор = `CoolCmd${оВариант.nPeakBitrate}`;
					оВариант.сНазвание = `${м_i18n.ФорматироватьЧисло(оВариант.nPeakBitrate / 1e6, 1)} ${Текст('J0114')}`;
				}
				м_Журнал.Окак(`[Список] Добавлен вариант PeakBitrate=${оВариант.nPeakBitrate} Идентификатор=${оВариант.сИдентификатор} Название=${оВариант.сНазвание} Кодеки=${оВариант.сКодеки}`);
			}
			моСписокВариантов.sort(СравнитьВарианты);
			return моСписокВариантов;
		}
		Проверить(!оНовыйСегмент);
		Проверить(nTargetDuration !== -1);
		const оСписокСегментов = {
			nTargetDuration,
			nMediaSequenceNumber,
			лКонецСписка,
			моСегменты
		};
		м_Журнал.Вот(`[Список] Разобран список сегментов TargetDuration=${nTargetDuration} MediaSequenceNumber=${nMediaSequenceNumber} КоличествоСегментов=${моСегменты.length}`);
		м_Статистика.РазобранСписокСегментов(оСписокСегментов);
		return оСписокСегментов;
	}
	function СравнитьВарианты(оВариант1, оВариант2) {
		return (оВариант2.сИдентификатор === 'chunked' ? 1e9 : оВариант2.nPeakBitrate) - (оВариант1.сИдентификатор === 'chunked' ? 1e9 : оВариант1.nPeakBitrate);
	}
	function РазобратьСписокАтрибутов(сИсходныйТекст) {
		Проверить(сИсходныйТекст);
		const амАтрибуты = new Map();
		const рвАтрибут = /([A-Z0-9\-]+)=("[^"]+"|[^",][^,]*)(?:,|$)/g;
		while (рвАтрибут.lastIndex !== сИсходныйТекст.length) {
			const чКонецАтрибута = рвАтрибут.lastIndex;
			const мсАтрибут = рвАтрибут.exec(сИсходныйТекст);
			Проверить(мсАтрибут.index === чКонецАтрибута);
			Проверить(!амАтрибуты.has(мсАтрибут[1]));
			амАтрибуты.set(мсАтрибут[1], мсАтрибут[2]);
		}
		return амАтрибуты;
	}
	function РазобратьЦелоеПоложительноеЧисло(сИсходныйТекст) {
		Проверить(/^[0-9]{1,15}$/.test(сИсходныйТекст));
		return Number.parseInt(сИсходныйТекст, 10);
	}
	function РазобратьПоложительноеЧисло(сИсходныйТекст) {
		Проверить(/^[0-9]{1,14}(?:\.[0-9]{1,15})?$/.test(сИсходныйТекст));
		return Number.parseFloat(сИсходныйТекст);
	}
	function РазобратьСтроку(сИсходныйТекст) {
		Проверить(сИсходныйТекст.length > 2 && сИсходныйТекст.charAt(0) === '"' && сИсходныйТекст.charAt(сИсходныйТекст.length - 1) === '"');
		return сИсходныйТекст.slice(1, -1);
	}
	function ДобавитьСегментыВОчередь(оНовыйСписок) {
		const чНачалоНовогоСписка = оНовыйСписок.nMediaSequenceNumber;
		const чКонецНовогоСписка = чНачалоНовогоСписка + оНовыйСписок.моСегменты.length;
		let чНачалоПоследнегоСписка, чКонецПоследнегоСписка, чИндекс;
		if (_оПоследнийСписок === null) {
			if (оНовыйСписок.лКонецСписка) {
				throw 'Найден #EXT-X-ENDLIST';
			}
			Проверить(оНовыйСписок.моСегменты.length !== 0);
			ДобавитьСегментыВОчередь.лРазрыв = true;
			чНачалоПоследнегоСписка = чКонецПоследнегоСписка = -1;
			чИндекс = оНовыйСписок.моСегменты.length;
			for (let чРазмерБуфера = м_Настройки.Получить('чРазмерБуфера'); --чИндекс > 0 && (чРазмерБуфера -= оНовыйСписок.моСегменты[чИндекс].чДлительность) > 0; ) {}
		} else {
			Проверить(оНовыйСписок.моСегменты.length !== 0);
			чНачалоПоследнегоСписка = _оПоследнийСписок.nMediaSequenceNumber;
			чКонецПоследнегоСписка = чНачалоПоследнегоСписка + _оПоследнийСписок.моСегменты.length;
			чИндекс = 0;
			if (чНачалоНовогоСписка < чНачалоПоследнегоСписка || чКонецНовогоСписка < чКонецПоследнегоСписка) {
				м_Журнал.Ой(`[Список] Уменьшился media sequence number` + ` [${чНачалоПоследнегоСписка}..${чКонецПоследнегоСписка}) ==> [${чНачалоНовогоСписка}..${чКонецНовогоСписка})`);
			}
			const кСегментовПропущено = чНачалоНовогоСписка - чКонецПоследнегоСписка;
			if (кСегментовПропущено > 0) {
				м_Журнал.Ой(`[Список] Пропущено сегментов: ${кСегментовПропущено}`);
				м_Статистика.НеЗагруженыСегменты(кСегментовПропущено);
				ДобавитьСегментыВОчередь.лРазрыв = true;
			}
			if (оНовыйСписок.nTargetDuration !== _оПоследнийСписок.nTargetDuration) {
				м_Журнал.Ой(`[Список] Изменился target duration ${_оПоследнийСписок.nTargetDuration} ==> ${оНовыйСписок.nTargetDuration}`);
				СброситьИнтервалОбновленияСписков();
			}
		}
		let кСегментовДобавлено = 0;
		let кСекундДобавлено = 0;
		for (let оДобавляемыйСегмент; оДобавляемыйСегмент = оНовыйСписок.моСегменты[чИндекс]; ++чИндекс) {
			const чНомерДобавляемогоСегмента = чНачалоНовогоСписка + чИндекс;
			if (чНомерДобавляемогоСегмента >= чНачалоПоследнегоСписка && чНомерДобавляемогоСегмента < чКонецПоследнегоСписка) {
				const оСегмент = _оПоследнийСписок.моСегменты[чНомерДобавляемогоСегмента - чНачалоПоследнегоСписка];
				if (оСегмент.сАдрес !== оДобавляемыйСегмент.сАдрес || оСегмент.чДлительность !== оДобавляемыйСегмент.чДлительность) {
					м_Журнал.Ой(`[Список] У сегмента ${чНомерДобавляемогоСегмента} изменились адрес ${оСегмент.сАдрес} ==> ${оДобавляемыйСегмент.сАдрес}` + ` или длительность ${оСегмент.чДлительность} ==> ${оДобавляемыйСегмент.чДлительность}`);
					ДобавитьСегментыВОчередь.лРазрыв = true;
				}
			}
			if (чНомерДобавляемогоСегмента >= чКонецПоследнегоСписка) {
				if (_чСостояние !== СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ) {
					_чСостояние = СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ;
					г_моОчередь.Добавить(new Сегмент(ОБРАБОТКА_ЗАГРУЖЕН, СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ));
					СброситьИнтервалОбновленияСписков();
				}
				if (оДобавляемыйСегмент.чДлительность === 0) {
					м_Журнал.Ой(`[Список] Пропускаю сегмент MediaSequenceNumber=${чНомерДобавляемогоСегмента} Длительность=0`);
					м_Статистика.ПолученИсходныйСегмент();
					м_Статистика.ЗабракованСегмент();
					ДобавитьСегментыВОчередь.лРазрыв = true;
				} else {
					const оДобавлено = г_моОчередь.Добавить(new Сегмент(ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ, оДобавляемыйСегмент.сАдрес, оДобавляемыйСегмент.чДлительность, оДобавляемыйСегмент.лРазрыв || ДобавитьСегментыВОчередь.лРазрыв));
					м_Журнал.Вот(`[Список] Добавлен сегмент ${оДобавлено.чНомер} MediaSequenceNumber=${чНомерДобавляемогоСегмента}` + ` Длительность=${оДобавлено.чДлительность} Разрыв=${оДобавлено.лРазрыв}`);
					кСегментовДобавлено += 1;
					кСекундДобавлено += оДобавлено.чДлительность;
					ДобавитьСегментыВОчередь.лРазрыв = false;
				}
			}
		}
		м_Статистика.ДобавленыСегментыВОчередь(кСегментовДобавлено, кСекундДобавлено);
		if (чКонецНовогоСписка >= чКонецПоследнегоСписка) {
			_оПоследнийСписок = оНовыйСписок;
		}
		if (оНовыйСписок.лКонецСписка) {
			throw 'Найден #EXT-X-ENDLIST';
		}
		return кСегментовДобавлено;
	}
	function ОбновитьСписки(чЧерез) {
		Проверить(Number.isFinite(чЧерез) && чЧерез >= 0);
		м_Журнал.Вот(`[Список] Загрузка списка начнется через ${м_Журнал.F0(чЧерез)}мс`);
		let оОбещание = Ждать(_ооОбновлениеСписков, чЧерез);
		if (!_моСписокВариантов) {
			let сАбсолютныйАдресСпискаВариантов;
			оОбещание = оОбещание.then(() => {
				return м_Twitch.ПолучитьАбсолютныйАдресСпискаВариантов(_ооОбновлениеСписков);
			}).then(сРезультат => {
				сАбсолютныйАдресСпискаВариантов = сРезультат;
				return м_Загрузчик.ЗагрузитьТекст(_ооОбновлениеСписков, сАбсолютныйАдресСпискаВариантов, ЗАГРУЖАТЬ_СПИСОК_ВАРИАНТОВ_НЕ_ДОЛЬШЕ, 'список вариантов', false);
			}).then(сРезультат => {
				м_Отладка.СохранитьСписокВариантов(сРезультат);
				_моСписокВариантов = РазобратьСписок(true, сАбсолютныйАдресСпискаВариантов, сРезультат);
				ВыбратьВариантТрансляции();
			});
		}
		let чНачалоОпроса;
		оОбещание.then(() => {
			чНачалоОпроса = performance.now();
			return м_Загрузчик.ЗагрузитьТекст(_ооОбновлениеСписков, _моСписокВариантов[_чВыбранныйВариант].сАбсолютныйАдресСпискаСегментов, ЗАГРУЖАТЬ_СПИСОК_СЕГМЕНТОВ_НЕ_ДОЛЬШЕ, 'список сегментов', false);
		}).then(сРезультат => {
			м_Отладка.СохранитьСписокСегментов(сРезультат);
			const чИнтервал = ПолучитьИнтервалОбновленияСпискаСегментов(ДобавитьСегментыВОчередь(РазобратьСписок(false, _моСписокВариантов[_чВыбранныйВариант].сАбсолютныйАдресСпискаСегментов, сРезультат)));
			ОбновитьСписки(Math.max(чИнтервал - performance.now() + чНачалоОпроса, 0));
			м_Загрузчик.ЗагрузитьСледующийСегмент();
		}).catch(ДобавитьОбработчикИсключений(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Список] Завершаю трансляцию. ${пПричина}`);
				ЗавершитьТрансляцию();
				ОбновитьСписки(ПолучитьИнтервалОбновленияСпискаВариантов());
				м_Загрузчик.ЗагрузитьСледующийСегмент();
			} else if (пПричина === ОтменаОбещания.ОБЕЩАНИЕ_ОТМЕНЕНО) {
				м_Журнал.Вот('[Список] Отменено обновление списков');
			} else {
				throw пПричина;
			}
		}));
	}
	function ОтменитьОбновлениеСписков() {
		м_Журнал.Вот('[Список] Отменяю обновление списков');
		_ооОбновлениеСписков.Отменить();
	}
	function СброситьИнтервалОбновленияСписков() {
		_мчДлительностьСегментов.fill(0);
		_чИнтервалОбновленияСписка = -1;
	}
	function ПолучитьИнтервалОбновленияСпискаСегментов(кСегментовДобавлено) {
		Проверить(_чСостояние === СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ);
		const чМинИнтервал = МИН_ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКОВ * _оПоследнийСписок.nTargetDuration * 10;
		if (кСегментовДобавлено === 0) {
			return чМинИнтервал;
		}
		const чИнтервал = м_Настройки.Получить('чИнтервалОпроса');
		if (чИнтервал !== АВТОНАСТРОЙКА) {
			return чИнтервал * _оПоследнийСписок.nTargetDuration * 10;
		}
		Проверить(кСегментовДобавлено > 0 && кСегментовДобавлено <= _оПоследнийСписок.моСегменты.length);
		if (_чИнтервалОбновленияСписка === -1) {
			_чИнтервалОбновленияСписка = 0;
			кСегментовДобавлено = _оПоследнийСписок.моСегменты.length;
		}
		кСегментовДобавлено = Math.min(кСегментовДобавлено, _мчДлительностьСегментов.length);
		do {
			_мчДлительностьСегментов[_чИнтервалОбновленияСписка] = _оПоследнийСписок.моСегменты[_оПоследнийСписок.моСегменты.length - кСегментовДобавлено].чДлительность;
			if (++_чИнтервалОбновленияСписка === _мчДлительностьСегментов.length) {
				_чИнтервалОбновленияСписка = 0;
			}
		} while (--кСегментовДобавлено != 0);
		return Math.max(Math.max(..._мчДлительностьСегментов) * 1e3 + ДОБАВИТЬ_К_ИНТЕРВАЛУ_ОБНОВЛЕНИЯ_СПИСКА_СЕГМЕНТОВ, чМинИнтервал);
	}
	function ПолучитьИнтервалОбновленияСпискаВариантов() {
		Проверить(_чСостояние === СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ);
		if (_чИнтервалОбновленияСписка === -1) {
			_чИнтервалОбновленияСписка = ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКА_ВАРИАНТОВ_НАЧАЛО;
		} else {
			_чИнтервалОбновленияСписка = Math.min(_чИнтервалОбновленияСписка + ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКА_ВАРИАНТОВ_ШАГ, ИНТЕРВАЛ_ОБНОВЛЕНИЯ_СПИСКА_ВАРИАНТОВ_КОНЕЦ);
		}
		return _чИнтервалОбновленияСписка;
	}
	function ВыбратьВариантТрансляции() {
		if (_моСписокВариантов.length === 0) {
			throw 'Список вариантов пуст';
		}
		const сЖелаемыйВариант = м_Настройки.Получить('сНазваниеВарианта');
		_чВыбранныйВариант = _моСписокВариантов.length - 1;
		while (_чВыбранныйВариант !== 0 && _моСписокВариантов[_чВыбранныйВариант].сИдентификатор !== сЖелаемыйВариант) {
			--_чВыбранныйВариант;
		}
		м_Журнал.Вот(`[Список] Выбран вариант трансляции ${_моСписокВариантов[_чВыбранныйВариант].сИдентификатор} ЖелаемыйВариант=${сЖелаемыйВариант}`);
		м_События.ПослатьСобытие('список-выбранварианттрансляции', [ _моСписокВариантов, _чВыбранныйВариант ]);
	}
	function ОчиститьСписокВариантовТрансляции() {
		if (_моСписокВариантов) {
			м_Журнал.Вот('[Список] Очищаю список вариантов трансляции');
			_моСписокВариантов = null;
			м_События.ПослатьСобытие('список-выбранварианттрансляции', [ _моСписокВариантов, _чВыбранныйВариант ]);
		}
	}
	function ЗавершитьТрансляцию() {
		if (_чСостояние !== СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ) {
			_чСостояние = СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ;
			г_моОчередь.Добавить(new Сегмент(ОБРАБОТКА_ЗАГРУЖЕН, СОСТОЯНИЕ_ЗАВЕРШЕНИЕ_ТРАНСЛЯЦИИ));
			СброситьИнтервалОбновленияСписков();
		}
		ОчиститьСписокВариантовТрансляции();
		_оПоследнийСписок = null;
	}
	function ИзменитьВариантТрансляции() {
		Проверить(_моСписокВариантов);
		ОтменитьОбновлениеСписков();
		СброситьИнтервалОбновленияСписков();
		ВыбратьВариантТрансляции();
		_оПоследнийСписок = null;
		_ооОбновлениеСписков.НачалоВыполнения();
		ОбновитьСписки(0);
		г_моОчередь.Добавить(new Сегмент(ОБРАБОТКА_ЗАГРУЖЕН, СОСТОЯНИЕ_СМЕНА_ВАРИАНТА));
		м_Загрузчик.ЗагрузитьСледующийСегмент();
	}
	function Остановить() {
		_чСостояние = СОСТОЯНИЕ_ОСТАНОВКА;
		ОтменитьОбновлениеСписков();
		ОчиститьСписокВариантовТрансляции();
		_оПоследнийСписок = null;
	}
	function Запустить() {
		Проверить(_чСостояние === СОСТОЯНИЕ_ОСТАНОВКА);
		_ооОбновлениеСписков.НачалоВыполнения();
		ОбновитьСписки(0);
	}
	СброситьИнтервалОбновленияСписков();
	return {
		Запустить,
		Остановить,
		ИзменитьВариантТрансляции
	};
})();

const м_Преобразователь = (() => {
	let _оРабочийПоток = null;
	let _чПоследнийЗагруженный = -1;
	function ПреобразоватьСледующийСегмент() {
		let чУдалить, кУдалить = 0;
		for (let оСегмент, чСегмент = 0; оСегмент = г_моОчередь[чСегмент]; ++чСегмент) {
			if (оСегмент.чОбработка > ОБРАБОТКА_ЗАГРУЖЕН) {
				continue;
			}
			if (оСегмент.чОбработка < ОБРАБОТКА_ЗАГРУЖЕН) {
				break;
			}
			if (_чПоследнийЗагруженный !== -1 && _чПоследнийЗагруженный + 1 !== оСегмент.чНомер) {
				м_Журнал.Ой(`[Преобразование] Не загружены сегменты между ${_чПоследнийЗагруженный} и ${оСегмент.чНомер}`);
				оСегмент.лРазрыв = true;
			}
			_чПоследнийЗагруженный = оСегмент.чНомер;
			if (typeof оСегмент.пДанные == 'number' && _оРабочийПоток === null) {
				м_Журнал.Вот(`[Преобразование] Пропускаю сегмент ${оСегмент.чНомер} Состояние=${оСегмент.пДанные}`);
				оСегмент.чОбработка = ОБРАБОТКА_ПРЕОБРАЗОВАН;
				if (оСегмент.пДанные === СОСТОЯНИЕ_НАЧАЛО_ТРАНСЛЯЦИИ) {
					СоздатьРабочийПоток();
				}
			} else {
				if (typeof оСегмент.пДанные == 'number') {
					м_Журнал.Вот(`[Преобразование] Отсылаю сегмент ${оСегмент.чНомер} Состояние=${оСегмент.пДанные}`);
					_оРабочийПоток.postMessage(оСегмент);
				} else {
					м_Отладка.СохранитьТранспортныйПоток(оСегмент);
					м_Статистика.ПолученИсходныйСегмент();
					м_Журнал.Вот(`[Преобразование] Отсылаю сегмент ${оСегмент.чНомер}`);
					_оРабочийПоток.postMessage(оСегмент, [ оСегмент.пДанные ]);
				}
				if (++кУдалить == 1) {
					чУдалить = чСегмент;
				}
			}
		}
		if (кУдалить !== 0) {
			г_моОчередь.Удалить(чУдалить, кУдалить);
		}
		м_Проигрыватель.ДобавитьСледующийСегмент();
	}
	const ОбработатьОкончаниеПреобразования = ДобавитьОбработчикИсключений(оСобытие => {
		const мДанные = оСобытие.data;
		Проверить(Array.isArray(мДанные));
		switch (мДанные[0]) {
		  case 1:
			Проверить(мДанные.length === 2 && ЭтоОбъект(мДанные[1]));
			const оСегмент = new Сегмент(ОБРАБОТКА_ПРЕОБРАЗОВАН, мДанные[1].пДанные, мДанные[1].чДлительность, мДанные[1].лРазрыв, мДанные[1].чНомер);
			м_Журнал.Вот(`[Преобразование] Получен сегмент ${оСегмент.чНомер} ПреобразованЗа=${м_Журнал.F0(оСегмент.пДанные.чПреобразованЗа)}мс`);
			if (typeof оСегмент.пДанные != 'number') {
				м_Статистика.ПолученПреобразованныйСегмент(оСегмент);
				if (!оСегмент.пДанные.hasOwnProperty('мбМедиасегмент')) {
					return;
				}
				м_Отладка.СохранитьПреобразованныйСегмент(оСегмент);
			}
			г_моОчередь.Добавить(оСегмент);
			м_Проигрыватель.ДобавитьСледующийСегмент();
			return;

		  case 2:
			const мсВажность = мДанные[1], мсЗаписи = мДанные[2];
			Проверить(мДанные.length === 3 && Array.isArray(мсВажность) && Array.isArray(мсЗаписи) && мсВажность.length === мсЗаписи.length);
			for (let ы = 0; ы < мсВажность.length; ++ы) {
				Проверить((мсВажность[ы] === 'Вот' || мсВажность[ы] === 'Окак' || мсВажность[ы] === 'Ой') && typeof мсЗаписи[ы] == 'string');
				м_Журнал[мсВажность[ы]](мсЗаписи[ы]);
			}
			return;

		  case 3:
			Проверить(мДанные.length === 3 && typeof мДанные[1] == 'string' && typeof мДанные[2] == 'object');
			м_Отладка.ЗавершитьРаботуИОтправитьОтчет(мДанные[1], мДанные[2]);
			return;

		  case 4:
			Проверить(мДанные.length === 2 && typeof мДанные[1] == 'string');
			м_Отладка.ЗавершитьРаботуИПоказатьСообщение(мДанные[1]);
			return;

		  case 5:
			Проверить(мДанные.length === 2 && мДанные[1].byteLength);
			м_Помойка.Выбросить(мДанные[1]);
			return;

		  default:
			Проверить(false);
		}
	});
	function ОбработатьОшибкуПреобразования(оСобытие) {
		м_Отладка.ЗавершитьРаботуИОтправитьОтчет(`Произошло событие ${оСобытие.type} в рабочем потоке в строке ${оСобытие.lineno}. ${оСобытие.message}`);
	}
	function СоздатьРабочийПоток() {
		м_Журнал.Вот('[Преобразование] Создаю рабочий поток');
		_оРабочийПоток = new Worker('/worker.js');
		_оРабочийПоток.addEventListener('message', ОбработатьОкончаниеПреобразования);
		_оРабочийПоток.addEventListener('error', ОбработатьОшибкуПреобразования);
		_оРабочийПоток.addEventListener('messageerror', ОбработатьОшибкуПреобразования);
	}
	function Остановить() {
		_чПоследнийЗагруженный = -1;
		if (_оРабочийПоток) {
			м_Журнал.Вот('[Преобразование] Убиваю рабочий поток');
			_оРабочийПоток.terminate();
			_оРабочийПоток = null;
		}
	}
	return {
		Остановить,
		ПреобразоватьСледующийСегмент
	};
})();

const м_Загрузчик = (() => {
	const МАКС_КОЛИЧЕСТВО_ПОПЫТОК = 2;
	function ЗагрузитьТекст(ооОтменаОбещания, сАдрес, чНеДольше, сНазвание, лЖурнал, оЗаголовки = null, сМетод = 'GET') {
		return Загрузить(ооОтменаОбещания, сМетод, сАдрес, чНеДольше, оЗаголовки, null, сНазвание, лЖурнал, 'text');
	}
	function ЗагрузитьJson(ооОтменаОбещания, сАдрес, чНеДольше, сНазвание, лЖурнал, оЗаголовки = null, сМетод = 'GET') {
		return Загрузить(ооОтменаОбещания, сМетод, сАдрес, чНеДольше, оЗаголовки, null, сНазвание, лЖурнал, 'json');
	}
	function Загрузить(ооОтменаОбещания, сМетод, сАдрес, чНеДольше, оЗаголовки, пТело, сНазвание, лЖурнал, пТипДанных) {
		Проверить(сМетод === 'GET' || сМетод === 'PUT' || сМетод === 'DELETE' || сМетод === 'POST');
		Проверить(typeof сАдрес == 'string');
		Проверить(Number.isFinite(чНеДольше) && (чНеДольше === 0 || чНеДольше > 1e3));
		Проверить(пТело === null || сМетод !== 'GET' && (пТело instanceof URLSearchParams || typeof пТело == 'string' && оЗаголовки && ЭтоНепустаяСтрока(оЗаголовки['Content-Type'])));
		Проверить(typeof оЗаголовки == 'object' && typeof сНазвание == 'string' && typeof лЖурнал == 'boolean');
		Проверить(пТипДанных === 'none' || пТипДанных === 'text' || пТипДанных === 'json' || Number.isFinite(пТипДанных));
		м_Twitch.проверитьДоступностьАдреса(сАдрес);
		м_Журнал.Вот(`[Загрузчик] ${сМетод} ${сНазвание} не дольше ${м_Журнал.F0(чНеДольше)}мс`);
		const оЗапрос = new XMLHttpRequest();
		оЗапрос._сМетод = сМетод;
		оЗапрос._сАдрес = сАдрес;
		оЗапрос._чНеДольше = чНеДольше;
		оЗапрос._оЗаголовки = оЗаголовки;
		оЗапрос._пТело = пТело;
		оЗапрос._сНазвание = сНазвание;
		оЗапрос._лЖурнал = лЖурнал;
		оЗапрос._пТипДанных = пТипДанных;
		оЗапрос._кОсталосьПопыток = typeof пТипДанных == 'number' ? 1 : МАКС_КОЛИЧЕСТВО_ПОПЫТОК;
		оЗапрос._чВремяОтправкиЗапроса = performance.now();
		оЗапрос._чОжиданиеОтвета = NaN;
		оЗапрос.addEventListener('timeout', ОбработатьОшибку);
		оЗапрос.addEventListener('error', ОбработатьОшибку);
		оЗапрос.addEventListener('abort', ОбработатьОшибку);
		оЗапрос.addEventListener('load', ОбработатьОкончаниеЗагрузки);
		if (лЖурнал && typeof пТипДанных == 'number') {
			оЗапрос.addEventListener('readystatechange', ОбработатьПолучениеОтвета);
		}
		return new Promise((фВыполнить, фОтказаться) => {
			оЗапрос._фВыполнить = фВыполнить;
			оЗапрос._фОтказаться = фОтказаться;
			if (ооОтменаОбещания) {
				ооОтменаОбещания.ЗаменитьОбработчик(ПолучитьОбработчикОтменыОбещания(оЗапрос));
			}
			ПослатьЗапрос(оЗапрос, false);
		});
	}
	function ПослатьЗапрос(оЗапрос, лПовторно) {
		if (оЗапрос._кОсталосьПопыток === 0) {
			return false;
		}
		if (лПовторно) {
			м_Журнал.Ой(`[Загрузчик] Повторно загружаю ${оЗапрос._сНазвание}`);
		}
		оЗапрос._кОсталосьПопыток -= 1;
		оЗапрос.open(оЗапрос._сМетод, оЗапрос._сАдрес);
		оЗапрос.responseType = typeof оЗапрос._пТипДанных == 'number' ? 'arraybuffer' : 'text';
		оЗапрос.timeout = оЗапрос._чНеДольше;
		if (оЗапрос._оЗаголовки) {
			for (let сЗаголовок of Object.keys(оЗапрос._оЗаголовки)) {
				оЗапрос.setRequestHeader(сЗаголовок, оЗапрос._оЗаголовки[сЗаголовок]);
			}
		}
		if (оЗапрос._пТело instanceof URLSearchParams) {
			оЗапрос.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
			оЗапрос.send(оЗапрос._пТело.toString());
		} else {
			оЗапрос.send(оЗапрос._пТело);
		}
		return true;
	}
	function ПолучитьОбработчикОтменыОбещания(оЗапрос) {
		return () => {
			м_Журнал.Вот(`[Загрузчик] Отменяю загрузку ${оЗапрос._сНазвание} readyState=${оЗапрос.readyState}`);
			оЗапрос.removeEventListener('abort', ОбработатьОшибку);
			оЗапрос.abort();
			оЗапрос._фОтказаться(ОтменаОбещания.ОБЕЩАНИЕ_ОТМЕНЕНО);
		};
	}
	const ОбработатьПолучениеОтвета = ДобавитьОбработчикИсключений(({target: оЗапрос}) => {
		if (оЗапрос.readyState >= XMLHttpRequest.HEADERS_RECEIVED) {
			оЗапрос.removeEventListener('readystatechange', ОбработатьПолучениеОтвета);
			Проверить(Number.isNaN(оЗапрос._чОжиданиеОтвета));
			оЗапрос._чОжиданиеОтвета = Math.round(performance.now() - оЗапрос._чВремяОтправкиЗапроса);
		}
	});
	const ОбработатьОшибку = ДобавитьОбработчикИсключений(({target: оЗапрос, type: сТипСобытия}) => {
		м_Журнал.Ой(`[Загрузчик] Не удалось загрузить ${оЗапрос._сНазвание}. Произошло событие ${сТипСобытия}` + ` readyState=${оЗапрос.readyState}` + (оЗапрос._лЖурнал && typeof оЗапрос._пТипДанных == 'number' ? ` ОжиданиеОтвета=${оЗапрос._чОжиданиеОтвета}мс` : ``));
		if (сТипСобытия === 'abort' || !ПослатьЗапрос(оЗапрос, true)) {
			if (оЗапрос.responseType === 'arraybuffer') {
				м_Статистика.ЗагруженСегмент(NaN, NaN, NaN, оЗапрос._чОжиданиеОтвета);
			}
			оЗапрос._фОтказаться(`Произошло событие ${сТипСобытия}`);
		}
	});
	const ОбработатьОкончаниеЗагрузки = ДобавитьОбработчикИсключений(({target: оЗапрос}) => {
		Проверить(оЗапрос.readyState === XMLHttpRequest.DONE);
		const чКод = оЗапрос.status;
		if (чКод >= 200 && чКод <= 299 && (оЗапрос._пТипДанных === 'none' || оЗапрос.response !== null)) {
			const чДлительностьЗагрузки = Math.round(performance.now() - оЗапрос._чВремяОтправкиЗапроса);
			м_Журнал.Вот(`[Загрузчик] Загрузил ${оЗапрос._сНазвание} за ${чДлительностьЗагрузки}мс` + (оЗапрос._лЖурнал && typeof оЗапрос._пТипДанных == 'number' ? ` ОжиданиеОтвета=${оЗапрос._чОжиданиеОтвета}мс` : ``) + (typeof оЗапрос._пТипДанных == 'number' ? ` Отношение=${м_Журнал.F1(чДлительностьЗагрузки / оЗапрос._пТипДанных / 1e3)}` : ``) + (чКод === 200 ? `` : ` Код=${чКод} ${оЗапрос.statusText}`) + (оЗапрос._пТипДанных === 'none' ? '' : оЗапрос._лЖурнал && ЭтоНепустаяСтрока(оЗапрос.response) ? `\n${оЗапрос.response}` : оЗапрос.responseType === 'arraybuffer' ? ` Размер=${оЗапрос.response.byteLength}байт` : ` Размер=${оЗапрос.response.length}символов`));
			if (оЗапрос._чНеДольше !== 0) {
				м_Статистика.СкачаноНечто(ПолучитьРазмерОтвета(оЗапрос));
			}
			switch (оЗапрос._пТипДанных) {
			  case 'none':
				оЗапрос._фВыполнить();
				break;

			  case 'text':
				оЗапрос._фВыполнить(оЗапрос.response);
				break;

			  case 'json':
				try {
					оЗапрос._фВыполнить(JSON.parse(оЗапрос.response));
				} catch (пИсключение) {
					м_Журнал.Ой(`[Загрузчик] Не удалось разобрать ${оЗапрос._сНазвание}. ${пИсключение}`);
					оЗапрос._фОтказаться('Не удалось разобрать JSON');
				}
				break;

			  default:
				м_Статистика.ЗагруженСегмент(оЗапрос.response.byteLength, оЗапрос._пТипДанных, чДлительностьЗагрузки, оЗапрос._чОжиданиеОтвета);
				оЗапрос._фВыполнить(оЗапрос.response);
			}
		} else {
			м_Журнал.Ой(`[Загрузчик] Не удалось загрузить ${оЗапрос._сНазвание}. ${КОД_ОТВЕТА + чКод} ${оЗапрос.statusText}` + (оЗапрос._лЖурнал && typeof оЗапрос._пТипДанных == 'number' ? ` ОжиданиеОтвета=${оЗапрос._чОжиданиеОтвета}мс` : ``) + (ЭтоНепустаяСтрока(оЗапрос.response) ? `\n${оЗапрос.response}` : оЗапрос.response === null ? ' response=null' : оЗапрос.responseType === 'arraybuffer' ? ` Размер=${оЗапрос.response.byteLength}байт` : ` Размер=${оЗапрос.response.length}символов`));
			if (чКод >= 400 && чКод <= 499 || оЗапрос.response === null || !ПослатьЗапрос(оЗапрос, true)) {
				if (оЗапрос.responseType === 'arraybuffer') {
					м_Статистика.ЗагруженСегмент(NaN, NaN, NaN, оЗапрос._чОжиданиеОтвета);
				}
				оЗапрос._фОтказаться(КОД_ОТВЕТА + чКод);
			}
		}
	});
	function ПолучитьРазмерОтвета(оЗапрос) {
		let кбРазмерЗаголовков = 17 + оЗапрос.statusText.length + оЗапрос.getAllResponseHeaders().length;
		if (ЭтоHTTP2(оЗапрос)) {
			кбРазмерЗаголовков = Math.round(кбРазмерЗаголовков * .5);
		}
		let кбРазмерТела;
		let сЗаголовок = оЗапрос.getResponseHeader('Content-Length');
		if (сЗаголовок) {
			кбРазмерТела = Number.parseInt(сЗаголовок, 10);
		} else if (оЗапрос.responseType === 'arraybuffer') {
			кбРазмерТела = оЗапрос.response.byteLength;
		} else {
			кбРазмерТела = оЗапрос.response.length;
			сЗаголовок = оЗапрос.getResponseHeader('Content-Encoding');
			if (сЗаголовок && сЗаголовок !== 'identity') {
				кбРазмерТела = Math.round(кбРазмерТела * .35);
			}
		}
		return кбРазмерЗаголовков + кбРазмерТела;
	}
	function ЭтоHTTP2(оЗапрос) {
		return оЗапрос.statusText.length === 0;
	}
	function ЗагрузитьСледующийСегмент() {
		let ч = г_моОчередь.length - 1;
		if (ч >= 0 && г_моОчередь[ч].пДанные === СОСТОЯНИЕ_СМЕНА_ВАРИАНТА && г_моОчередь[ч].чОбработка === ОБРАБОТКА_ЗАГРУЖЕН) {
			г_моОчередь.ПоказатьСостояние();
			while (--ч >= 0 && г_моОчередь[ч].чОбработка <= ОБРАБОТКА_ЗАГРУЖЕН) {
				if (typeof г_моОчередь[ч].пДанные != 'number') {
					г_моОчередь.Удалить(ч);
				}
			}
			г_моОчередь.ПоказатьСостояние();
		} else {
			let кОдновременныхЗагрузок = м_Настройки.Получить('кОдновременныхЗагрузок');
			let чДлительностьВсехЗагрузок = 0;
			for (let оСегмент of г_моОчередь) {
				if (оСегмент.чОбработка <= ОБРАБОТКА_ЗАГРУЖЕН) {
					чДлительностьВсехЗагрузок += оСегмент.чДлительность;
					if (оСегмент.чОбработка <= ОБРАБОТКА_ЗАГРУЖАЕТСЯ) {
						--кОдновременныхЗагрузок;
						if (оСегмент.чОбработка === ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ && кОдновременныхЗагрузок >= 0) {
							ЗагрузитьСегмент(оСегмент);
						}
					}
				}
			}
			const чПереполнениеОчереди = м_Настройки.Получить('чМаксРазмерБуфера') + м_Настройки.Получить('чРастягиваниеБуфера');
			if (чДлительностьВсехЗагрузок > чПереполнениеОчереди) {
				м_Журнал.Ой(`[Загрузчик] Длительность всех загрузок в очереди ${м_Журнал.F1(чДлительностьВсехЗагрузок)}с > ${м_Журнал.F1(чПереполнениеОчереди)}с`);
				ОбработатьНеудачнуюЗагрузкуСегмента(null);
				ЗагрузитьСледующийСегмент();
				return;
			}
		}
		м_Преобразователь.ПреобразоватьСледующийСегмент();
	}
	function ЗагрузитьСегмент(оСегмент) {
		const сАдрес = оСегмент.пДанные;
		оСегмент.пДанные = new ОтменаОбещания();
		оСегмент.пДанные.НачалоВыполнения();
		оСегмент.чОбработка = ОБРАБОТКА_ЗАГРУЖАЕТСЯ;
		Загрузить(оСегмент.пДанные, 'GET', сАдрес, ЗагружатьСегментНеДольше(оСегмент), null, null, `сегмент ${оСегмент.чНомер}`, м_Статистика.ОкноПоказано(), оСегмент.чДлительность).then(буфДанные => {
			Проверить(г_моОчередь.includes(оСегмент));
			оСегмент.пДанные = буфДанные;
			оСегмент.чОбработка = ОБРАБОТКА_ЗАГРУЖЕН;
			ЗагрузитьСледующийСегмент();
		}).catch(ДобавитьОбработчикИсключений(пПричина => {
			if (typeof пПричина == 'string' && оСегмент.чОбработка === ОБРАБОТКА_ЗАГРУЖАЕТСЯ) {
				Проверить(г_моОчередь.includes(оСегмент));
				ОбработатьНеудачнуюЗагрузкуСегмента(пПричина.сПричина === КОД_ОТВЕТА + 404 || пПричина.сПричина === КОД_ОТВЕТА + 410 ? null : оСегмент);
				Проверить(!г_моОчередь.includes(оСегмент));
				ЗагрузитьСледующийСегмент();
			} else if (пПричина === ОтменаОбещания.ОБЕЩАНИЕ_ОТМЕНЕНО) {
				м_Журнал.Вот(`[Загрузчик] Отменена загрузка сегмента ${оСегмент.чНомер}`);
				Проверить(!г_моОчередь.includes(оСегмент));
			} else {
				throw пПричина;
			}
		}));
	}
	function ЗагружатьСегментНеДольше(оСегмент) {
		const чПеременная = оСегмент.чДлительность * м_Настройки.Получить('кОдновременныхЗагрузок') * 1.15;
		const чПостоянная = 8;
		return (чПеременная + чПостоянная) * 1e3;
	}
	function ОбработатьНеудачнуюЗагрузкуСегмента(оНезагруженныйСегмент) {
		г_моОчередь.ПоказатьСостояние();
		const кВОчереди = г_моОчередь.length;
		if (оНезагруженныйСегмент) {
			г_моОчередь.Удалить(оНезагруженныйСегмент);
		} else {
			let чРазмерБуфера = м_Настройки.Получить('чРазмерБуфера');
			for (let оСегмент, ы = кВОчереди; оСегмент = г_моОчередь[--ы]; ) {
				if (оСегмент.чОбработка === ОБРАБОТКА_ЖДЕТ_ЗАГРУЗКИ) {
					if (чРазмерБуфера > 0) {
						чРазмерБуфера -= оСегмент.чДлительность;
					} else {
						г_моОчередь.Удалить(ы);
					}
				} else if (оСегмент.чОбработка === ОБРАБОТКА_ЗАГРУЖАЕТСЯ) {
					г_моОчередь.Удалить(ы);
				}
			}
		}
		г_моОчередь.ПоказатьСостояние();
		м_Статистика.НеЗагруженыСегменты(кВОчереди - г_моОчередь.length);
	}
	return {
		Загрузить,
		ЗагрузитьТекст,
		ЗагрузитьJson,
		ЗагрузитьСледующийСегмент
	};
})();

let м_Twitch = null;

function Twitch(_сКодКанала) {
	const ИНТЕРВАЛ_ОБНОВЛЕНИЯ_МЕТАДАННЫХ_ТРАНСЛЯЦИИ = 6e4;
	const ИНТЕРВАЛ_СЛЕЖЕНИЯ_ЗА_ПРОСМОТРОМ = 6e4;
	const ЗАДЕРЖКА_ОБНОВЛЕНИЯ_МЕТАДАННЫХ_ЗАПИСИ = 4 * 6e4;
	const СОЗДАВАТЬ_КЛИП_НЕ_ДОЛЬШЕ = 2e4;
	const ИДЕНТИФИКАТОР_КЛИЕНТА = 'jzkbprff40iqj646a697cyrvl0zt2m6';
	const ЗАГОЛОВКИ_ЗАПРОСА = {
		'Client-ID': ИДЕНТИФИКАТОР_КЛИЕНТА,
		Accept: 'application/vnd.twitchtv.v5+json'
	};
	let _сИдКанала = '';
	let _сИдТрансляции = '';
	let _сАдресЗаписи = '';
	let _сИдЗрителя = '';
	let _сКодЗрителя = '';
	let _сТокенЗрителя = '';
	let _ооОбновлениеМетаданных = new ОтменаОбещания();
	let _ооСлежениеЗаПросмотром = new ОтменаОбещания();
	_ооСлежениеЗаПросмотром.чТаймер = 0;
	function ОчиститьДанныеТрансляции() {
		_сИдТрансляции = _сАдресЗаписи = '';
	}
	function ПолучитьАдресКанала(лНеПеренаправлять) {
		return лНеПеренаправлять ? `https://www.twitch.tv/${encodeURIComponent(_сКодКанала)}?${АДРЕС_НЕ_ПЕРЕНАПРАВЛЯТЬ}` : `https://www.twitch.tv/${encodeURIComponent(_сКодКанала)}`;
	}
	function ПолучитьАдресПанелиЧата() {
		if (м_Настройки.Получить('лПолноценныйЧат')) {
			return ЭТО_ПЛАНШЕТ ? `https://www.twitch.tv/popout/${encodeURIComponent(_сКодКанала)}/chat?no-mobile-redirect=true` : `https://www.twitch.tv/popout/${encodeURIComponent(_сКодКанала)}/chat`;
		}
		return м_Настройки.Получить('лЗатемнитьЧат') ? `https://www.twitch.tv/embed/${encodeURIComponent(_сКодКанала)}/chat?darkpopout` : `https://www.twitch.tv/embed/${encodeURIComponent(_сКодКанала)}/chat`;
	}
	function ПолучитьАдресКаталогаИгры(сНазваниеИгры) {
		return 'https://www.twitch.tv/directory' + (сНазваниеИгры ? '/game/' + encodeURIComponent(сНазваниеИгры) : '');
	}
	function проверитьДоступностьСайтов() {
		ПолучитьПеченьку('https://coolcmd.ttvnw.net/', 'coolcmd').catch(м_Отладка.ПойманоИсключение);
		ПолучитьПеченьку('https://coolcmd.akamaized.net/', 'coolcmd').catch(м_Отладка.ПойманоИсключение);
	}
	function проверитьДоступностьАдреса(сАдрес) {
		if (!/^https?:\/\/(?:[^/]+\.)?(?:twitch\.tv|ttvnw\.net|akamaized\.net)\//.test(сАдрес)) {
			throw new Error(`Неизвестный адрес: ${сАдрес}`);
		}
	}
	function ИзменитьПодпискуЗрителяНаКанал(чПодписка) {
		Проверить(Number.isInteger(чПодписка));
		ПолучитьИлиИзменитьПодпискуЗрителяНаКанал(чПодписка);
	}
	function ПолучитьИлиИзменитьПодпискуЗрителяНаКанал(чПодписка) {
		Проверить(_сИдЗрителя && _сИдКанала && _сТокенЗрителя);
		if (_сИдЗрителя === _сИдКанала) {
			Проверить(чПодписка === void 0);
			м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
				чПодписка: ПОДПИСКА_НЕДОСТУПНА
			});
			return;
		}
		let сМетод, сПараметры;
		switch (чПодписка) {
		  case void 0:
			сМетод = 'GET';
			сПараметры = '';
			break;

		  case ПОДПИСКА_НЕОФОРМЛЕНА:
			сМетод = 'DELETE';
			сПараметры = '';
			break;

		  case ПОДПИСКА_НЕУВЕДОМЛЯТЬ:
			сМетод = 'PUT';
			сПараметры = '?notifications=false';
			break;

		  case ПОДПИСКА_УВЕДОМЛЯТЬ:
			сМетод = 'PUT';
			сПараметры = '?notifications=true';
			break;

		  default:
			Проверить(false);
		}
		м_Загрузчик.ЗагрузитьТекст(null, `https://api.twitch.tv/kraken/users/${_сИдЗрителя}/follows/channels/${_сИдКанала}${сПараметры}`, ЗАГРУЖАТЬ_МЕТАДАННЫЕ_НЕ_ДОЛЬШЕ, `подписка ${чПодписка}`, true, чПодписка === void 0 ? ЗАГОЛОВКИ_ЗАПРОСА : {
			'Client-ID': ИДЕНТИФИКАТОР_КЛИЕНТА,
			Accept: 'application/vnd.twitchtv.v5+json',
			Authorization: `OAuth ${_сТокенЗрителя}`
		}, сМетод).then(сРезультат => {
			if (чПодписка === ПОДПИСКА_НЕОФОРМЛЕНА) {
				Проверить(сРезультат === '');
				м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
					чПодписка: ПОДПИСКА_НЕОФОРМЛЕНА
				});
				return;
			}
			let оРезультат;
			try {
				оРезультат = JSON.parse(сРезультат);
			} catch (пИсключение) {
				throw String(пИсключение);
			}
			Проверить(ЭтоНепустаяСтрока(оРезультат.created_at));
			Проверить(typeof оРезультат.notifications == 'boolean');
			м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
				чПодписка: чПодписка !== void 0 ? чПодписка : оРезультат.notifications ? ПОДПИСКА_УВЕДОМЛЯТЬ : ПОДПИСКА_НЕУВЕДОМЛЯТЬ
			});
		}).catch(ДобавитьОбработчикИсключений(пПричина => {
			if (пПричина === КОД_ОТВЕТА + 404) {
				Проверить(чПодписка === void 0);
				м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
					чПодписка: ПОДПИСКА_НЕОФОРМЛЕНА
				});
			} else if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось обновить подписку. ${пПричина}`);
				м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
					чПодписка: ПОДПИСКА_НЕДОСТУПНА
				});
			} else {
				throw пПричина;
			}
		}));
	}
	const ПолученИдКанала = ДобавитьОбработчикИсключений(() => {
		ПолучитьМетаданныеКанала();
		if (_сИдЗрителя) {
			ПолучитьИлиИзменитьПодпискуЗрителяНаКанал();
		}
	});
	ПолучитьАбсолютныйАдресСпискаВариантов.сПроигрыватель = '';
	function ПолучитьАбсолютныйАдресСпискаВариантов(ооОтменаОбещания, bHttp = false) {
		let лОбещаниеОтменено = false;
		ооОтменаОбещания && ооОтменаОбещания.ЗаменитьОбработчик(() => лОбещаниеОтменено = true);
		return ПрочестьПеченькуАвторизацииЗрителя().then(() => {
			if (лОбещаниеОтменено) {
				throw ОтменаОбещания.ОБЕЩАНИЕ_ОТМЕНЕНО;
			}
			const сТокен = _сТокенЗрителя ? `&oauth_token=${encodeURIComponent(_сТокенЗрителя)}` : '&oauth_token';
			if (ПолучитьАбсолютныйАдресСпискаВариантов.сПроигрыватель === '') {
				ПолучитьАбсолютныйАдресСпискаВариантов.сПроигрыватель = ЭТО_ПЛАНШЕТ ? `&platform=mobile_web&player_backend=mediaplayer&player_type=${Math.random() < .5 ? 'popout' : 'twitch_everywhere'}` : `&platform=web&player_backend=flash&player_type=${Math.random() < .5 ? 'site' : 'twitch_everywhere'}`;
			}
			return м_Загрузчик.ЗагрузитьТекст(ооОтменаОбещания, `https://api.twitch.tv/api/channels/${encodeURIComponent(_сКодКанала)}/access_token?need_https=${!bHttp}${сТокен}${ПолучитьАбсолютныйАдресСпискаВариантов.сПроигрыватель}`, ЗАГРУЖАТЬ_СПИСОК_ВАРИАНТОВ_НЕ_ДОЛЬШЕ, ПолучитьАбсолютныйАдресСпискаВариантов.сПроигрыватель, true, {
				'Client-ID': ИДЕНТИФИКАТОР_КЛИЕНТА
			});
		}).then(сРезультат => {
			const оРезультат = JSON.parse(сРезультат);
			Проверить(ЭтоНепустаяСтрока(оРезультат.token) && ЭтоНепустаяСтрока(оРезультат.sig));
			const оТокен = JSON.parse(оРезультат.token);
			Проверить(оТокен.channel === _сКодКанала);
			if (_сИдКанала === '') {
				Проверить(Number.isInteger(оТокен.channel_id));
				_сИдКанала = String(оТокен.channel_id);
				setImmediate(ПолученИдКанала);
			} else {
				Проверить(_сИдКанала === String(оТокен.channel_id));
			}
			return `${bHttp ? 'http' : 'https'}://usher.ttvnw.net/api/channel/hls/${encodeURIComponent(_сКодКанала)}.m3u8?allow_source=true&allow_audio_only=true&sig=${encodeURIComponent(оРезультат.sig)}&token=${encodeURIComponent(оРезультат.token)}`;
		}, пПричина => {
			if (пПричина === КОД_ОТВЕТА + 400 || пПричина === КОД_ОТВЕТА + 404 || пПричина === КОД_ОТВЕТА + 422) {
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0203');
			} else {
				throw пПричина;
			}
		});
	}
	ПрочестьПеченькуАвторизацииЗрителя._обОбещание = null;
	function ПрочестьПеченькуАвторизацииЗрителя() {
		if (ПрочестьПеченькуАвторизацииЗрителя._обОбещание === null) {
			ПрочестьПеченькуАвторизацииЗрителя._обОбещание = ПолучитьПеченьку('https://coolcmd.twitch.tv/', 'twilight-user').then(оПеченька => {
				const сДляЖурнала = м_Журнал.O(оПеченька).replace(/%22authToken%22:%22[^%]+%22/, '---8<---');
				try {
					var оАвторизация = JSON.parse(decodeURIComponent(оПеченька.value));
				} catch (_) {}
				if (ЭтоОбъект(оАвторизация) && ЭтоНепустаяСтрока(оАвторизация.id) && ЭтоНепустаяСтрока(оАвторизация.login) && ЭтоНепустаяСтрока(оАвторизация.authToken)) {
					м_Журнал.Вот(`[Twitch] Печенька авторизации:\n${сДляЖурнала}`);
					_сИдЗрителя = оАвторизация.id;
					_сКодЗрителя = оАвторизация.login;
					_сТокенЗрителя = оАвторизация.authToken;
					м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
						сИмя: ЭтоНепустаяСтрока(оАвторизация.displayName) ? оАвторизация.displayName : оАвторизация.login
					});
				} else {
					м_Журнал.Ой(`[Twitch] Печенька авторизации не найдена: ${сДляЖурнала}`);
					_сИдЗрителя = _сКодЗрителя = _сТокенЗрителя = '';
					м_События.ПослатьСобытие('twitch-полученыметаданныезрителя', {
						сИмя: ''
					});
				}
			});
		}
		return ПрочестьПеченькуАвторизацииЗрителя._обОбещание;
	}
	function ПолучитьМетаданныеКанала() {
		Проверить(_сИдКанала);
		м_Загрузчик.ЗагрузитьJson(null, `https://api.twitch.tv/kraken/channels/${_сИдКанала}`, ЗАГРУЖАТЬ_МЕТАДАННЫЕ_НЕ_ДОЛЬШЕ, 'метаданные канала', true, ЗАГОЛОВКИ_ЗАПРОСА).then(оРезультат => {
			const чКаналСоздан = Date.parse(оРезультат.created_at);
			Проверить(ЭтоНепустаяСтрока(оРезультат._id) && ЭтоНепустаяСтрока(оРезультат.name) && Number.isFinite(оРезультат.followers) && Number.isFinite(оРезультат.views) && Number.isFinite(чКаналСоздан));
			if (оРезультат._id !== _сИдКанала) {
				Проверить(оРезультат.name !== _сКодКанала);
				window.location.replace(ПолучитьАдресНашегоПроигрывателя(оРезультат.name));
				return;
			}
			м_События.ПослатьСобытие('twitch-полученыметаданныеканала', {
				сИмя: оРезультат.display_name || оРезультат.name,
				сАватар: оРезультат.logo || 'player.svg#svg-avatar',
				сОписание: оРезультат.description,
				сКодЯзыка: оРезультат.broadcaster_language === 'other' ? null : оРезультат.broadcaster_language,
				кПодписчиков: оРезультат.followers,
				кПросмотров: оРезультат.views,
				чКаналСоздан
			});
		}).catch(пПричина => {
			if (пПричина === КОД_ОТВЕТА + 422) {
				м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0203');
			} else if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось получить метаданные канала. ${пПричина}`);
			} else {
				м_Отладка.ПойманоИсключение(пПричина);
			}
		});
		м_Загрузчик.ЗагрузитьJson(null, `https://api.twitch.tv/kraken/channels/${_сИдКанала}/teams`, ЗАГРУЖАТЬ_МЕТАДАННЫЕ_НЕ_ДОЛЬШЕ, 'команды канала', true, ЗАГОЛОВКИ_ЗАПРОСА).then(оРезультат => {
			Проверить(Array.isArray(оРезультат.teams));
			for (let оКоманда of оРезультат.teams) {
				Проверить(ЭтоНепустаяСтрока(оКоманда.name));
				оКоманда.сИмя = оКоманда.display_name || оКоманда.name;
				if (оКоманда.info) {
					оКоманда.сОписание = ПреобразоватьРазметкуВТекст(оКоманда.info);
				}
				оКоманда.сАдрес = `https://www.twitch.tv/team/${encodeURIComponent(оКоманда.name)}`;
			}
			м_События.ПослатьСобытие('twitch-полученыметаданныеканала', {
				моКоманды: оРезультат.teams
			});
		}).catch(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось получить команды канала. ${пПричина}`);
			} else {
				м_Отладка.ПойманоИсключение(пПричина);
			}
		});
	}
	function ОбновитьМетаданныеТрансляции(чЧерез) {
		Проверить(_сИдКанала);
		м_Журнал.Вот(`[Twitch] Загрузка метаданных трансляции начнется через ${м_Журнал.F0(чЧерез)}мс`);
		Ждать(_ооОбновлениеМетаданных, чЧерез).then(() => {
			return м_Загрузчик.ЗагрузитьJson(_ооОбновлениеМетаданных, `https://api.twitch.tv/kraken/streams/${_сИдКанала}`, ЗАГРУЖАТЬ_МЕТАДАННЫЕ_НЕ_ДОЛЬШЕ, 'метаданные трансляции', true, ЗАГОЛОВКИ_ЗАПРОСА);
		}).then(оРезультат => {
			if (!ЭтоОбъект(оРезультат) || !ЭтоОбъект(оРезультат.stream)) {
				throw 'В загруженном JSON нет метаданных';
			}
			const чТрансляцияСоздана = Date.parse(оРезультат.stream.created_at);
			const чДлительностьТрансляции = performance.now() + г_чТочноеВремя - чТрансляцияСоздана;
			Проверить(String(оРезультат.stream.channel._id) === _сИдКанала && оРезультат.stream.hasOwnProperty('_id') && Number.isFinite(оРезультат.stream.viewers) && Number.isFinite(чТрансляцияСоздана) && чДлительностьТрансляции > -1e3);
			if (_сКодКанала !== оРезультат.stream.channel.name) {
				м_Журнал.Ой(`[Twitch] Изменился код канала с ${_сКодКанала} на ${оРезультат.stream.channel.name}`);
				_сКодКанала = оРезультат.stream.channel.name;
			}
			const лЗапись = оРезультат.stream.stream_type !== 'live' || оРезультат.stream.is_playlist || оРезультат.stream.channel.broadcaster_software === 'watch_party_rerun';
			const оМетаданные = {
				сНазваниеТрансляции: /\S/.test(оРезультат.stream.channel.status) ? оРезультат.stream.channel.status.trim() : Текст('J0103'),
				сНазваниеИгры: лЗапись ? null : оРезультат.stream.channel.game || Текст('J0104'),
				сАдресИгры: ПолучитьАдресКаталогаИгры(оРезультат.stream.channel.game),
				кЗрителей: оРезультат.stream.viewers,
				чДлительностьТрансляции
			};
			if (_сИдТрансляции === '') {
				м_Журнал.Окак(`[Twitch] Идентификатор трансляции: ${оРезультат.stream._id}`);
				_сИдТрансляции = String(оРезультат.stream._id);
				оМетаданные.лЗапись = лЗапись;
				оМетаданные.сАдресЗаписи = '';
				if (!лЗапись) {
					ПолучитьАдресЗаписиТрансляции(чДлительностьТрансляции);
				}
				начатьСлежениеЗаПросмотром();
			}
			м_События.ПослатьСобытие('twitch-полученыметаданныетрансляции', оМетаданные);
			ОбновитьМетаданныеТрансляции(ИНТЕРВАЛ_ОБНОВЛЕНИЯ_МЕТАДАННЫХ_ТРАНСЛЯЦИИ);
		}).catch(ДобавитьОбработчикИсключений(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось загрузить метаданные трансляции. ${пПричина}`);
				ОбновитьМетаданныеТрансляции(ИНТЕРВАЛ_ОБНОВЛЕНИЯ_МЕТАДАННЫХ_ТРАНСЛЯЦИИ / 2);
			} else if (пПричина === ОтменаОбещания.ОБЕЩАНИЕ_ОТМЕНЕНО) {
				м_Журнал.Вот('[Twitch] Отменено обновление метаданных трансляции');
			} else {
				throw пПричина;
			}
		}));
	}
	function ПолучитьАдресЗаписиТрансляции(чДлительностьТрансляции) {
		Проверить(_сИдКанала && _сИдТрансляции);
		const сИдТрансляции = _сИдТрансляции;
		const чЖдать = Math.max(ЗАДЕРЖКА_ОБНОВЛЕНИЯ_МЕТАДАННЫХ_ЗАПИСИ - чДлительностьТрансляции, 0);
		м_Журнал.Вот(`[Twitch] Получение записи трансляции начнется через ${м_Журнал.F0(чЖдать)}мс`);
		Ждать(null, чЖдать).then(() => {
			if (сИдТрансляции !== _сИдТрансляции) {
				throw 'Трансляция завершена';
			}
			return м_Загрузчик.ЗагрузитьJson(null, `https://api.twitch.tv/kraken/channels/${_сИдКанала}/videos?broadcast_type=archive&limit=3`, ЗАГРУЖАТЬ_МЕТАДАННЫЕ_НЕ_ДОЛЬШЕ, 'запись трансляции', true, ЗАГОЛОВКИ_ЗАПРОСА);
		}).then(оРезультат => {
			if (сИдТрансляции !== _сИдТрансляции) {
				throw 'Трансляция завершена';
			}
			for (let оЗапись of оРезультат.videos) {
				if (String(оЗапись.broadcast_id) === сИдТрансляции) {
					Проверить(оЗапись.broadcast_type === 'archive');
					Проверить(String(оЗапись.channel._id) === _сИдКанала);
					Проверить(ЭтоНепустаяСтрока(оЗапись.url));
					_сАдресЗаписи = оЗапись.url;
					м_События.ПослатьСобытие('twitch-полученыметаданныетрансляции', {
						лЗапись: false,
						сАдресЗаписи: _сАдресЗаписи
					});
					break;
				}
			}
		}).catch(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось загрузить запись трансляции. ${пПричина}`);
			} else {
				м_Отладка.ПойманоИсключение(пПричина);
			}
		});
	}
	function НачатьСборМетаданныхТрансляции() {
		ОчиститьДанныеТрансляции();
		_ооОбновлениеМетаданных.НачалоВыполнения();
		ОбновитьМетаданныеТрансляции(0);
	}
	function ЗавершитьСборМетаданныхТрансляции(лТрансляцияЗавершена) {
		м_Журнал.Вот(`[Twitch] Отменяю обновление метаданных трансляции ТрансляцияЗавершена=${лТрансляцияЗавершена}`);
		if (лТрансляцияЗавершена) {
			ОчиститьДанныеТрансляции();
		}
		_ооОбновлениеМетаданных.Отменить();
		завершитьСлежениеЗаПросмотром();
	}
	function начатьСлежениеЗаПросмотром() {
		if (_сКодЗрителя !== '') {
			м_Журнал.Вот('[Twitch] Начинаю слежение за просмотром');
			_ооСлежениеЗаПросмотром.НачалоВыполнения();
			_ооСлежениеЗаПросмотром.чТаймер = setInterval(отправитьДанныеСлеженияЗаПросмотром, ИНТЕРВАЛ_СЛЕЖЕНИЯ_ЗА_ПРОСМОТРОМ);
			отправитьДанныеСлеженияЗаПросмотром();
		}
	}
	function завершитьСлежениеЗаПросмотром() {
		if (_ооСлежениеЗаПросмотром.чТаймер !== 0) {
			м_Журнал.Вот('[Twitch] Завершаю слежение за просмотром');
			clearInterval(_ооСлежениеЗаПросмотром.чТаймер);
			_ооСлежениеЗаПросмотром.чТаймер = 0;
			_ооСлежениеЗаПросмотром.Отменить();
		}
	}
	const отправитьДанныеСлеженияЗаПросмотром = ДобавитьОбработчикИсключений(() => {
		Проверить(_сИдТрансляции && _сИдКанала && _сКодЗрителя);
		const оОтправить = new URLSearchParams();
		оОтправить.set('data', btoa(JSON.stringify([ {
			event: 'minute-watched',
			properties: {
				broadcast_id: _сИдТрансляции,
				channel_id: _сИдКанала,
				login: _сКодЗрителя,
				platform: 'web',
				player: 'site'
			}
		} ])));
		м_Загрузчик.Загрузить(_ооСлежениеЗаПросмотром, 'POST', 'https://video-edge-f5abf9.pdx01.abs.hls.ttvnw.net/v1/segment/Cv78TmJ2lk6mf32VWtVK5VtYpAqQXWjuTdJWjrVsPjdQNXhCktQJd4zRi-jQvyjIepy-KuSVaGIolUmiz0QhMdzmwcQeav4mOPf-9T3S9hV9tdJFq0QtG8az-q8xHsQ3o7XCca-e8yHwXnwMR3cWk0fsx2oyHDIcdbhMtNC5ub-aOuLcvzNMCkWjsdAqfOZR5ot6QWbeYoGmsoYnONK-ZfMciXKqNp5RbW3JjJzplEs0VHJ_ZOeiE25-pojfdRPYgfoe5fMmclwBxSiGdRZzOFkIFkMWJJ3Twd8AaNeE3pwD-wUA60Ma3aZh_Z3pdnRq-uQrTR_QMKeYACbibKPyGdMk_mOZzETabnZv7udcufpsEbS2wnk1bIOvVgrZLD1oZBuK26wqmA92RjpD-evfAW_bWyAF0nFUWt9WDBJT_gCptphH7euqUGIq_g3gSnQWO5H3BN8s5lpQC2t0TJG3IwuiVhHqGmLlNvn0WFzGDxU0IzfWJByed04BBVNIDphM2RSp4VBLdpcH-OFyntEF0w3vS3FZ9d3Oi6EJFl0523ENkprrsK4HRqHxPyTRlmjgMYHlaoZ5mvhMkup1uWRPVG9ey_ZY40p8BGccNRtvpszF14KakNyEw1aACtt7D2Ba1bDFz51xPOfnUinGNshpfHGk5X1D7CjwIybwOm5f6aFAA59nGErBY8JcCEBUG3_sdtoH96cazHK8RaFpUiihnrSLdY-UT_wiYUqlglSHA7c7m0tHgdLyc0EGsAvEFHnQ.ts', ЗАГРУЖАТЬ_МЕТАДАННЫЕ_НЕ_ДОЛЬШЕ, null, оОтправить, 'слежение за просмотром', false, 'none').catch(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось отправить данные слежения за просмотром. ${пПричина}`);
			} else if (пПричина !== ОтменаОбещания.ОБЕЩАНИЕ_ОТМЕНЕНО) {
				м_Отладка.ПойманоИсключение(пПричина);
			}
		});
	});
	function ПолучитьАдресЗаписиДляТекущейПозиции() {
		const чПозиция = м_Проигрыватель.ПолучитьПозициюВоспроизведенияТрансляции(false);
		if (_сАдресЗаписи === '' || чПозиция === -1) {
			м_Журнал.Ой(`[Twitch] Недостаточно данных для получения адреса записи АдресЗаписи=${_сАдресЗаписи} Позиция=${чПозиция}`);
			return '';
		}
		return `${_сАдресЗаписи}?t=${Math.floor(чПозиция / 60 / 60)}h${Math.floor(чПозиция / 60 % 60)}m${Math.floor(чПозиция % 60)}s`;
	}
	СоздатьКлип.сТелоЗапроса = `mutation createClip($input: CreateClipInput!) {
    createClip(input: $input) {
        clip {
            id
            title
            url
        }
    }
}`;
	function СоздатьКлип() {
		const чПозиция = м_Проигрыватель.ПолучитьПозициюВоспроизведенияТрансляции(true);
		if (_сИдКанала === '' || _сИдТрансляции === '' || чПозиция === -1 || _сТокенЗрителя === '') {
			м_Журнал.Ой(`[Twitch] Недостаточно данных для создания клипа ИдКанала=${_сИдКанала} ИдТрансляции=${_сИдТрансляции} Позиция=${чПозиция} ИдЗрителя=${_сИдЗрителя}`);
			м_Уведомление.ПоказатьЖопу();
			return;
		}
		const сОтправить = перевестиGqlВСтроку(СоздатьКлип.сТелоЗапроса, {
			input: {
				broadcasterID: _сИдКанала,
				offsetSeconds: Math.ceil(чПозиция),
				videoID: '',
				broadcastID: _сИдТрансляции
			}
		});
		м_Журнал.Окак(`[Twitch] Создаю клип ${сОтправить} ИдЗрителя=${_сИдЗрителя}`);
		м_Загрузчик.Загрузить(null, 'POST', 'https://gql.twitch.tv/gql', СОЗДАВАТЬ_КЛИП_НЕ_ДОЛЬШЕ, {
			Authorization: `OAuth ${_сТокенЗрителя}`,
			'Client-ID': ИДЕНТИФИКАТОР_КЛИЕНТА,
			'Content-Type': 'application/json'
		}, сОтправить, 'создание клипа', true, 'json').then(оРезультат => {
			try {
				Проверить(/^https?:\/\//.test(оРезультат.data.createClip.clip.url));
			} catch (_) {
				throw 'В загруженном JSON нет адреса клипа';
			}
			ОткрытьАдресВНовойВкладке(`${оРезультат.data.createClip.clip.url}/edit`);
		}).catch(пПричина => {
			if (typeof пПричина == 'string') {
				м_Журнал.Ой(`[Twitch] Не удалось создать клип. ${пПричина}`);
				м_Уведомление.ПоказатьЖопу();
			} else {
				м_Отладка.ПойманоИсключение(пПричина);
			}
		});
	}
	function ПолучитьАбсолютныйАдресСпискаСегментов(сАбсолютныйАдресСпискаСегментов) {
		return сАбсолютныйАдресСпискаСегментов;
	}
	Проверить(ЭтоНепустаяСтрока(_сКодКанала));
	return {
		ПолучитьАбсолютныйАдресСпискаВариантов,
		ПолучитьАбсолютныйАдресСпискаСегментов,
		ПолучитьАдресКанала,
		ПолучитьАдресПанелиЧата,
		проверитьДоступностьСайтов,
		проверитьДоступностьАдреса,
		НачатьСборМетаданныхТрансляции,
		ЗавершитьСборМетаданныхТрансляции,
		ИзменитьПодпискуЗрителяНаКанал,
		ПолучитьАдресЗаписиДляТекущейПозиции,
		СоздатьКлип
	};
}

function ЗавершитьРаботу(лБыстро) {
	try {
		г_лРаботаЗавершена = true;
		м_Журнал.Окак('[Запускалка] Завершаю работу');
		window.stop();
		if (!лБыстро) {
			м_Преобразователь.Остановить();
			м_Проигрыватель.Остановить();
			м_Помойка.Сжечь();
		}
		м_Журнал.Окак('[Запускалка] Работа завершена');
	} catch (_) {}
}

ДобавитьОбработчикИсключений(() => {
	function ВыделитьКанал(оАдрес) {
		const сКанал = РазобратьПараметры(оАдрес).get('channel') || 'channel';
		return сКанал.includes(':') ? сКанал : сКанал.toLowerCase();
	}
	function ЭтотКаналУжеОткрыт(сКанал) {
		Проверить(ЭтоНепустаяСтрока(сКанал));
		const чОтправитель = Math.random();
		ПолучитьApiРасширения(oApi => {
			oApi.runtime.sendMessage({
				сЗапрос: 'ЭтотКаналУжеОткрыт',
				чОтправитель,
				сКанал
			}, void 0, пОтвет => {
				if (пОтвет === true) {
					м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0211');
				} else {
					chrome.runtime.lastError;
				}
			});
		});
		chrome.runtime.onMessage.addListener(ДобавитьОбработчикИсключений((оСообщение, оОтправитель, фОтветить) => {
			if (оСообщение.сЗапрос === 'ЭтотКаналУжеОткрыт' && оСообщение.чОтправитель !== чОтправитель) {
				м_Журнал.Ой(`[Запускалка] В другой вкладке открыт канал ${оСообщение.сКанал}`);
				if (оСообщение.сКанал === сКанал) {
					фОтветить(true);
				}
			}
		}));
		chrome.runtime.onUpdateAvailable.addListener(оВерсия => {
			м_Журнал.Ой(`[Запускалка] Отложено обновление расширения до версии ${оВерсия.version}`);
		});
	}
	function ПолучитьТекущуюВкладку() {
		return new Promise((фВыполнить, фОтказаться) => {
			chrome.tabs.getCurrent(оВкладка => {
				try {
					Проверить(!chrome.runtime.lastError);
					Проверить(Number.isInteger(оВкладка.id) && оВкладка.id >= 0);
					г_чИдВкладки = оВкладка.id;
					фВыполнить();
				} catch (пИсключение) {
					фОтказаться(пИсключение);
				}
			});
		});
	}
	function ОбработатьВыгрузкуСтраницы(оСобытие) {
		м_Журнал.Окак(`[Запускалка] window.on${оСобытие.type}`);
		ЗавершитьРаботу(true);
	}
	function НачатьРаботу() {
		Проверить(!г_лРаботаЗавершена);
		м_Журнал.Вот(`[Запускалка] Начало работы ${performance.now().toFixed()}мс`);
		window.addEventListener('unload', ОбработатьВыгрузкуСтраницы);
		м_Управление.Запустить();
		if (м_Проигрыватель.Запустить()) {
			м_Список.Запустить();
		} else {
			м_Управление.ОстановитьПросмотрТрансляции();
		}
		м_Статистика.Запустить();
	}
	if (window.top !== window) {
		return;
	}
	if (navigator.userAgent.includes('Gecko/') || navigator.userAgent.includes('Edge/')) {
		м_Отладка.ЗавершитьРаботуИПоказатьСообщение('J0204');
	}
	Promise.all([ м_Настройки.Восстановить(), ПолучитьТекущуюВкладку() ]).then(НачатьРаботу).catch(м_Отладка.ПойманоИсключение);
	const сКанал = ВыделитьКанал(window.location);
	ЭтотКаналУжеОткрыт(сКанал);
	м_Twitch = Twitch(сКанал);
	м_Twitch.проверитьДоступностьСайтов();
})();