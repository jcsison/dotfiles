alias ..='cd ..'
alias ...='cd ../..'

alias android="nohup emulator @Pixel_8_Pro_API_35 -dns-server 8.8.8.8 > /dev/null 2>&1 &"
alias android6="nohup emulator @Pixel_6_Pro_API_35 -dns-server 8.8.8.8 > /dev/null 2>&1 &"
alias brightness="sudo ~/dotfiles/utils/bin/brightness"
alias cd..='cd ..'
alias checkip='curl -s checkip.dyndns.org | grep -Eo "[0-9\.]+"'
alias cmatrix='cmatrix -b'
alias cp='cp -iv'
alias cwall='feh --bg-fill'
alias deb='sudo dpkg -R --install .'
alias debclean='sudo deborphan --guess-all | sudo xargs apt-get -y remove --purge'
alias detach='sudo udisks --detach'
alias dict='dict -d wn'
alias dirstat='sudo ncdu -rx'
alias find='sudo find'
alias finda='sudo find / -name'
alias flowpro='ssh -i "~/.ssh/flowpro-jcsison.pem" ubuntu@ec2-3-137-205-190.us-east-2.compute.amazonaws.com'
alias fm='ranger'
alias font='sudo fc-cache -f -v'
alias fzfl='fzf | ls'
alias ga='git add'
alias ga.='git add .'
alias gb='git branch'
alias gc='git commit -v'
alias gcf='git ls-files -u | cut -f 2 | sort -u'
alias gch='git checkout'
alias gchb='git checkout -b'
alias gchpr='gh pr checkout'
alias gcm='git commit --amend'
alias gcz='git cz'
alias gd='git diff -M'
alias gdc='git diff -M --cached'
alias gex='git rm --cached `git ls-files -i --exclude-from=.gitignore`'
alias gf='git fetch'
alias gfa='git fetch --all'
alias gig='git rm --cached `git ls-files -i --exclude-from=.gitignore`'
alias gl='git log --graph --pretty="format:%C(yellow)%h%C(auto)%d%Creset %s %C(white) %C(cyan)%an, %C(magenta)%ar%Creset"'
alias gla='gl --all'
alias gm='git merge --no-ff'
alias gmf='git merge --ff-only'
alias gp='git push'
alias gpo='git push --set-upstream origin'
alias gpu='git status'
alias gpull='git pull'
alias gr='git reset'
alias grb='git rebase'
alias grbc='git rebase --continue'
alias grh='git reset --hard'
alias grs='git reset --soft'
alias gs='git status -sb'
alias gsh='git show'
alias gst='git stash'
alias gstp='git stash pop'
alias hdmi='xrandr --output HDMI-1 --mode 1920x1080 --rate 120'
alias ifconfig='ip addr'
alias install='sudo pacman -S'
alias l='ls -alG'
alias largest="find . -printf '%s %p\n' | sort -nr | head"
alias lg3d='wmname LG3D'
alias logout='pkill -KILL -u $(whoami)'
alias ls='ls -aG'
alias lsize='du -sh .[!.]* ./* | sort -h | tail'
alias lsl='l'
alias mogi='sudo mount -o remount,exec /media/removable/mogi'
alias mv='mv -iv'
alias notes='vim ~/Desktop/notes.txt'
alias nowi='sudo mount -o remount,exec /media/removable/nowi'
alias np='notify-send "$(mpc)"'
alias octave='octave --no-gui'
alias packages='dpigs'
alias permit='sudo chmod 755'
alias pip='pip3'
alias pipes='pipes -r 0 -f 50 -s 15 -t 2'
alias pipesx='pipesx -r 0 -f 100'
alias python='python3'
alias reloadt='xrdb -merge ~/.config/urxvt/Xresources && source ~/.bashrc'
alias rm='rm -iv'
alias rn-all-android='rn-i-init && rn-android'
alias rn-all-ios='rn-i-init && rn-ios'
alias rn-android='yarn run android'
alias rn-clean='yarn run clean'
alias rn-i-init-android='rn-all-android'
alias rn-i-init-ios='rn-all-ios'
alias rn-i-init='rn-i && rn-init'
alias rn-i='yarn'
alias rn-init-android='rn-init && rn-android'
alias rn-init-ios='rn-init && rn-ios'
alias rn-init='yarn run init --verbose -b internal -e prod'
alias rn-ios='yarn run ios --simulator "iPhone 15 Pro"'
alias rn-lint='yarn run lint'
alias screenfetch='neofetch'
alias scrot='scrot ~/^o^/screenshots/%Y-%m-%d-%H%M%S_scrot.png'
alias suspend='pmset sleepnow'
alias status='notify-send -t 30000 "$(fortune)"'
alias sudo='sudo '
alias tar='tar -v'
alias uninstall='sudo pacman -R'
alias update='sudo pacman -Syu'
alias updatetime='sudo ntpdate -s us.pool.ntp.org'
alias vim='nvim'
alias vimf='nvim $(ls | fzf)'
alias vpn='~/work/scripts/vpn.sh jumpcloud'
alias winclass='xprop | grep WM_CLASS'
alias winpid='xprop _NET_WM_PID'
alias xbz2='tar -xvjf'
alias xgz='tar -zxvf'

function adbpair() {
  DEFAULT_IP="192.168.7.56"

  unset port
  unset code

  if [[ -n "$BASH_VERSION" ]]; then
    read -e -i "$DEFAULT_IP" -p "Enter IP address: " ip
    ip=${ip:-$DEFAULT_IP}
  else
    echo -n "Enter IP address [$DEFAULT_IP]: "
    read ip
    ip=${ip:-$DEFAULT_IP}
  fi

  while [[ -z "$port" ]]; do
    echo -n "Enter port: "
    read port
    if [[ -z "$port" ]]; then
      echo "Port is required."
    fi
  done

  while [[ -z "$code" ]]; do
    echo -n "Enter pairing code: "
    read code
    if [[ -z "$code" ]]; then
      echo "Pairing code is required."
    fi
  done

  echo "Running: adb pair $ip:$port $code"
  adb pair "$ip:$port" "$code"
}
function audio() { streamlink --player "mpv --no-video" "$@" worst; }
function decrypt() {
  if [ -z "$1" ]; then
    echo "Usage: decrypt <encrypted_file>"
    return 1
  fi

  ENCRYPTED_FILE="$1"

  if [ ! -f "$ENCRYPTED_FILE" ]; then
    echo "Error: Encrypted file '$ENCRYPTED_FILE' not found!"
    return 1
  fi

  OUTPUT_FILE="${ENCRYPTED_FILE%.asc}"
  gpg --output "$OUTPUT_FILE" --decrypt "$ENCRYPTED_FILE"

  if [ $? -eq 0 ]; then
    echo "File '$ENCRYPTED_FILE' decrypted successfully to '$OUTPUT_FILE'"
  else
    echo "Decryption failed!"
  fi
}
function encrypt() {
  if [ -z "$1" ]; then
    echo "Usage: encrypt <file> [recipient_email]"
    return 1
  fi

  FILE="$1"
  RECIPIENT="${2:-your_default_email@example.com}"

  if [ ! -f "$FILE" ]; then
    echo "Error: File '$FILE' not found!"
    return 1
  fi

  gpg --armor --encrypt --recipient "$RECIPIENT" "$FILE"

  if [ $? -eq 0 ]; then
    echo "File '$FILE' encrypted successfully to '$FILE.asc'"
  else
    echo "Encryption failed!"
  fi
}
function html2pdf() { wkhtmltopdf --zoom 1.25 -s Letter "$@".html "$@.pdf"; }
function stream() { streamlink --player mpv "$@" best; }
function twitch() {
  streamlink --player mpv twitch.tv/"$@" best &
  irssi --connect=twitch
}
function twitchaudio() { streamlink --player "mpv --no-video" twitch.tv/"$@" audio_only; }

# Enable Git completions for aliases
if [ -f "/usr/share/bash-completion/completions/git" ]; then
  . /usr/share/bash-completion/completions/git
  for a in $(alias | sed -n 's/^alias \(g[^=]*\)=.git .*/\1/p'); do
    c=$(alias $a | sed 's/^[^=]*=.git \([a-z0-9\-]\+\).*/\1/' | tr '-' '_')
    if set | grep -q "^_git_$c *()"; then
      eval "__git_complete $a _git_$c"
    fi
  done
fi
